openapi: 3.0.1
info:
  contact:
    email: api-support@whisper.security
    name: Whisper API Support
    url: https://docs.whisper.security
  description: |
    <h2>The Foundational Intelligence Layer for the Internet</h2>
    <p>The Whisper API provides comprehensive, real-time intelligence on any internet asset. By connecting billions of data points across live internet routing, historical registration records, and deep resolution data, our API moves beyond simple enrichment to deliver predictive, context-rich insights.</p>
    <p>This document is the single source of truth for our v1 API. It is designed for security experts, developers, and automated systems to understand and leverage the full power of our platform.</p>

    <h3>üöÄ Quick Start</h3>
    <p><b>1. Get your API key:</b> <a href="https://dash.whisper.security">Sign up at dash.whisper.security</a></p>
    <p><b>2. Make your first request:</b></p>
    <pre><code>curl -H "Authorization: Bearer YOUR_API_KEY" https://api.whisper.security/v1/indicators/ip/8.8.8.8</code></pre>
    <p><b>3. Explore the API:</b> Use the "Try it out" button in each endpoint below to test interactively.</p>

    <h3>üéØ Key Features</h3>
    <ul>
        <li><b>Unified & Simple:</b> Small set of powerful, resource-oriented endpoints</li>
        <li><b>Performant by Design:</b> Asynchronous-first with strategic caching (&lt;500ms typical response)</li>
        <li><b>Workflow-Oriented:</b> Built for real-world security operations, not just data dumps</li>
        <li><b>Comprehensive:</b> IP, Domain, DNS, WHOIS, Routing, Geolocation, Screenshots, Monitoring</li>
    </ul>

    <h3>‚ö° Performance Targets</h3>
    <table>
        <tr><th>Endpoint Type</th><th>Response Time</th><th>Use Case</th></tr>
        <tr><td>Geolocation</td><td>&lt;150ms</td><td>Real-time fraud detection</td></tr>
        <tr><td>Single Indicator</td><td>&lt;500ms</td><td>Incident response enrichment</td></tr>
        <tr><td>With Routing Data</td><td>&lt;2s (cached: 200ms)</td><td>Deep network analysis</td></tr>
        <tr><td>Bulk Operations</td><td>5-30s</td><td>Batch log enrichment</td></tr>
        <tr><td>Search/Discovery</td><td>10-60s</td><td>Threat hunting</td></tr>
    </table>

    <h3>üîê Authentication</h3>
    <p>All endpoints require Bearer token authentication. Click the <b>"Authorize"</b> button above and enter your API key.</p>
    <pre><code>Authorization: Bearer wsk_live_1234567890abcdef</code></pre>

    <h3>üìä Rate Limits</h3>
    <table>
        <tr><th>Category</th><th>Limit</th></tr>
        <tr><td>Standard Enrichment</td><td>100 req/min</td></tr>
        <tr><td>Bulk Operations</td><td>10 req/min</td></tr>
        <tr><td>Search/Discovery</td><td>5 req/min</td></tr>
        <tr><td>Screenshots</td><td>10 req/min</td></tr>
    </table>
    <p><i>Rate limits return HTTP 429. Retry after the time specified in the <code>Retry-After</code> header.</i></p>

    <h3>üìö Resources</h3>
    <ul>
        <li><a href="https://docs.whisper.security">Full Documentation</a></li>
        <li><a href="https://docs.whisper.security/quickstart">Quick Start Guide</a></li>
        <li><a href="https://docs.whisper.security/examples">Code Examples</a></li>
        <li><a href="https://whisper.security/support">API Support</a></li>
    </ul>
  license:
    name: Proprietary
    url: https://whisper.security/terms
  termsOfService: https://whisper.security/terms-of-service
  title: Whisper API v1
  version: 1.0.0
servers:
- description: Production API Gateway
  url: https://api.whisper.security
security:
- bearerAuth: []
tags:
- description: "The core of the Whisper API. This family provides comprehensive threat\
    \ intelligence and enrichment for foundational internet assets like IP addresses\
    \ and domains. It's designed for rapid investigation, incident response, and proactive\
    \ threat hunting."
  name: Indicators
- description: "High-performance geolocation and ASN intelligence for IP addresses\
    \ and networks. Essential for fraud detection, access control, and threat analysis.\
    \ All endpoints are optimized for sub-200ms response times."
  name: Location
- description: "Operational security tools for active analysis and monitoring. Includes\
    \ screenshots, infrastructure scanning, and asynchronous job tracking. Most endpoints\
    \ are async and return a jobId for status polling."
  name: Operations
paths:
  /v1/ops/screenshot:
    post:
      description: |
        <p>Initiates an asynchronous job to capture a screenshot of a website. Supports various viewport sizes, full-page captures, and JavaScript rendering.</p>
        <p><b>Performance Note:</b> A typical screenshot capture takes 10-30 seconds. Poll the `/v1/ops/jobs/{jobId}` endpoint to retrieve the URL of the final image.</p>
        <p><b>Output:</b> The job result will contain a URL to download the screenshot image in the specified format (PNG, JPEG, or WebP).</p>
      operationId: createScreenshot
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreenshotRequest"
        description: The URL and options for the screenshot capture.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobResponse"
          description: Screenshot job successfully accepted.
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Rate limit exceeded.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid URL or options provided.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Capture a Website Screenshot (Asynchronous)
      tags:
      - Operations
  /v1/ops/screenshot/schedule:
    post:
      description: |
        <p>Create a recurring job to capture website screenshots at regular intervals. Essential for monitoring website changes, detecting defacements, and tracking competitor updates.</p>
        <h4>Schedule Options:</h4>
        <ul>
            <li><b>Cron Expression:</b> Full cron syntax support (e.g., `0 0 * * * *` = hourly)</li>
            <li><b>Frequency Presets:</b> hourly, daily, weekly, monthly</li>
            <li><b>Timezone:</b> Specify timezone for accurate scheduling</li>
            <li><b>Retention:</b> Auto-cleanup old screenshots (default: keep last 30)</li>
        </ul>
        <h4>Performance:</h4>
        <ul>
            <li><b>Setup Time:</b> ~2 seconds to create schedule</li>
            <li><b>Screenshot Time:</b> 10-30 seconds per capture</li>
        </ul>
        <h4>Use Cases:</h4>
        <ul>
            <li>Automated defacement detection</li>
            <li>Compliance monitoring and archival</li>
            <li>Competitor website tracking</li>
            <li>Visual regression testing</li>
        </ul>
      operationId: scheduleScreenshot
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScreenshotRequest"
        description: "Schedule configuration including URL, schedule timing, and screenshot\
          \ options."
        required: true
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid schedule configuration or missing required fields.
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobResponse"
          description: "Schedule successfully created. Poll `/v1/ops/jobs/{jobId}`\
            \ for status."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Schedule Recurring Screenshots (Asynchronous)
      tags:
      - Operations
  /v1/ops/scan:
    post:
      description: |
        <p>Initiates a comprehensive security scan of a domain's infrastructure. Performs reconnaissance, port scanning, service detection, and vulnerability assessment.</p>
        <h4>Scan Types:</h4>
        <ul>
            <li><b>comprehensive:</b> Full scan including all modules (recommended for complete assessment)</li>
            <li><b>subdomains:</b> Subdomain enumeration only</li>
            <li><b>ports:</b> Port scanning and service detection</li>
            <li><b>technologies:</b> Technology stack detection</li>
            <li><b>vulnerabilities:</b> Known vulnerability checks</li>
            <li><b>ssl:</b> SSL/TLS configuration and certificate analysis</li>
            <li><b>dns:</b> DNS configuration and zone transfer tests</li>
            <li><b>whois:</b> Registration and ownership information</li>
        </ul>
        <h4>Performance:</h4>
        <ul>
            <li><b>Quick scans:</b> 30-60 seconds (subdomains, dns, whois)</li>
            <li><b>Comprehensive scan:</b> 5-15 minutes depending on infrastructure size</li>
        </ul>
        <h4>Use Cases:</h4>
        <ul>
            <li>Pre-engagement reconnaissance for penetration testing</li>
            <li>Attack surface assessment</li>
            <li>Infrastructure inventory and mapping</li>
            <li>Vulnerability management</li>
        </ul>
      operationId: createInfrastructureScan
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InfraScanRequest"
        description: Scan configuration including target domain and scan type.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobResponse"
          description: "Scan job successfully accepted. Poll `/v1/ops/jobs/{jobId}`\
            \ for results."
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid domain or scan type.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Infrastructure Security Scan (Asynchronous)
      tags:
      - Operations
  /v1/ops/monitor/{target}/alert:
    post:
      description: |
        <p>Create alert rules for a monitored asset. Get notified via webhook, email, or Slack when specific conditions are met.</p>
        <h4>Alert Types:</h4>
        <ul>
            <li><b>downtime:</b> Site becomes unreachable</li>
            <li><b>dns_change:</b> DNS records modified</li>
            <li><b>whois_change:</b> Registration details updated</li>
            <li><b>ssl_expiring:</b> Certificate expires soon (7, 14, 30 days)</li>
            <li><b>content_change:</b> Page content modified</li>
            <li><b>technology_change:</b> Tech stack changes detected</li>
        </ul>
        <h4>Notification Channels:</h4>
        <ul>
            <li>Webhook (POST to your endpoint)</li>
            <li>Email</li>
            <li>Slack</li>
            <li>PagerDuty</li>
        </ul>
        <h4>Example Configuration:</h4>
        <pre><code>{
          "type": "ssl_expiring",
          "threshold_days": 14,
          "channels": ["email", "slack"],
          "email": "alerts@example.com",
          "slack_webhook": "https://hooks.slack.com/..."
        }</code></pre>
      operationId: createMonitoringAlert
      parameters:
      - description: The domain or IP address to configure alerts for.
        example: example.com
        explode: false
        in: path
        name: target
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JsonNode"
        description: "Alert configuration including type, thresholds, and notification\
          \ channels."
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobResponse"
          description: "Alert configuration job accepted. Poll `/v1/ops/jobs/{jobId}`\
            \ for status."
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid alert configuration.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Configure Monitoring Alerts (Asynchronous)
      tags:
      - Operations
  /v1/ops/map:
    post:
      description: |
        <p>Creates a comprehensive map of infrastructure relationships starting from a domain or IP. Discovers connected assets through shared hosting, DNS, certificates, and network relationships.</p>
        <h4>Mapping Depth Levels:</h4>
        <ul>
            <li><b>Depth 1:</b> Direct relationships only (~30 seconds, 10-50 assets)</li>
            <li><b>Depth 2:</b> 2 hops out (~2-5 minutes, 50-500 assets)</li>
            <li><b>Depth 3:</b> 3 hops out (~10-30 minutes, 500-5000 assets)</li>
        </ul>
        <h4>Relationship Types Discovered:</h4>
        <ul>
            <li>Domains on same IP</li>
            <li>Domains sharing nameservers</li>
            <li>Domains with same SSL certificate</li>
            <li>IPs in same ASN</li>
            <li>Domains with same registrant</li>
        </ul>
        <h4>Output Format:</h4>
        <p>Results returned as graph data compatible with visualization libraries (nodes and edges).</p>
        <h4>Use Cases:</h4>
        <ul>
            <li>Threat actor infrastructure mapping</li>
            <li>Discovering related phishing domains</li>
            <li>Finding shadow IT and forgotten assets</li>
        </ul>
      operationId: createInfrastructureMap
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/JsonNode"
        description: |
          Mapping configuration. Example:
          ```json
          {
            "startPoint": "example.com",
            "depth": 2
          }
          ```
        required: true
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid starting point or depth (must be 1-3).
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobResponse"
          description: "Mapping job successfully accepted. Poll `/v1/ops/jobs/{jobId}`\
            \ for results."
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Map Infrastructure Relationships (Asynchronous)
      tags:
      - Operations
  /v1/location/ips/bulk:
    post:
      description: |
        <p>Retrieve geolocation data for up to 1000 IP addresses in a single request. Optimized for batch processing with parallel lookups.</p>
        <h4>Request Format:</h4>
        <p>Send a JSON array of IP addresses (IPv4 or IPv6):</p>
        <pre><code>["8.8.8.8", "1.1.1.1", "208.67.222.222"]</code></pre>
        <h4>Performance:</h4>
        <ul>
            <li><b>Response Time:</b> 500-2000ms for typical batches (10-100 IPs)</li>
            <li><b>Processing:</b> Parallel lookups with automatic batching</li>
            <li><b>Limit:</b> Maximum 1000 IPs per request</li>
            <li><b>Rate Limit:</b> 10 requests per minute</li>
        </ul>
        <h4>Response Format:</h4>
        <p>Returns an array of geolocation objects matching the order of input IPs. Failed lookups are indicated with error objects.</p>
        <h4>Use Cases:</h4>
        <ul>
            <li>Batch enrichment of access logs</li>
            <li>Bulk fraud scoring</li>
            <li>Geographic distribution analysis</li>
            <li>Network infrastructure mapping</li>
        </ul>
      operationId: getBulkIpLocation
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: JSON array of IP addresses to lookup. Maximum 1000 IPs per request.
        required: true
      responses:
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Rate limit exceeded for bulk operations.
        "200":
          content:
            application/json: {}
          description: Successfully retrieved bulk geolocation data.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: "Invalid request format. Expected JSON array of IP addresses,\
            \ or array exceeds 1000 IP limit."
      security:
      - bearerAuth: []
      summary: Bulk IP Geolocation Lookup
      tags:
      - Location
  /v1/indicators/search:
    post:
      description: |
        <p>Initiates an asynchronous job to search for indicators matching specific criteria. This endpoint is extremely powerful for infrastructure discovery and threat hunting.</p>
        <p><b>Performance Note:</b> Searches on WHOIS fields (like `registrantCompany`) are data-intensive and can take over 50 seconds to complete. This endpoint is therefore asynchronous by design. Poll the `/v1/ops/jobs/{jobId}` endpoint to retrieve results.</p>
        <h4>Example Search Queries:</h4>
        <ul>
            <li>`registrantCompany:EvilCorp` - Find all domains registered by EvilCorp</li>
            <li>`asn:15169` - Find all IPs in Google's ASN</li>
            <li>`city:"San Francisco"` - Find all IPs geolocated to San Francisco</li>
        </ul>
      operationId: searchIndicators
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
        description: The search query and configuration.
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobResponse"
          description: Search job successfully accepted.
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Rate limit exceeded for search operations.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid search query or parameters.
      security:
      - bearerAuth: []
      summary: Search Indicators (Asynchronous)
      tags:
      - Indicators
  /v1/indicators/domain/{domain}/similar:
    get:
      description: |
        <p>Initiates an asynchronous job to generate potential lookalike domains using default options. This GET variant is provided for convenience.</p>
        <p>For custom options (algorithms, limits, etc.), use the POST version of this endpoint.</p>
        <p>The API immediately returns a `jobId`. Poll the `/v1/ops/jobs/{jobId}` endpoint to get the results when complete.</p>
      operationId: generateSimilarDomainsGet
      parameters:
      - description: The domain to generate variations for.
        example: mybrand.com
        explode: false
        in: path
        name: domain
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid domain format in path.
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobResponse"
          description: Job successfully accepted for processing.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Generate Similar Domains - GET (Asynchronous)
      tags:
      - Indicators
    post:
      description: |
        <p>Initiates an asynchronous job to generate potential lookalike domains for typosquatting, homoglyph, and brand protection analysis. This is a powerful tool for proactive threat hunting.</p>
        <p>Because this can be a long-running process, the API immediately returns a `jobId`. Poll the `/v1/ops/jobs/{jobId}` endpoint to get the results when the job is complete.</p>
        <p>Use this POST version to specify custom options like algorithms, limits, or filters.</p>
      operationId: generateSimilarDomainsPost
      parameters:
      - description: The domain to generate variations for.
        example: mybrand.com
        explode: false
        in: path
        name: domain
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SimilarDomainRequest"
        description: Configuration for the similarity generation.
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid domain format in path.
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobResponse"
          description: Job successfully accepted for processing.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Generate Similar Domains - POST (Asynchronous)
      tags:
      - Indicators
  /v1/indicators/bulk:
    post:
      description: |
        <p>Process multiple indicators (IPs and/or domains) in a single request. This endpoint is optimized for batch processing and can handle up to 100 indicators per request.</p>
        <p><b>Performance:</b> Processing time depends on batch size and requested data modules. Expect 5-30 seconds for typical batches.</p>
        <p><b>Rate Limits:</b> Limited to 10 requests per minute due to the resource-intensive nature of bulk operations.</p>
      operationId: bulkEnrichment
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BulkRequest"
        description: List of indicators and processing options.
        required: true
      responses:
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Rate limit exceeded for bulk operations.
        "202":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobResponse"
          description: Bulk job successfully accepted for processing.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid request. Empty indicator list or exceeds 100 indicator
            limit.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Bulk Indicator Enrichment (Asynchronous)
      tags:
      - Indicators
  /v1/ops/screenshot/history:
    get:
      description: |
        <p>Retrieve all previously captured screenshots for a specific URL, ordered by capture time (newest first). Includes download URLs and metadata for each capture.</p>
        <h4>Response Includes:</h4>
        <ul>
            <li><b>Download URL:</b> Direct link to screenshot image</li>
            <li><b>Capture Time:</b> Timestamp when screenshot was taken</li>
            <li><b>Dimensions:</b> Image width and height</li>
            <li><b>Format:</b> Image format (PNG, JPEG, WebP)</li>
            <li><b>File Size:</b> Size in bytes</li>
        </ul>
        <h4>Use Cases:</h4>
        <ul>
            <li>Review website evolution over time</li>
            <li>Compare screenshots for change detection</li>
            <li>Download historical screenshots for reporting</li>
        </ul>
      operationId: getScreenshotHistory
      parameters:
      - description: The URL to retrieve screenshot history for.
        example: https://example.com
        explode: true
        in: query
        name: url
        required: true
        schema:
          type: string
        style: form
      - description: Maximum number of screenshots to return.
        example: 10
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 10
          format: int32
          type: integer
        style: form
      responses:
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: No screenshots found for the specified URL.
        "200":
          content:
            application/json: {}
          description: Successfully retrieved screenshot history.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid URL parameter.
      security:
      - bearerAuth: []
      summary: Get Screenshot History
      tags:
      - Operations
  /v1/ops/monitor/{target}:
    get:
      description: |
        <p>Retrieves current monitoring configuration and historical metrics for a domain or IP address.</p>
        <h4>Status Information:</h4>
        <ul>
            <li><b>Monitoring State:</b> Active, paused, or not monitored</li>
            <li><b>Check Frequency:</b> How often checks are performed</li>
            <li><b>Active Alerts:</b> Currently triggered alert conditions</li>
            <li><b>Last Check:</b> Timestamp of most recent check</li>
        </ul>
        <h4>Metrics Included:</h4>
        <ul>
            <li>Uptime percentage (last 30 days)</li>
            <li>Average response time</li>
            <li>SSL certificate expiration countdown</li>
            <li>DNS change events</li>
            <li>WHOIS change events</li>
        </ul>
      operationId: getMonitoringStatus
      parameters:
      - description: The domain or IP address to check monitoring status for.
        example: example.com
        explode: false
        in: path
        name: target
        required: true
        schema:
          type: string
        style: simple
      responses:
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Target is not being monitored.
        "200":
          content:
            application/json: {}
          description: Successfully retrieved monitoring status.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Get Monitoring Status and Metrics
      tags:
      - Operations
  /v1/ops/jobs/{jobId}:
    get:
      description: |
        <p>Retrieves the current status and results of an asynchronous job. Poll this endpoint to check job progress.</p>
        <h4>Polling Recommendations:</h4>
        <ul>
            <li>For fast jobs (e.g., similar domains), poll every 1-2 seconds.</li>
            <li>For slow jobs (e.g., WHOIS search, screenshots), poll every 5-10 seconds.</li>
            <li>Implement an exponential backoff strategy for very long-running jobs.</li>
            <li>Stop polling when the status is `COMPLETED`, `FAILED`, or `CANCELLED`.</li>
        </ul>
        <h4>Job Statuses:</h4>
        <ul>
            <li><b>PENDING:</b> Job is queued and waiting to start.</li>
            <li><b>PROCESSING:</b> Job is actively being processed.</li>
            <li><b>COMPLETED:</b> Job finished successfully, results are available.</li>
            <li><b>FAILED:</b> Job failed with an error.</li>
            <li><b>CANCELLED:</b> Job was cancelled by user or system.</li>
        </ul>
      operationId: getJob
      parameters:
      - description: "The unique ID of the job, returned from a `POST` operation."
        example: f6250320-9ed4-442b-a389-acfda52d9375
        explode: false
        in: path
        name: jobId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Job ID not found.
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Job"
          description: Job status and results retrieved successfully.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Get Asynchronous Job Status and Results
      tags:
      - Operations
  /v1/ops/changes/{target}:
    get:
      description: |
        <p>Retrieves detected changes in infrastructure configuration for a domain or IP over time. Essential for security monitoring and compliance auditing.</p>
        <h4>Change Types Tracked:</h4>
        <ul>
            <li><b>dns:</b> A, AAAA, MX, NS, TXT record changes</li>
            <li><b>whois:</b> Registrant, registrar, nameserver changes</li>
            <li><b>ssl:</b> Certificate replacements and expirations</li>
            <li><b>ip:</b> IP address changes for domains</li>
            <li><b>content:</b> Homepage content modifications</li>
            <li><b>technology:</b> Tech stack changes</li>
        </ul>
        <h4>Response Format:</h4>
        <p>Timeline of changes with before/after values:</p>
        <pre><code>{
          "changes": [
            {
              "timestamp": "2025-01-15T10:30:00Z",
              "type": "dns",
              "field": "A_RECORD",
              "old_value": "8.8.8.8",
              "new_value": "1.1.1.1"
            }
          ]
        }</code></pre>
        <h4>Use Cases:</h4>
        <ul>
            <li>Security incident investigation</li>
            <li>Compliance and audit trails</li>
            <li>Detecting unauthorized changes</li>
            <li>Infrastructure change management</li>
        </ul>
      operationId: getChangeDetection
      parameters:
      - description: The domain or IP address to check for changes.
        example: example.com
        explode: false
        in: path
        name: target
        required: true
        schema:
          type: string
        style: simple
      - description: Type of changes to retrieve.
        example: dns
        explode: true
        in: query
        name: type
        required: false
        schema:
          enum:
          - all
          - dns
          - whois
          - ssl
          - ip
          - content
          - technology
          type: string
        style: form
      - description: ISO 8601 timestamp to retrieve changes from. Omit to get all
          changes.
        example: 2025-01-01T00:00:00Z
        explode: true
        in: query
        name: since
        required: false
        schema:
          type: string
        style: form
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid change type or date format.
        "200":
          content:
            application/json: {}
          description: Successfully retrieved change history.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: No changes found for the specified target.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Get Infrastructure Change History
      tags:
      - Operations
  /v1/location/stats:
    get:
      description: |
        <p>Returns metadata and statistics about the geolocation database, including coverage, update frequency, and data quality metrics.</p>
        <h4>Statistics Included:</h4>
        <ul>
            <li><b>Coverage:</b> Total IP addresses, networks, and ASNs covered</li>
            <li><b>Geographic:</b> Number of countries, cities, and regions</li>
            <li><b>Freshness:</b> Last update timestamp and update frequency</li>
            <li><b>Data Sources:</b> Providers and data collection methods</li>
            <li><b>Accuracy:</b> Quality metrics and confidence scores</li>
        </ul>
        <h4>Use Cases:</h4>
        <ul>
            <li>Verifying database coverage for your use case</li>
            <li>Monitoring data freshness</li>
            <li>Understanding data quality and accuracy</li>
        </ul>
      operationId: getLocationStats
      responses:
        "200":
          content:
            application/json: {}
          description: Successfully retrieved database statistics.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Get Geolocation Database Statistics
      tags:
      - Location
  /v1/location/search:
    get:
      description: |
        <p>Search the geolocation database by specific fields to find all IP addresses matching your criteria. Powerful for threat hunting, infrastructure discovery, and pattern analysis.</p>
        <h4>Searchable Fields:</h4>
        <ul>
            <li><b>Geographic:</b> city, country, country_code, region, postal_code, continent, continent_code</li>
            <li><b>Network:</b> asn, as_number, organization, isp, isp_name</li>
            <li><b>Coordinates:</b> latitude, longitude</li>
        </ul>
        <h4>Query Examples:</h4>
        <ul>
            <li><b>Find all IPs in a city:</b> field=city&value=London</li>
            <li><b>Find all IPs for an ASN:</b> field=asn&value=15169</li>
            <li><b>Find all IPs for an ISP:</b> field=isp_name&value=Google</li>
            <li><b>Find all IPs in country:</b> field=country_code&value=US</li>
        </ul>
        <h4>Performance:</h4>
        <ul>
            <li><b>Response Time:</b> 200-500ms depending on result size</li>
            <li><b>Rate Limit:</b> 5 searches per minute</li>
        </ul>
        <h4>Use Cases:</h4>
        <ul>
            <li>Infrastructure mapping for threat actors</li>
            <li>Finding all IPs in a specific region for compliance</li>
            <li>Discovering VPN/proxy exit nodes</li>
            <li>Threat hunting by ISP or ASN</li>
        </ul>
      operationId: searchLocation
      parameters:
      - description: "The field to search. Valid fields: city, country, country_code,\
          \ isp_name, isp, asn, as_number, organization, continent, continent_code,\
          \ region, postal_code, latitude, longitude"
        example: city
        explode: true
        in: query
        name: field
        required: true
        schema:
          type: string
        style: form
      - description: The value to search for in the specified field.
        example: San Francisco
        explode: true
        in: query
        name: value
        required: true
        schema:
          type: string
        style: form
      - description: Maximum number of results to return.
        example: 100
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          format: int32
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json: {}
          description: Successfully retrieved search results.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid search field or parameters.
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Rate limit exceeded for search operations.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Search Geolocation Database by Field
      tags:
      - Location
  /v1/location/network/{network}:
    get:
      description: |
        <p>Returns geolocation and network information for an entire network range specified in CIDR notation. Useful for analyzing network blocks, ranges, and subnets.</p>
        <h4>Supported Formats:</h4>
        <ul>
            <li><b>IPv4 CIDR:</b> 192.168.1.0/24</li>
            <li><b>IPv6 CIDR:</b> 2001:db8::/32</li>
        </ul>
        <h4>Data Included:</h4>
        <ul>
            <li><b>Network Details:</b> CIDR range, first/last IP, total addresses</li>
            <li><b>Geographic:</b> Country, city, region for the network block</li>
            <li><b>Network:</b> ASN, organization, ISP information</li>
            <li><b>Classification:</b> Network type and usage category</li>
        </ul>
        <h4>Use Cases:</h4>
        <ul>
            <li>Analyzing suspicious network ranges</li>
            <li>Bulk geolocation for network blocks</li>
            <li>Infrastructure mapping and reconnaissance</li>
        </ul>
      operationId: getNetworkLocation
      parameters:
      - description: "The network range in CIDR notation (e.g., 192.168.1.0/24 or\
          \ 2001:db8::/32)."
        example: 8.8.8.0/24
        explode: false
        in: path
        name: network
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid CIDR format or network specification.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Network not found in geolocation database.
        "200":
          content:
            application/json: {}
          description: Successfully retrieved network geolocation data.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Get Network/CIDR Geolocation Data
      tags:
      - Location
  /v1/location/ip/{ip}:
    get:
      description: |
        <p>Returns comprehensive geolocation and network information for any IPv4 or IPv6 address. This is one of the fastest endpoints in the API, optimized for real-time fraud detection and access control.</p>
        <h4>Data Included:</h4>
        <ul>
            <li><b>Geographic:</b> Country, city, region, postal code, coordinates, timezone</li>
            <li><b>Network:</b> ASN, ISP/organization name, network range</li>
            <li><b>Classification:</b> Connection type (residential, datacenter, VPN, proxy, hosting)</li>
            <li><b>Reputation:</b> Risk indicators and abuse scores</li>
        </ul>
        <h4>Performance:</h4>
        <ul>
            <li><b>Response Time:</b> Typically &lt;150ms</li>
            <li><b>Cache:</b> Results cached for 6 hours by default</li>
        </ul>
        <h4>Use Cases:</h4>
        <ul>
            <li>Real-time fraud detection in payment flows</li>
            <li>Geographic access control and compliance</li>
            <li>Bot and VPN detection</li>
            <li>Threat intelligence enrichment</li>
        </ul>
      operationId: getIpLocation
      parameters:
      - description: The IPv4 or IPv6 address to lookup.
        example: 8.8.8.8
        explode: false
        in: path
        name: ip
        required: true
        schema:
          type: string
        style: simple
      responses:
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: IP address not found in geolocation database.
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Rate limit exceeded.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid IP address format.
        "200":
          content:
            application/json: {}
          description: Successfully retrieved geolocation data.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Get IP Geolocation and ASN Data
      tags:
      - Location
  /v1/indicators/{type}/{value}:
    get:
      description: |
        <p>Retrieves comprehensive intelligence for a single IP address or domain. This is the primary, high-performance endpoint for synchronous enrichment.</p>
        <p>It aggregates data from multiple sources, including geolocation, WHOIS, DNS, reputation scoring, and relationship mapping. Use the `include` parameter to request additional, deeper data sets that may have higher latency.</p>
        <h4>Performance:</h4>
        <ul>
            <li><b>Base Response:</b> Typically under 500ms.</li>
            <li><b>With `include=routing`:</b> First request may take up to 5 seconds; subsequent requests are cached for 5 minutes and respond in &lt;200ms.</li>
            <li><b>With `include=ip_intelligence`:</b> Adds 200-500ms of latency for each IP address resolved from the domain.</li>
        </ul>
      operationId: getIndicator
      parameters:
      - description: The type of indicator to enrich.
        example: ip
        explode: false
        in: path
        name: type
        required: true
        schema:
          enum:
          - ip
          - domain
          type: string
        style: simple
      - description: "The value of the indicator (e.g., an IPv4/IPv6 address or a\
          \ domain name)."
        example: 8.8.8.8
        explode: false
        in: path
        name: value
        required: true
        schema:
          type: string
        style: simple
      - description: A comma-separated list of additional data modules to include
          in the response. Requesting more modules may increase latency.
        example: "routing,whois"
        explode: true
        in: query
        name: include
        required: false
        schema:
          description: "Comma-separated values from: routing, rpki, whois, dns_details,\
            \ ip_intelligence"
          enum:
          - routing
          - rpki
          - whois
          - dns_details
          - ip_intelligence
          type: string
        style: form
      responses:
        "429":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Rate limit exceeded.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid indicator format or unsupported type.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: The requested indicator was not found in our datasets.
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndicatorResponse"
          description: Successfully retrieved intelligence data.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Enrich a Single Indicator (IP or Domain)
      tags:
      - Indicators
  /v1/indicators/{type}/{value}/history:
    get:
      description: |
        <p>Retrieves time-series historical data for an IP address or domain. Track how infrastructure changes over time for threat intelligence and forensic analysis.</p>
        <h4>History Types:</h4>
        <ul>
            <li><b>whois:</b> Registration history - registrant changes, expiration updates, transfers</li>
            <li><b>routing:</b> BGP routing history - prefix announcements, ASN changes, route hijacks</li>
            <li><b>dns:</b> DNS resolution history - IP address changes, nameserver updates</li>
            <li><b>ssl:</b> Certificate history - cert replacements, CA changes, expiration events</li>
            <li><b>reputation:</b> Risk score history - blacklist appearances, reputation changes</li>
        </ul>
        <h4>Data Format:</h4>
        <p>Timeline with dated snapshots showing what changed and when:</p>
        <pre><code>{
          "history": [
            {
              "timestamp": "2025-01-15T10:00:00Z",
              "field": "registrant_company",
              "old_value": "Evil Corp",
              "new_value": "Legitimate LLC"
            }
          ]
        }</code></pre>
        <h4>Use Cases:</h4>
        <ul>
            <li>Tracking domain ownership changes</li>
            <li>Investigating IP reputation degradation</li>
            <li>Forensic timeline reconstruction</li>
            <li>Detecting infrastructure pivots by threat actors</li>
        </ul>
      operationId: getIndicatorHistory
      parameters:
      - description: Type of indicator
        example: domain
        explode: false
        in: path
        name: type
        required: true
        schema:
          enum:
          - ip
          - domain
          type: string
        style: simple
      - description: The indicator value (IP address or domain)
        example: example.com
        explode: false
        in: path
        name: value
        required: true
        schema:
          type: string
        style: simple
      - description: Type of historical data to retrieve
        example: whois
        explode: true
        in: query
        name: historyType
        required: false
        schema:
          enum:
          - whois
          - routing
          - dns
          - ssl
          - reputation
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HistoryResponse"
          description: Successfully retrieved historical data.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid indicator type or history type.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: No historical data found for this indicator.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Get Historical Data for Indicator
      tags:
      - Indicators
  /v1/indicators/{type}/{value}/graph:
    get:
      description: |
        <p>Returns graph visualization data showing relationships between the indicator and related infrastructure. Perfect for interactive network diagrams and threat actor infrastructure mapping.</p>
        <h4>Relationship Types Included:</h4>
        <ul>
            <li><b>For Domains:</b>
                <ul>
                    <li>Resolves to IPs</li>
                    <li>Shares nameservers with</li>
                    <li>Same SSL certificate as</li>
                    <li>Same registrant as</li>
                    <li>Links to/from other domains</li>
                </ul>
            </li>
            <li><b>For IPs:</b>
                <ul>
                    <li>Hosts domains</li>
                    <li>Same ASN as</li>
                    <li>Same network block as</li>
                    <li>Connected via routing</li>
                </ul>
            </li>
        </ul>
        <h4>Output Format:</h4>
        <p>Compatible with react-force-graph, vis.js, cytoscape.js:</p>
        <pre><code>{
          "nodes": [
            {"id": "example.com", "type": "domain", "label": "example.com"},
            {"id": "8.8.8.8", "type": "ip", "label": "8.8.8.8"}
          ],
          "links": [
            {"source": "example.com", "target": "8.8.8.8", "type": "resolves_to"}
          ]
        }</code></pre>
        <h4>Performance:</h4>
        <ul>
            <li>Response Time: 500ms-2s depending on graph complexity</li>
            <li>Default: 100 nodes maximum (adjustable)</li>
        </ul>
        <h4>Use Cases:</h4>
        <ul>
            <li>Interactive threat actor infrastructure visualization</li>
            <li>Discovering related phishing campaigns</li>
            <li>Mapping shadow IT and sprawl</li>
            <li>Network topology visualization</li>
        </ul>
      operationId: getIndicatorGraph
      parameters:
      - description: Type of indicator
        example: domain
        explode: false
        in: path
        name: type
        required: true
        schema:
          enum:
          - ip
          - domain
          type: string
        style: simple
      - description: The indicator value (IP address or domain)
        example: example.com
        explode: false
        in: path
        name: value
        required: true
        schema:
          type: string
        style: simple
      - description: Maximum number of nodes to return in the graph
        example: 100
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          format: int32
          type: integer
        style: form
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid indicator type or limit parameter.
        "200":
          content:
            application/json: {}
          description: Successfully retrieved graph data.
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Indicator not found or no relationships discovered.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Get Infrastructure Relationship Graph
      tags:
      - Indicators
  /v1/indicators/domain/{domain}/subdomains:
    get:
      description: "Retrieves a list of discovered subdomains for a given root domain,\
        \ based on passive DNS and other enumeration techniques."
      operationId: getSubdomains
      parameters:
      - description: The root domain to query for subdomains.
        example: google.com
        explode: false
        in: path
        name: domain
        required: true
        schema:
          type: string
        style: simple
      - description: The maximum number of subdomains to return.
        example: 100
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 100
          format: int32
          type: integer
        style: form
      responses:
        "404":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Domain not found or no subdomains discovered.
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubdomainResponse"
          description: Successfully retrieved subdomains.
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Invalid domain format.
        "401":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
          description: Authentication failed. Missing or invalid API key.
      security:
      - bearerAuth: []
      summary: Get Domain Subdomains
      tags:
      - Indicators
components:
  schemas:
    ScheduleConfig:
      description: Configuration for scheduling recurring screenshot captures
      example:
        cron: 0 0 * * * *
        retention_count: 30
        timezone: UTC
        enabled: true
        frequency: hourly
      properties:
        cron:
          description: Cron expression for scheduling
          example: 0 0 * * * *
          pattern: Cron expression
          type: string
        frequency:
          description: Frequency of captures
          enum:
          - hourly
          - daily
          - weekly
          - monthly
          example: hourly
          type: string
        timezone:
          default: UTC
          description: Timezone for scheduled captures
          example: UTC
          type: string
        retention_count:
          default: 30
          description: Maximum number of captures to retain
          example: 30
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        enabled:
          default: true
          description: Enable/disable the schedule
          example: true
          type: boolean
      type: object
    ScreenshotOptions:
      description: Configuration options for screenshot capture
      example:
        wait_time: 2000
        full_page: false
        width: 1920
        format: png
        block_ads: true
        user_agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36
        javascript: true
        height: 1080
        quality: 90
        accept_cookies: true
      properties:
        width:
          default: 1920
          description: Viewport width in pixels
          example: 1920
          format: int32
          maximum: 7680
          minimum: 320
          type: integer
        height:
          default: 1080
          description: Viewport height in pixels
          example: 1080
          format: int32
          maximum: 4320
          minimum: 240
          type: integer
        full_page:
          default: false
          description: Capture the full page height (scrolling screenshot)
          example: false
          type: boolean
        wait_time:
          default: 2000
          description: Wait time in milliseconds before taking screenshot
          example: 2000
          format: int32
          maximum: 30000
          minimum: 0
          type: integer
        format:
          default: png
          description: Image format for the screenshot
          enum:
          - png
          - jpeg
          - webp
          example: png
          pattern: ^(png|jpeg|webp)$
          type: string
        quality:
          default: 90
          description: "Image quality (1-100, only for jpeg/webp)"
          example: 90
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        user_agent:
          description: User agent string to use for the request
          example: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36
          type: string
        javascript:
          default: true
          description: Enable JavaScript execution
          example: true
          type: boolean
        block_ads:
          default: false
          description: Block ads and trackers
          example: true
          type: boolean
        accept_cookies:
          default: true
          description: Accept cookies consent if prompted
          example: true
          type: boolean
      type: object
    ScreenshotRequest:
      description: Request parameters for capturing a website screenshot
      example:
        schedule:
          cron: 0 0 * * * *
          retention_count: 30
          timezone: UTC
          enabled: true
          frequency: hourly
        options:
          wait_time: 2000
          full_page: false
          width: 1920
          format: png
          block_ads: true
          user_agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36
          javascript: true
          height: 1080
          quality: 90
          accept_cookies: true
        url: https://example.com
      properties:
        url:
          description: The URL of the website to capture
          example: https://example.com
          pattern: ^https?://.*
          type: string
        options:
          $ref: "#/components/schemas/ScreenshotOptions"
        schedule:
          $ref: "#/components/schemas/ScheduleConfig"
      required:
      - url
      type: object
    JobResponse:
      example:
        job_id: job_id
        message: message
        status: status
        status_url: status_url
      properties:
        job_id:
          type: string
        status:
          type: string
        status_url:
          type: string
        message:
          type: string
      type: object
    ErrorResponse:
      description: Standard error response returned when an API request fails
      example:
        path: /v1/indicators/ip/invalid-ip
        trace_id: 550e8400-e29b-41d4-a716-446655440000
        details:
          field: ip
          issue: Invalid format
        error: INVALID_INDICATOR
        message: The provided IP address is not a valid IPv4 or IPv6 address
        status: 400
        timestamp: 2024-12-20T10:15:30.123Z
      properties:
        status:
          description: The HTTP status code of the error
          example: 400
          format: int32
          type: integer
        error:
          description: "A short, machine-readable error code"
          example: INVALID_INDICATOR
          type: string
        message:
          description: A human-readable error message providing more detail
          example: The provided IP address is not a valid IPv4 or IPv6 address
          type: string
        details:
          description: "Additional details about the error, including field-specific\
            \ validation errors"
          example:
            field: ip
            issue: Invalid format
          type: object
        timestamp:
          description: The timestamp when the error occurred
          example: 2024-12-20T10:15:30.123Z
          format: date-time
          type: string
        trace_id:
          description: "A unique trace ID for this request, useful for debugging"
          example: 550e8400-e29b-41d4-a716-446655440000
          type: string
        path:
          description: The API path that generated this error
          example: /v1/indicators/ip/invalid-ip
          type: string
      required:
      - error
      - message
      - status
      - timestamp
      type: object
    DnsEnumConfig:
      description: Configuration for DNS enumeration and subdomain discovery
      example:
        wordlist_size: medium
        subdomain_enum: true
        zone_transfer: false
        reverse_dns: true
      properties:
        subdomain_enum:
          default: true
          description: Enable subdomain enumeration
          example: true
          type: boolean
        zone_transfer:
          default: false
          description: Enable DNS zone transfer attempts
          example: false
          type: boolean
        reverse_dns:
          default: true
          description: Enable reverse DNS lookups
          example: true
          type: boolean
        wordlist_size:
          default: medium
          description: Wordlist size for subdomain brute-forcing
          enum:
          - small
          - medium
          - large
          example: medium
          pattern: ^(small|medium|large)$
          type: string
      type: object
    InfraScanRequest:
      description: Configuration for performing infrastructure discovery and security
        scanning
      example:
        scan_depth: medium
        target_type: cidr
        options:
          port_scan:
            port_timeout: 1000
            technique: syn
            threads: 10
            ports: "80,443,8080-8090"
          service_discovery:
            intensity: 5
            os_detection: true
            script_scan: true
            version_detection: true
          vulnerability:
            default_credentials: true
            min_cvss_score: 4.0
            include_poc: false
            misconfigurations: true
            check_cves: true
          dns_enum:
            wordlist_size: medium
            subdomain_enum: true
            zone_transfer: false
            reverse_dns: true
        scan_types:
        - port_scan
        - service_discovery
        - vulnerability_assessment
        timeout: 300
        target: 192.168.1.0/24
      properties:
        target:
          description: "The target to scan (IP, CIDR, domain, or ASN)"
          example: 192.168.1.0/24
          type: string
        target_type:
          description: Type of target being scanned
          enum:
          - ip
          - cidr
          - domain
          - asn
          example: cidr
          pattern: ^(ip|cidr|domain|asn)$
          type: string
        scan_types:
          description: Types of scans to perform
          example:
          - port_scan
          - service_discovery
          - vulnerability_assessment
          items:
            description: Types of scans to perform
            example: "[\"port_scan\",\"service_discovery\",\"vulnerability_assessment\"\
              ]"
            type: string
          type: array
          uniqueItems: true
        scan_depth:
          default: medium
          description: Scan depth level
          enum:
          - light
          - medium
          - deep
          example: medium
          pattern: ^(light|medium|deep)$
          type: string
        timeout:
          default: 300
          description: Maximum scan duration in seconds
          example: 300
          format: int32
          maximum: 3600
          minimum: 60
          type: integer
        options:
          $ref: "#/components/schemas/ScanOptions"
      required:
      - target
      - target_type
      type: object
    PortScanConfig:
      description: Configuration for port scanning
      example:
        port_timeout: 1000
        technique: syn
        threads: 10
        ports: "80,443,8080-8090"
      properties:
        ports:
          default: top-1000
          description: Ports to scan (comma-separated or range)
          example: "80,443,8080-8090"
          type: string
        technique:
          default: syn
          description: Scan technique
          enum:
          - syn
          - connect
          - udp
          - comprehensive
          example: syn
          pattern: ^(syn|connect|udp|comprehensive)$
          type: string
        threads:
          default: 10
          description: Number of parallel threads
          example: 10
          format: int32
          maximum: 100
          minimum: 1
          type: integer
        port_timeout:
          default: 1000
          description: Timeout per port in milliseconds
          example: 1000
          format: int32
          maximum: 10000
          minimum: 100
          type: integer
      type: object
    ScanOptions:
      description: Advanced configuration options for infrastructure scanning
      example:
        port_scan:
          port_timeout: 1000
          technique: syn
          threads: 10
          ports: "80,443,8080-8090"
        service_discovery:
          intensity: 5
          os_detection: true
          script_scan: true
          version_detection: true
        vulnerability:
          default_credentials: true
          min_cvss_score: 4.0
          include_poc: false
          misconfigurations: true
          check_cves: true
        dns_enum:
          wordlist_size: medium
          subdomain_enum: true
          zone_transfer: false
          reverse_dns: true
      properties:
        port_scan:
          $ref: "#/components/schemas/PortScanConfig"
        service_discovery:
          $ref: "#/components/schemas/ServiceDiscoveryConfig"
        vulnerability:
          $ref: "#/components/schemas/VulnerabilityConfig"
        dns_enum:
          $ref: "#/components/schemas/DnsEnumConfig"
      type: object
    ServiceDiscoveryConfig:
      description: Configuration for service and version detection
      example:
        intensity: 5
        os_detection: true
        script_scan: true
        version_detection: true
      properties:
        version_detection:
          default: true
          description: Enable service version detection
          example: true
          type: boolean
        os_detection:
          default: false
          description: Enable OS fingerprinting
          example: true
          type: boolean
        intensity:
          default: 5
          description: Aggressiveness of service detection (1-9)
          example: 5
          format: int32
          maximum: 9
          minimum: 1
          type: integer
        script_scan:
          default: false
          description: Enable script scanning
          example: true
          type: boolean
      type: object
    VulnerabilityConfig:
      description: Configuration for vulnerability scanning
      example:
        default_credentials: true
        min_cvss_score: 4.0
        include_poc: false
        misconfigurations: true
        check_cves: true
      properties:
        check_cves:
          default: true
          description: Check for CVEs
          example: true
          type: boolean
        min_cvss_score:
          default: 0.0
          description: Minimum CVSS score to report
          example: 4.0
          format: double
          maximum: 10
          minimum: 0
          type: number
        default_credentials:
          default: true
          description: Check for default credentials
          example: true
          type: boolean
        misconfigurations:
          default: true
          description: Check for misconfigurations
          example: true
          type: boolean
        include_poc:
          default: false
          description: Include proof-of-concept exploits
          example: false
          type: boolean
      type: object
    JsonNode:
      type: object
    SearchRequest:
      description: Search query for finding indicators matching specific criteria.
        Powerful for threat hunting and infrastructure discovery.
      example:
        offset: 0
        query: registrantCompany:Google AND country_code:US
        limit: 100
        filters:
          risk_score_min: "5.0"
          status: active
        sort_by: registration_date
        sort_order: desc
      properties:
        query:
          description: |
            Search query using field:value syntax. Supports multiple fields combined with logical operators.

            **Supported Fields:**
            - WHOIS: `registrantCompany`, `registrantName`, `registrantEmail`, `registrar`
            - Network: `asn`, `network`, `country_code`, `city`
            - Domain: `tld`, `domain_length`, `creation_date`

            **Examples:**
            - `registrantCompany:EvilCorp` - Find domains by registrant
            - `asn:15169 AND country_code:US` - Complex query with AND
            - `registrantEmail:admin@example.com` - Find domains by email
          example: registrantCompany:Google AND country_code:US
          type: string
        filters:
          additionalProperties:
            description: Additional filters to narrow down search results. Applied
              after query matching.
            example: "{\"risk_score_min\":\"5.0\",\"status\":\"active\"}"
            type: string
          description: Additional filters to narrow down search results. Applied after
            query matching.
          example:
            risk_score_min: "5.0"
            status: active
          type: object
        limit:
          default: 100
          description: Maximum number of results to return per page
          example: 100
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        offset:
          default: 0
          description: Number of results to skip for pagination. Use with limit for
            paginated results.
          example: 0
          format: int32
          minimum: 0
          type: integer
        sort_by:
          description: Field to sort results by
          enum:
          - registration_date
          - expiration_date
          - risk_score
          - domain_name
          - asn
          example: registration_date
          type: string
        sort_order:
          default: asc
          description: Sort order
          enum:
          - asc
          - desc
          example: desc
          type: string
      required:
      - query
      type: object
    BitsquattingConfig:
      description: Configuration for bitsquatting (bit-flip) variations
      example:
        max_bit_flips: 1
      properties:
        max_bit_flips:
          default: 1
          description: Maximum bit flips per character
          example: 1
          format: int32
          maximum: 2
          minimum: 1
          type: integer
      type: object
    HomoglyphConfig:
      description: Configuration for homoglyph (look-alike character) variations
      example:
        greek: true
        max_substitutions: 2
        latin: true
        cyrillic: true
      properties:
        cyrillic:
          default: true
          description: Include Cyrillic character substitutions
          example: true
          type: boolean
        greek:
          default: true
          description: Include Greek character substitutions
          example: true
          type: boolean
        latin:
          default: true
          description: Include Latin character substitutions
          example: true
          type: boolean
        max_substitutions:
          default: 2
          description: Maximum number of character substitutions per domain
          example: 2
          format: int32
          maximum: 5
          minimum: 1
          type: integer
      type: object
    SimilarDomainRequest:
      description: Configuration for generating similar domain variations for brand
        protection and threat hunting
      example:
        technique_config:
          typosquatting:
            character_swap: true
            double_character: true
            character_omission: true
            keyboard_proximity: true
          tld_variation:
            custom_tlds:
            - io
            - ai
            - tech
            common_tlds: true
            new_gtlds: true
            country_tlds: true
          bitsquatting:
            max_bit_flips: 1
          homoglyph:
            greek: true
            max_substitutions: 2
            latin: true
            cyrillic: true
        techniques:
        - typosquatting
        - homoglyph
        - bitsquatting
        limit: 100
        check_registration: true
        include_dns: true
        include_risk_score: true
      properties:
        techniques:
          description: Types of domain variations to generate
          example:
          - typosquatting
          - homoglyph
          - bitsquatting
          items:
            description: Types of domain variations to generate
            example: "[\"typosquatting\",\"homoglyph\",\"bitsquatting\"]"
            type: string
          type: array
          uniqueItems: true
        limit:
          default: 100
          description: Maximum number of similar domains to generate
          example: 100
          format: int32
          maximum: 1000
          minimum: 1
          type: integer
        check_registration:
          default: false
          description: Check if generated domains are registered
          example: true
          type: boolean
        include_dns:
          default: false
          description: Include DNS resolution data for registered domains
          example: true
          type: boolean
        include_risk_score:
          default: true
          description: Calculate risk scores for each variation
          example: true
          type: boolean
        technique_config:
          $ref: "#/components/schemas/TechniqueConfig"
      type: object
    TechniqueConfig:
      description: Detailed configuration for each domain variation technique
      example:
        typosquatting:
          character_swap: true
          double_character: true
          character_omission: true
          keyboard_proximity: true
        tld_variation:
          custom_tlds:
          - io
          - ai
          - tech
          common_tlds: true
          new_gtlds: true
          country_tlds: true
        bitsquatting:
          max_bit_flips: 1
        homoglyph:
          greek: true
          max_substitutions: 2
          latin: true
          cyrillic: true
      properties:
        typosquatting:
          $ref: "#/components/schemas/TyposquattingConfig"
        homoglyph:
          $ref: "#/components/schemas/HomoglyphConfig"
        bitsquatting:
          $ref: "#/components/schemas/BitsquattingConfig"
        tld_variation:
          $ref: "#/components/schemas/TldVariationConfig"
      type: object
    TldVariationConfig:
      description: Configuration for top-level domain variations
      example:
        custom_tlds:
        - io
        - ai
        - tech
        common_tlds: true
        new_gtlds: true
        country_tlds: true
      properties:
        common_tlds:
          default: true
          description: "Include common TLD variations (.com, .net, .org, etc.)"
          example: true
          type: boolean
        country_tlds:
          default: false
          description: Include country-code TLDs
          example: true
          type: boolean
        new_gtlds:
          default: true
          description: "Include new generic TLDs (.app, .dev, .cloud, etc.)"
          example: true
          type: boolean
        custom_tlds:
          description: Custom TLDs to check
          example:
          - io
          - ai
          - tech
          items:
            description: Custom TLDs to check
            example: "[\"io\",\"ai\",\"tech\"]"
            type: string
          type: array
          uniqueItems: true
      type: object
    TyposquattingConfig:
      description: Configuration for typosquatting variations
      example:
        character_swap: true
        double_character: true
        character_omission: true
        keyboard_proximity: true
      properties:
        character_omission:
          default: true
          description: Include character omission variations
          example: true
          type: boolean
        character_swap:
          default: true
          description: Include character swap variations
          example: true
          type: boolean
        double_character:
          default: true
          description: Include double character variations
          example: true
          type: boolean
        keyboard_proximity:
          default: true
          description: Include keyboard proximity variations
          example: true
          type: boolean
      type: object
    BulkOptions:
      description: Advanced configuration options for bulk processing behavior
      example:
        parallel_processing: true
        batch_size: 10
        timeout_per_indicator: 5000
        include_failed: false
        continue_on_error: true
      properties:
        parallel_processing:
          default: true
          description: Enable parallel processing of indicators for faster results
          example: true
          type: boolean
        batch_size:
          default: 10
          description: Number of indicators to process in each batch. Smaller batches
            = more frequent progress updates
          example: 10
          format: int32
          maximum: 50
          minimum: 1
          type: integer
        timeout_per_indicator:
          default: 5000
          description: Maximum time in milliseconds to wait for each indicator before
            timing out
          example: 5000
          format: int32
          maximum: 30000
          minimum: 1000
          type: integer
        continue_on_error:
          default: true
          description: Continue processing remaining indicators if one fails. Recommended
            for large batches.
          example: true
          type: boolean
        include_failed:
          default: false
          description: Include failed indicators in the response with error details
          example: false
          type: boolean
      type: object
    BulkRequest:
      description: Request payload for bulk enrichment of multiple IP addresses and
        domains
      example:
        include:
        - routing
        - whois
        - dns_details
        options:
          parallel_processing: true
          batch_size: 10
          timeout_per_indicator: 5000
          include_failed: false
          continue_on_error: true
        indicators:
        - 8.8.8.8
        - google.com
        - 1.1.1.1
        - cloudflare.com
      properties:
        indicators:
          description: List of indicators (IP addresses or domains) to enrich. Mix
            of IPs and domains is supported.
          example:
          - 8.8.8.8
          - google.com
          - 1.1.1.1
          - cloudflare.com
          items:
            description: List of indicators (IP addresses or domains) to enrich. Mix
              of IPs and domains is supported.
            example: "[\"8.8.8.8\",\"google.com\",\"1.1.1.1\",\"cloudflare.com\"]"
            maxLength: 100
            minLength: 1
            type: string
          maxLength: 100
          minLength: 1
          type: array
        include:
          description: Additional data modules to include for each indicator. Same
            options as single indicator endpoint.
          example:
          - routing
          - whois
          - dns_details
          items:
            description: Include option
            enum:
            - routing
            - rpki
            - whois
            - dns_details
            - ip_intelligence
            type: string
          type: array
          uniqueItems: true
        options:
          $ref: "#/components/schemas/BulkOptions"
      required:
      - indicators
      type: object
    Job:
      example:
        result: "{}"
        createdAt: 2000-01-23T04:56:07.000+00:00
        completedAt: 2000-01-23T04:56:07.000+00:00
        metadata:
          key: metadata
        progress:
          current: 0
          total: 6
          percentage: 1.4658129805029452
          message: message
        id: id
        type: type
        params: "{}"
        error:
          code: code
          details: details
          message: message
          timestamp: 2000-01-23T04:56:07.000+00:00
        status: PENDING
        updatedAt: 2000-01-23T04:56:07.000+00:00
        username: username
      properties:
        id:
          type: string
        status:
          enum:
          - PENDING
          - PROCESSING
          - COMPLETED
          - FAILED
          type: string
        type:
          type: string
        params:
          type: object
        result:
          type: object
        error:
          $ref: "#/components/schemas/JobError"
        progress:
          $ref: "#/components/schemas/JobProgress"
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        completedAt:
          format: date-time
          type: string
        metadata:
          additionalProperties:
            type: string
          type: object
        username:
          type: string
      type: object
    JobError:
      example:
        code: code
        details: details
        message: message
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: string
        timestamp:
          format: date-time
          type: string
      type: object
    JobProgress:
      example:
        current: 0
        total: 6
        percentage: 1.4658129805029452
        message: message
      properties:
        current:
          format: int32
          type: integer
        total:
          format: int32
          type: integer
        message:
          type: string
        percentage:
          format: double
          type: number
      type: object
    BlacklistScores:
      description: Blacklist scores at different network levels
      example:
        prefix_score: 1.2
        asn_score: 0.8
        ip_score: 0.5
      properties:
        ip_score:
          description: IP-level blacklist score
          example: 0.5
          format: double
          maximum: 10
          minimum: 0
          type: number
        prefix_score:
          description: Network prefix blacklist score
          example: 1.2
          format: double
          maximum: 10
          minimum: 0
          type: number
        asn_score:
          description: ASN-level blacklist score
          example: 0.8
          format: double
          maximum: 10
          minimum: 0
          type: number
      type: object
    DnsInfo:
      description: DNS records and resolution data for the domain
      example:
        a_records:
        - 8.8.8.8
        - 8.8.4.4
        mx_records:
        - null
        - null
        aaaa_records:
        - 2001:4860:4860::8888
        txt_records:
        - txt_records
        - txt_records
        cname_records:
        - cname_records
        - cname_records
        arecords:
        - arecords
        - arecords
        ns_records:
        - ns1.google.com
        - ns2.google.com
      properties:
        arecords:
          items:
            type: string
          type: array
        a_records:
          description: A records (IPv4 addresses)
          example:
          - 8.8.8.8
          - 8.8.4.4
          items:
            description: A records (IPv4 addresses)
            example: "[\"8.8.8.8\",\"8.8.4.4\"]"
            type: string
          type: array
        aaaa_records:
          description: AAAA records (IPv6 addresses)
          example:
          - 2001:4860:4860::8888
          items:
            description: AAAA records (IPv6 addresses)
            example: "[\"2001:4860:4860::8888\"]"
            type: string
          type: array
        mx_records:
          description: MX records (mail servers) with priority and hostname
          items:
            $ref: "#/components/schemas/JsonNode"
          type: array
        ns_records:
          description: NS records (name servers)
          example:
          - ns1.google.com
          - ns2.google.com
          items:
            description: NS records (name servers)
            example: "[\"ns1.google.com\",\"ns2.google.com\"]"
            type: string
          type: array
        txt_records:
          description: "TXT records (text records for SPF, DKIM, etc.)"
          items:
            description: "TXT records (text records for SPF, DKIM, etc.)"
            type: string
          type: array
        cname_records:
          description: CNAME records (canonical name aliases)
          items:
            description: CNAME records (canonical name aliases)
            type: string
          type: array
      type: object
    DomainReputationDetails:
      description: Detailed infrastructure and individual IP scores
      example:
        domain_ip_scores:
          key: 6.027456183070403
        domain_ips:
        - 8.8.8.8
        nameserver_ips:
        - 1.1.1.1
        - 1.0.0.1
        nameserver_domains:
        - ns1.example.com
        - ns2.example.com
        nameserver_ip_scores:
          key: 1.4658129805029452
        mailserver_domains:
        - mail.example.com
        mailserver_ips:
        - 74.125.28.27
        mailserver_ip_scores:
          key: 5.962133916683182
      properties:
        domain_ips:
          description: Domain's A record IP addresses
          example:
          - 8.8.8.8
          items:
            description: Domain's A record IP addresses
            example: "[\"8.8.8.8\"]"
            type: string
          type: array
        domain_ip_scores:
          additionalProperties:
            description: Individual scores for each domain IP
            format: double
            type: number
          description: Individual scores for each domain IP
          type: object
        nameserver_domains:
          description: Nameserver domain names
          example:
          - ns1.example.com
          - ns2.example.com
          items:
            description: Nameserver domain names
            example: "[\"ns1.example.com\",\"ns2.example.com\"]"
            type: string
          type: array
        nameserver_ips:
          description: IP addresses of nameservers
          example:
          - 1.1.1.1
          - 1.0.0.1
          items:
            description: IP addresses of nameservers
            example: "[\"1.1.1.1\",\"1.0.0.1\"]"
            type: string
          type: array
        nameserver_ip_scores:
          additionalProperties:
            description: Individual scores for each nameserver IP
            format: double
            type: number
          description: Individual scores for each nameserver IP
          type: object
        mailserver_domains:
          description: Mail server domain names
          example:
          - mail.example.com
          items:
            description: Mail server domain names
            example: "[\"mail.example.com\"]"
            type: string
          type: array
        mailserver_ips:
          description: IP addresses of mail servers
          example:
          - 74.125.28.27
          items:
            description: IP addresses of mail servers
            example: "[\"74.125.28.27\"]"
            type: string
          type: array
        mailserver_ip_scores:
          additionalProperties:
            description: Individual scores for each mail server IP
            format: double
            type: number
          description: Individual scores for each mail server IP
          type: object
      type: object
    DomainReputationScores:
      description: Domain reputation calculated from infrastructure IP scores
      example:
        scoring_method: composite_infrastructure
        risk_level: medium_risk
        mailserver_ip_score: 32.1
        nameserver_ip_score: 45.2
        domain_ip_score: 85.5
        details:
          domain_ip_scores:
            key: 6.027456183070403
          domain_ips:
          - 8.8.8.8
          nameserver_ips:
          - 1.1.1.1
          - 1.0.0.1
          nameserver_domains:
          - ns1.example.com
          - ns2.example.com
          nameserver_ip_scores:
            key: 1.4658129805029452
          mailserver_domains:
          - mail.example.com
          mailserver_ips:
          - 74.125.28.27
          mailserver_ip_scores:
            key: 5.962133916683182
        weights:
          key: 5.637376656633329
        overall_score: 51.3
      properties:
        overall_score:
          description: "Overall reputation score (0-100, higher = more suspicious)"
          example: 51.3
          format: double
          maximum: 100
          minimum: 0
          type: number
        risk_level:
          description: Risk classification based on overall score
          enum:
          - clean
          - low_risk
          - medium_risk
          - high_risk
          - malicious
          example: medium_risk
          type: string
        domain_ip_score:
          description: Average IP reputation score for domain's A records
          example: 85.5
          format: double
          maximum: 100
          minimum: 0
          type: number
        nameserver_ip_score:
          description: Average IP reputation score for nameserver IPs
          example: 45.2
          format: double
          maximum: 100
          minimum: 0
          type: number
        mailserver_ip_score:
          description: Average IP reputation score for mail server IPs
          example: 32.1
          format: double
          maximum: 100
          minimum: 0
          type: number
        details:
          $ref: "#/components/schemas/DomainReputationDetails"
        scoring_method:
          description: Scoring methodology used
          example: composite_infrastructure
          type: string
        weights:
          additionalProperties:
            description: Weighting strategy applied to infrastructure components
            format: double
            type: number
          description: Weighting strategy applied to infrastructure components
          type: object
      type: object
    IndicatorResponse:
      description: Comprehensive intelligence response for an IP address or domain
        indicator
      example:
        summary:
          registrar: MarkMonitor Inc.
          risk_score: 1.2
          asn_primary: AS15169
          ip_type: datacenter
          expiration_date: 2028-09-14
          total_links_out: 89
          network: 8.8.8.0/24
          domain_name: google.com
          registration_date: 1997-09-15
          total_links_in: 1523
          organization: Google LLC
          dns_provider: Cloudflare
          location: "Mountain View, California, US"
          total_domains: 142
          status: active
        relationships:
          related_domains:
          - google.co.uk
          - google.ca
          - google.de
          shared_infrastructure:
          - youtube.com
          - gmail.com
          incoming_links:
            total: 1523
            top_sources:
            - example.com
            - test.org
          outgoing_links:
            total: 1523
            top_sources:
            - example.com
            - test.org
        ip_intelligence:
          key: null
        security: "{}"
        metadata:
          data_sources:
          - geolocation_db
          - whois_api
          - dns_resolver
          - threat_feeds
          errors:
          - threat_feed_timeout
          - historical_whois_unavailable
        query:
          indicator: indicator
          history_type: history_type
          indicator_type: indicator_type
          response_time_ms: 0
          timestamp: timestamp
        isp: "{}"
        dns:
          a_records:
          - 8.8.8.8
          - 8.8.4.4
          mx_records:
          - null
          - null
          aaaa_records:
          - 2001:4860:4860::8888
          txt_records:
          - txt_records
          - txt_records
          cname_records:
          - cname_records
          - cname_records
          arecords:
          - arecords
          - arecords
          ns_records:
          - ns1.google.com
          - ns2.google.com
        reputation:
          domain_reputation:
            scoring_method: composite_infrastructure
            risk_level: medium_risk
            mailserver_ip_score: 32.1
            nameserver_ip_score: 45.2
            domain_ip_score: 85.5
            details:
              domain_ip_scores:
                key: 6.027456183070403
              domain_ips:
              - 8.8.8.8
              nameserver_ips:
              - 1.1.1.1
              - 1.0.0.1
              nameserver_domains:
              - ns1.example.com
              - ns2.example.com
              nameserver_ip_scores:
                key: 1.4658129805029452
              mailserver_domains:
              - mail.example.com
              mailserver_ips:
              - 74.125.28.27
              mailserver_ip_scores:
                key: 5.962133916683182
            weights:
              key: 5.637376656633329
            overall_score: 51.3
          risk_score: 2.3
          blacklists:
            prefix_score: 1.2
            asn_score: 0.8
            ip_score: 0.5
        registration: "{}"
        geolocation: "{}"
        network: "{}"
      properties:
        query:
          $ref: "#/components/schemas/QueryInfo"
        summary:
          $ref: "#/components/schemas/SummaryInfo"
        geolocation:
          type: object
        network:
          type: object
        isp:
          type: object
        registration:
          type: object
        dns:
          $ref: "#/components/schemas/DnsInfo"
        relationships:
          $ref: "#/components/schemas/RelationshipInfo"
        reputation:
          $ref: "#/components/schemas/ReputationInfo"
        security:
          type: object
        ip_intelligence:
          additionalProperties:
            $ref: "#/components/schemas/JsonNode"
          description: "When domain is queried with include=ip_intelligence, contains\
            \ full intelligence for each resolved IP"
          type: object
        metadata:
          $ref: "#/components/schemas/MetadataInfo"
      type: object
    LinksInfo:
      description: Link statistics and top sources
      example:
        total: 1523
        top_sources:
        - example.com
        - test.org
      properties:
        total:
          description: Total number of links
          example: 1523
          format: int32
          type: integer
        top_sources:
          description: Top linking sources
          example:
          - example.com
          - test.org
          items:
            description: Top linking sources
            example: "[\"example.com\",\"test.org\"]"
            type: string
          type: array
      type: object
    MetadataInfo:
      description: Response metadata including data sources and any errors encountered
      example:
        data_sources:
        - geolocation_db
        - whois_api
        - dns_resolver
        - threat_feeds
        errors:
        - threat_feed_timeout
        - historical_whois_unavailable
      properties:
        data_sources:
          description: List of data sources used to build this response
          example:
          - geolocation_db
          - whois_api
          - dns_resolver
          - threat_feeds
          items:
            description: List of data sources used to build this response
            example: "[\"geolocation_db\",\"whois_api\",\"dns_resolver\",\"threat_feeds\"\
              ]"
            type: string
          type: array
        errors:
          description: Any non-fatal errors encountered during data collection. Empty
            if all sources succeeded.
          example:
          - threat_feed_timeout
          - historical_whois_unavailable
          items:
            description: Any non-fatal errors encountered during data collection.
              Empty if all sources succeeded.
            example: "[\"threat_feed_timeout\",\"historical_whois_unavailable\"]"
            type: string
          type: array
      type: object
    QueryInfo:
      example:
        indicator: indicator
        history_type: history_type
        indicator_type: indicator_type
        response_time_ms: 0
        timestamp: timestamp
      properties:
        indicator:
          type: string
        indicator_type:
          type: string
        history_type:
          type: string
        timestamp:
          type: string
        response_time_ms:
          format: int64
          type: integer
      type: object
    RelationshipInfo:
      description: Connections and relationships to other infrastructure and domains
      example:
        related_domains:
        - google.co.uk
        - google.ca
        - google.de
        shared_infrastructure:
        - youtube.com
        - gmail.com
        incoming_links:
          total: 1523
          top_sources:
          - example.com
          - test.org
        outgoing_links:
          total: 1523
          top_sources:
          - example.com
          - test.org
      properties:
        incoming_links:
          $ref: "#/components/schemas/LinksInfo"
        outgoing_links:
          $ref: "#/components/schemas/LinksInfo"
        related_domains:
          description: "Related domains (same owner, same network, similar content)"
          example:
          - google.co.uk
          - google.ca
          - google.de
          items:
            description: "Related domains (same owner, same network, similar content)"
            example: "[\"google.co.uk\",\"google.ca\",\"google.de\"]"
            type: string
          type: array
        shared_infrastructure:
          description: "Other assets sharing the same infrastructure (IP, ASN, nameservers)"
          example:
          - youtube.com
          - gmail.com
          items:
            description: "Other assets sharing the same infrastructure (IP, ASN, nameservers)"
            example: "[\"youtube.com\",\"gmail.com\"]"
            type: string
          type: array
      type: object
    ReputationInfo:
      description: Reputation scoring and blacklist information for threat assessment
      example:
        domain_reputation:
          scoring_method: composite_infrastructure
          risk_level: medium_risk
          mailserver_ip_score: 32.1
          nameserver_ip_score: 45.2
          domain_ip_score: 85.5
          details:
            domain_ip_scores:
              key: 6.027456183070403
            domain_ips:
            - 8.8.8.8
            nameserver_ips:
            - 1.1.1.1
            - 1.0.0.1
            nameserver_domains:
            - ns1.example.com
            - ns2.example.com
            nameserver_ip_scores:
              key: 1.4658129805029452
            mailserver_domains:
            - mail.example.com
            mailserver_ips:
            - 74.125.28.27
            mailserver_ip_scores:
              key: 5.962133916683182
          weights:
            key: 5.637376656633329
          overall_score: 51.3
        risk_score: 2.3
        blacklists:
          prefix_score: 1.2
          asn_score: 0.8
          ip_score: 0.5
      properties:
        risk_score:
          description: "Composite risk score (0-10, higher = riskier)"
          example: 2.3
          format: double
          maximum: 10
          minimum: 0
          type: number
        blacklists:
          $ref: "#/components/schemas/BlacklistScores"
        domain_reputation:
          $ref: "#/components/schemas/DomainReputationScores"
      type: object
    SummaryInfo:
      description: Executive summary with the most important facts for quick decision-making
      example:
        registrar: MarkMonitor Inc.
        risk_score: 1.2
        asn_primary: AS15169
        ip_type: datacenter
        expiration_date: 2028-09-14
        total_links_out: 89
        network: 8.8.8.0/24
        domain_name: google.com
        registration_date: 1997-09-15
        total_links_in: 1523
        organization: Google LLC
        dns_provider: Cloudflare
        location: "Mountain View, California, US"
        total_domains: 142
        status: active
      properties:
        organization:
          description: Primary organization name
          example: Google LLC
          type: string
        location:
          description: Primary location
          example: "Mountain View, California, US"
          type: string
        network:
          description: Network range or CIDR
          example: 8.8.8.0/24
          type: string
        registrar:
          description: Domain registrar
          example: MarkMonitor Inc.
          type: string
        status:
          description: Domain status
          enum:
          - active
          - expired
          - pending
          - suspended
          - deleted
          example: active
          type: string
        asn_primary:
          description: Primary ASN
          example: AS15169
          type: string
        risk_score:
          description: "Composite risk score (0-10, higher is riskier)"
          example: 1.2
          format: double
          maximum: 10
          minimum: 0
          type: number
        ip_type:
          description: IP classification
          enum:
          - residential
          - business
          - datacenter
          - hosting
          - vpn
          - proxy
          - tor
          - mobile
          example: datacenter
          type: string
        total_domains:
          description: Total number of domains resolving to this IP
          example: 142
          format: int32
          type: integer
        domain_name:
          description: The domain name
          example: google.com
          type: string
        registration_date:
          description: Domain registration date
          example: 1997-09-15
          type: string
        expiration_date:
          description: Domain expiration date
          example: 2028-09-14
          type: string
        dns_provider:
          description: Primary DNS provider
          example: Cloudflare
          type: string
        total_links_in:
          description: Number of incoming links/backlinks
          example: 1523
          format: int32
          type: integer
        total_links_out:
          description: Number of outgoing links
          example: 89
          format: int32
          type: integer
      type: object
    HistoryData:
      example:
        oldest_date: oldest_date
        records:
        - null
        - null
        total_records: 0
        newest_date: newest_date
        message: message
      properties:
        records:
          items:
            $ref: "#/components/schemas/JsonNode"
          type: array
        total_records:
          format: int32
          type: integer
        oldest_date:
          type: string
        newest_date:
          type: string
        message:
          type: string
      type: object
    HistoryResponse:
      example:
        query:
          indicator: indicator
          history_type: history_type
          indicator_type: indicator_type
          response_time_ms: 0
          timestamp: timestamp
        history:
          oldest_date: oldest_date
          records:
          - null
          - null
          total_records: 0
          newest_date: newest_date
          message: message
      properties:
        query:
          $ref: "#/components/schemas/QueryInfo"
        history:
          $ref: "#/components/schemas/HistoryData"
      type: object
    SubdomainInfo:
      description: Detailed information about a discovered subdomain
      example:
        technologies:
        - nginx
        - WordPress
        - CloudFlare
        first_seen: 2024-01-15T08:00:00Z
        last_seen: 2024-12-20T10:00:00Z
        risk_score: 15
        ip_addresses:
        - 192.0.2.1
        - 198.51.100.1
        subdomain: www.example.com
        record_type: A
        status: active
      properties:
        subdomain:
          description: The full subdomain name
          example: www.example.com
          type: string
        ip_addresses:
          description: IP addresses associated with the subdomain
          example:
          - 192.0.2.1
          - 198.51.100.1
          items:
            description: IP addresses associated with the subdomain
            example: "[\"192.0.2.1\",\"198.51.100.1\"]"
            type: string
          type: array
        first_seen:
          description: First time this subdomain was observed
          example: 2024-01-15T08:00:00Z
          format: date-time
          type: string
        last_seen:
          description: Last time this subdomain was observed
          example: 2024-12-20T10:00:00Z
          format: date-time
          type: string
        record_type:
          description: Type of subdomain record
          enum:
          - A
          - AAAA
          - CNAME
          - MX
          - TXT
          - NS
          example: A
          type: string
        status:
          description: Current status of the subdomain
          enum:
          - active
          - inactive
          - parked
          example: active
          type: string
        technologies:
          description: Technology stack detected on this subdomain
          example:
          - nginx
          - WordPress
          - CloudFlare
          items:
            description: Technology stack detected on this subdomain
            example: "[\"nginx\",\"WordPress\",\"CloudFlare\"]"
            type: string
          type: array
        risk_score:
          description: Risk score for this subdomain (0-100)
          example: 15
          format: int32
          maximum: 100
          minimum: 0
          type: integer
      required:
      - subdomain
      type: object
    SubdomainResponse:
      description: Response containing discovered subdomains and related metadata
      example:
        subdomains:
        - technologies:
          - nginx
          - WordPress
          - CloudFlare
          first_seen: 2024-01-15T08:00:00Z
          last_seen: 2024-12-20T10:00:00Z
          risk_score: 15
          ip_addresses:
          - 192.0.2.1
          - 198.51.100.1
          subdomain: www.example.com
          record_type: A
          status: active
        - technologies:
          - nginx
          - WordPress
          - CloudFlare
          first_seen: 2024-01-15T08:00:00Z
          last_seen: 2024-12-20T10:00:00Z
          risk_score: 15
          ip_addresses:
          - 192.0.2.1
          - 198.51.100.1
          subdomain: www.example.com
          record_type: A
          status: active
        sources:
        - passive_dns
        - certificate_transparency
        - web_crawling
        total_count: 42
        domain: example.com
        timestamp: 2024-12-20T10:15:30.123Z
      properties:
        domain:
          description: The root domain that was queried
          example: example.com
          type: string
        total_count:
          description: Total number of subdomains discovered
          example: 42
          format: int32
          type: integer
        subdomains:
          description: List of discovered subdomains
          items:
            $ref: "#/components/schemas/SubdomainInfo"
          type: array
        timestamp:
          description: Timestamp of when the data was retrieved
          example: 2024-12-20T10:15:30.123Z
          format: date-time
          type: string
        sources:
          description: Data sources used for subdomain discovery
          example:
          - passive_dns
          - certificate_transparency
          - web_crawling
          items:
            description: Data sources used for subdomain discovery
            example: "[\"passive_dns\",\"certificate_transparency\",\"web_crawling\"\
              ]"
            type: string
          type: array
      required:
      - domain
      - subdomains
      - timestamp
      - total_count
      type: object
  securitySchemes:
    bearerAuth:
      bearerFormat: API-KEY
      description: |
        <h4>API Key Authentication</h4>
        <p>All API requests require a valid API key passed as a Bearer token in the Authorization header.</p>
        <p><b>How to get your API key:</b></p>
        <ol>
            <li>Sign up at <a href="https://dash.whisper.security">dash.whisper.security</a></li>
            <li>Navigate to your dashboard and generate an API key</li>
            <li>Copy the key (starts with <code>wsk_live_</code> or <code>wsk_test_</code>)</li>
        </ol>
        <p><b>Using your key:</b></p>
        <p>Include it in the Authorization header of every request:</p>
        <pre>Authorization: Bearer wsk_live_1234567890abcdef</pre>
        <p><b>Testing in Swagger UI:</b></p>
        <ol>
            <li>Click the <b>"Authorize"</b> button at the top of this page</li>
            <li>Enter your API key (without "Bearer" prefix)</li>
            <li>Click "Authorize" and "Close"</li>
            <li>All requests will now include your key automatically</li>
        </ol>
        <p><b>Security:</b> Never commit API keys to source control. Use environment variables or secret managers.</p>
      scheme: bearer
      type: http

