// <auto-generated>
/*
 * Whisper API v1
 *
 * <h2>The Foundational Intelligence Layer for the Internet</h2> <p>The Whisper API provides comprehensive, real-time intelligence on any internet asset. By connecting billions of data points across live internet routing, historical registration records, and deep resolution data, our API moves beyond simple enrichment to deliver predictive, context-rich insights.</p> <p>This document is the single source of truth for our v1 API. It is designed for security experts, developers, and automated systems to understand and leverage the full power of our platform.</p>  <h3>üöÄ Quick Start</h3> <p><b>1. Get your API key:</b> <a href=\"https://dash.whisper.security\">Sign up at dash.whisper.security</a></p> <p><b>2. Make your first request:</b></p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" https://api.whisper.security/v1/indicators/ip/8.8.8.8</code></pre> <p><b>3. Explore the API:</b> Use the \"Try it out\" button in each endpoint below to test interactively.</p>  <h3>üéØ Key Features</h3> <ul>     <li><b>Unified & Simple:</b> Small set of powerful, resource-oriented endpoints</li>     <li><b>Performant by Design:</b> Asynchronous-first with strategic caching (&lt;500ms typical response)</li>     <li><b>Workflow-Oriented:</b> Built for real-world security operations, not just data dumps</li>     <li><b>Comprehensive:</b> IP, Domain, DNS, WHOIS, Routing, Geolocation, Screenshots, Monitoring</li> </ul>  <h3>‚ö° Performance Targets</h3> <table>     <tr><th>Endpoint Type</th><th>Response Time</th><th>Use Case</th></tr>     <tr><td>Geolocation</td><td>&lt;150ms</td><td>Real-time fraud detection</td></tr>     <tr><td>Single Indicator</td><td>&lt;500ms</td><td>Incident response enrichment</td></tr>     <tr><td>With Routing Data</td><td>&lt;2s (cached: 200ms)</td><td>Deep network analysis</td></tr>     <tr><td>Bulk Operations</td><td>5-30s</td><td>Batch log enrichment</td></tr>     <tr><td>Search/Discovery</td><td>10-60s</td><td>Threat hunting</td></tr> </table>  <h3>üîê Authentication</h3> <p>All endpoints require Bearer token authentication. Click the <b>\"Authorize\"</b> button above and enter your API key.</p> <pre><code>Authorization: Bearer wsk_live_1234567890abcdef</code></pre>  <h3>üìä Rate Limits</h3> <table>     <tr><th>Category</th><th>Limit</th></tr>     <tr><td>Standard Enrichment</td><td>100 req/min</td></tr>     <tr><td>Bulk Operations</td><td>10 req/min</td></tr>     <tr><td>Search/Discovery</td><td>5 req/min</td></tr>     <tr><td>Screenshots</td><td>10 req/min</td></tr> </table> <p><i>Rate limits return HTTP 429. Retry after the time specified in the <code>Retry-After</code> header.</i></p>  <h3>üìö Resources</h3> <ul>     <li><a href=\"https://docs.whisper.security\">Full Documentation</a></li>     <li><a href=\"https://docs.whisper.security/quickstart\">Quick Start Guide</a></li>     <li><a href=\"https://docs.whisper.security/examples\">Code Examples</a></li>     <li><a href=\"https://whisper.security/support\">API Support</a></li> </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Whisper.Api.Sdk.Client;

namespace Whisper.Api.Sdk.Model
{
    /// <summary>
    /// Executive summary with the most important facts for quick decision-making
    /// </summary>
    public partial class SummaryInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SummaryInfo" /> class.
        /// </summary>
        /// <param name="organization">Primary organization name</param>
        /// <param name="location">Primary location</param>
        /// <param name="network">Network range or CIDR</param>
        /// <param name="registrar">Domain registrar</param>
        /// <param name="status">Domain status</param>
        /// <param name="asnPrimary">Primary ASN</param>
        /// <param name="riskScore">Composite risk score (0-10, higher is riskier)</param>
        /// <param name="ipType">IP classification</param>
        /// <param name="totalDomains">Total number of domains resolving to this IP</param>
        /// <param name="domainName">The domain name</param>
        /// <param name="registrationDate">Domain registration date</param>
        /// <param name="expirationDate">Domain expiration date</param>
        /// <param name="dnsProvider">Primary DNS provider</param>
        /// <param name="totalLinksIn">Number of incoming links/backlinks</param>
        /// <param name="totalLinksOut">Number of outgoing links</param>
        [JsonConstructor]
        public SummaryInfo(Option<string?> organization = default, Option<string?> location = default, Option<string?> network = default, Option<string?> registrar = default, Option<StatusEnum?> status = default, Option<string?> asnPrimary = default, Option<double?> riskScore = default, Option<IpTypeEnum?> ipType = default, Option<int?> totalDomains = default, Option<string?> domainName = default, Option<string?> registrationDate = default, Option<string?> expirationDate = default, Option<string?> dnsProvider = default, Option<int?> totalLinksIn = default, Option<int?> totalLinksOut = default)
        {
            OrganizationOption = organization;
            LocationOption = location;
            NetworkOption = network;
            RegistrarOption = registrar;
            StatusOption = status;
            AsnPrimaryOption = asnPrimary;
            RiskScoreOption = riskScore;
            IpTypeOption = ipType;
            TotalDomainsOption = totalDomains;
            DomainNameOption = domainName;
            RegistrationDateOption = registrationDate;
            ExpirationDateOption = expirationDate;
            DnsProviderOption = dnsProvider;
            TotalLinksInOption = totalLinksIn;
            TotalLinksOutOption = totalLinksOut;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Domain status
        /// </summary>
        /// <value>Domain status</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            Active = 1,

            /// <summary>
            /// Enum Expired for value: expired
            /// </summary>
            Expired = 2,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            Pending = 3,

            /// <summary>
            /// Enum Suspended for value: suspended
            /// </summary>
            Suspended = 4,

            /// <summary>
            /// Enum Deleted for value: deleted
            /// </summary>
            Deleted = 5
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("active"))
                return StatusEnum.Active;

            if (value.Equals("expired"))
                return StatusEnum.Expired;

            if (value.Equals("pending"))
                return StatusEnum.Pending;

            if (value.Equals("suspended"))
                return StatusEnum.Suspended;

            if (value.Equals("deleted"))
                return StatusEnum.Deleted;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("active"))
                return StatusEnum.Active;

            if (value.Equals("expired"))
                return StatusEnum.Expired;

            if (value.Equals("pending"))
                return StatusEnum.Pending;

            if (value.Equals("suspended"))
                return StatusEnum.Suspended;

            if (value.Equals("deleted"))
                return StatusEnum.Deleted;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum? value)
        {
            if (value == StatusEnum.Active)
                return "active";

            if (value == StatusEnum.Expired)
                return "expired";

            if (value == StatusEnum.Pending)
                return "pending";

            if (value == StatusEnum.Suspended)
                return "suspended";

            if (value == StatusEnum.Deleted)
                return "deleted";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StatusEnum?> StatusOption { get; private set; }

        /// <summary>
        /// Domain status
        /// </summary>
        /// <value>Domain status</value>
        /* <example>active</example> */
        [JsonPropertyName("status")]
        public StatusEnum? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// IP classification
        /// </summary>
        /// <value>IP classification</value>
        public enum IpTypeEnum
        {
            /// <summary>
            /// Enum Residential for value: residential
            /// </summary>
            Residential = 1,

            /// <summary>
            /// Enum Business for value: business
            /// </summary>
            Business = 2,

            /// <summary>
            /// Enum Datacenter for value: datacenter
            /// </summary>
            Datacenter = 3,

            /// <summary>
            /// Enum Hosting for value: hosting
            /// </summary>
            Hosting = 4,

            /// <summary>
            /// Enum Vpn for value: vpn
            /// </summary>
            Vpn = 5,

            /// <summary>
            /// Enum Proxy for value: proxy
            /// </summary>
            Proxy = 6,

            /// <summary>
            /// Enum Tor for value: tor
            /// </summary>
            Tor = 7,

            /// <summary>
            /// Enum Mobile for value: mobile
            /// </summary>
            Mobile = 8
        }

        /// <summary>
        /// Returns a <see cref="IpTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static IpTypeEnum IpTypeEnumFromString(string value)
        {
            if (value.Equals("residential"))
                return IpTypeEnum.Residential;

            if (value.Equals("business"))
                return IpTypeEnum.Business;

            if (value.Equals("datacenter"))
                return IpTypeEnum.Datacenter;

            if (value.Equals("hosting"))
                return IpTypeEnum.Hosting;

            if (value.Equals("vpn"))
                return IpTypeEnum.Vpn;

            if (value.Equals("proxy"))
                return IpTypeEnum.Proxy;

            if (value.Equals("tor"))
                return IpTypeEnum.Tor;

            if (value.Equals("mobile"))
                return IpTypeEnum.Mobile;

            throw new NotImplementedException($"Could not convert value to type IpTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="IpTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static IpTypeEnum? IpTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("residential"))
                return IpTypeEnum.Residential;

            if (value.Equals("business"))
                return IpTypeEnum.Business;

            if (value.Equals("datacenter"))
                return IpTypeEnum.Datacenter;

            if (value.Equals("hosting"))
                return IpTypeEnum.Hosting;

            if (value.Equals("vpn"))
                return IpTypeEnum.Vpn;

            if (value.Equals("proxy"))
                return IpTypeEnum.Proxy;

            if (value.Equals("tor"))
                return IpTypeEnum.Tor;

            if (value.Equals("mobile"))
                return IpTypeEnum.Mobile;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="IpTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string IpTypeEnumToJsonValue(IpTypeEnum? value)
        {
            if (value == IpTypeEnum.Residential)
                return "residential";

            if (value == IpTypeEnum.Business)
                return "business";

            if (value == IpTypeEnum.Datacenter)
                return "datacenter";

            if (value == IpTypeEnum.Hosting)
                return "hosting";

            if (value == IpTypeEnum.Vpn)
                return "vpn";

            if (value == IpTypeEnum.Proxy)
                return "proxy";

            if (value == IpTypeEnum.Tor)
                return "tor";

            if (value == IpTypeEnum.Mobile)
                return "mobile";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of IpType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IpTypeEnum?> IpTypeOption { get; private set; }

        /// <summary>
        /// IP classification
        /// </summary>
        /// <value>IP classification</value>
        /* <example>datacenter</example> */
        [JsonPropertyName("ip_type")]
        public IpTypeEnum? IpType { get { return this.IpTypeOption; } set { this.IpTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Organization
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrganizationOption { get; private set; }

        /// <summary>
        /// Primary organization name
        /// </summary>
        /// <value>Primary organization name</value>
        /* <example>Google LLC</example> */
        [JsonPropertyName("organization")]
        public string? Organization { get { return this.OrganizationOption; } set { this.OrganizationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationOption { get; private set; }

        /// <summary>
        /// Primary location
        /// </summary>
        /// <value>Primary location</value>
        /* <example>Mountain View, California, US</example> */
        [JsonPropertyName("location")]
        public string? Location { get { return this.LocationOption; } set { this.LocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Network
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NetworkOption { get; private set; }

        /// <summary>
        /// Network range or CIDR
        /// </summary>
        /// <value>Network range or CIDR</value>
        /* <example>8.8.8.0/24</example> */
        [JsonPropertyName("network")]
        public string? Network { get { return this.NetworkOption; } set { this.NetworkOption = new(value); } }

        /// <summary>
        /// Used to track the state of Registrar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RegistrarOption { get; private set; }

        /// <summary>
        /// Domain registrar
        /// </summary>
        /// <value>Domain registrar</value>
        /* <example>MarkMonitor Inc.</example> */
        [JsonPropertyName("registrar")]
        public string? Registrar { get { return this.RegistrarOption; } set { this.RegistrarOption = new(value); } }

        /// <summary>
        /// Used to track the state of AsnPrimary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AsnPrimaryOption { get; private set; }

        /// <summary>
        /// Primary ASN
        /// </summary>
        /// <value>Primary ASN</value>
        /* <example>AS15169</example> */
        [JsonPropertyName("asn_primary")]
        public string? AsnPrimary { get { return this.AsnPrimaryOption; } set { this.AsnPrimaryOption = new(value); } }

        /// <summary>
        /// Used to track the state of RiskScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> RiskScoreOption { get; private set; }

        /// <summary>
        /// Composite risk score (0-10, higher is riskier)
        /// </summary>
        /// <value>Composite risk score (0-10, higher is riskier)</value>
        /* <example>1.2</example> */
        [JsonPropertyName("risk_score")]
        public double? RiskScore { get { return this.RiskScoreOption; } set { this.RiskScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalDomains
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalDomainsOption { get; private set; }

        /// <summary>
        /// Total number of domains resolving to this IP
        /// </summary>
        /// <value>Total number of domains resolving to this IP</value>
        /* <example>142</example> */
        [JsonPropertyName("total_domains")]
        public int? TotalDomains { get { return this.TotalDomainsOption; } set { this.TotalDomainsOption = new(value); } }

        /// <summary>
        /// Used to track the state of DomainName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DomainNameOption { get; private set; }

        /// <summary>
        /// The domain name
        /// </summary>
        /// <value>The domain name</value>
        /* <example>google.com</example> */
        [JsonPropertyName("domain_name")]
        public string? DomainName { get { return this.DomainNameOption; } set { this.DomainNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of RegistrationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RegistrationDateOption { get; private set; }

        /// <summary>
        /// Domain registration date
        /// </summary>
        /// <value>Domain registration date</value>
        /* <example>1997-09-15</example> */
        [JsonPropertyName("registration_date")]
        public string? RegistrationDate { get { return this.RegistrationDateOption; } set { this.RegistrationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpirationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpirationDateOption { get; private set; }

        /// <summary>
        /// Domain expiration date
        /// </summary>
        /// <value>Domain expiration date</value>
        /* <example>2028-09-14</example> */
        [JsonPropertyName("expiration_date")]
        public string? ExpirationDate { get { return this.ExpirationDateOption; } set { this.ExpirationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of DnsProvider
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DnsProviderOption { get; private set; }

        /// <summary>
        /// Primary DNS provider
        /// </summary>
        /// <value>Primary DNS provider</value>
        /* <example>Cloudflare</example> */
        [JsonPropertyName("dns_provider")]
        public string? DnsProvider { get { return this.DnsProviderOption; } set { this.DnsProviderOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalLinksIn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalLinksInOption { get; private set; }

        /// <summary>
        /// Number of incoming links/backlinks
        /// </summary>
        /// <value>Number of incoming links/backlinks</value>
        /* <example>1523</example> */
        [JsonPropertyName("total_links_in")]
        public int? TotalLinksIn { get { return this.TotalLinksInOption; } set { this.TotalLinksInOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalLinksOut
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalLinksOutOption { get; private set; }

        /// <summary>
        /// Number of outgoing links
        /// </summary>
        /// <value>Number of outgoing links</value>
        /* <example>89</example> */
        [JsonPropertyName("total_links_out")]
        public int? TotalLinksOut { get { return this.TotalLinksOutOption; } set { this.TotalLinksOutOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SummaryInfo {\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("  Registrar: ").Append(Registrar).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  AsnPrimary: ").Append(AsnPrimary).Append("\n");
            sb.Append("  RiskScore: ").Append(RiskScore).Append("\n");
            sb.Append("  IpType: ").Append(IpType).Append("\n");
            sb.Append("  TotalDomains: ").Append(TotalDomains).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  RegistrationDate: ").Append(RegistrationDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  DnsProvider: ").Append(DnsProvider).Append("\n");
            sb.Append("  TotalLinksIn: ").Append(TotalLinksIn).Append("\n");
            sb.Append("  TotalLinksOut: ").Append(TotalLinksOut).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RiskScore (double) maximum
            if (this.RiskScoreOption.IsSet && this.RiskScoreOption.Value > (double)10)
            {
                yield return new ValidationResult("Invalid value for RiskScore, must be a value less than or equal to 10.", new [] { "RiskScore" });
            }

            // RiskScore (double) minimum
            if (this.RiskScoreOption.IsSet && this.RiskScoreOption.Value < (double)0)
            {
                yield return new ValidationResult("Invalid value for RiskScore, must be a value greater than or equal to 0.", new [] { "RiskScore" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SummaryInfo" />
    /// </summary>
    public class SummaryInfoJsonConverter : JsonConverter<SummaryInfo>
    {
        /// <summary>
        /// Deserializes json to <see cref="SummaryInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SummaryInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> organization = default;
            Option<string?> location = default;
            Option<string?> network = default;
            Option<string?> registrar = default;
            Option<SummaryInfo.StatusEnum?> status = default;
            Option<string?> asnPrimary = default;
            Option<double?> riskScore = default;
            Option<SummaryInfo.IpTypeEnum?> ipType = default;
            Option<int?> totalDomains = default;
            Option<string?> domainName = default;
            Option<string?> registrationDate = default;
            Option<string?> expirationDate = default;
            Option<string?> dnsProvider = default;
            Option<int?> totalLinksIn = default;
            Option<int?> totalLinksOut = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "organization":
                            organization = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "location":
                            location = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "network":
                            network = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "registrar":
                            registrar = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            string? statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<SummaryInfo.StatusEnum?>(SummaryInfo.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "asn_primary":
                            asnPrimary = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "risk_score":
                            riskScore = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "ip_type":
                            string? ipTypeRawValue = utf8JsonReader.GetString();
                            if (ipTypeRawValue != null)
                                ipType = new Option<SummaryInfo.IpTypeEnum?>(SummaryInfo.IpTypeEnumFromStringOrDefault(ipTypeRawValue));
                            break;
                        case "total_domains":
                            totalDomains = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "domain_name":
                            domainName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "registration_date":
                            registrationDate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expiration_date":
                            expirationDate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "dns_provider":
                            dnsProvider = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "total_links_in":
                            totalLinksIn = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "total_links_out":
                            totalLinksOut = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (organization.IsSet && organization.Value == null)
                throw new ArgumentNullException(nameof(organization), "Property is not nullable for class SummaryInfo.");

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class SummaryInfo.");

            if (network.IsSet && network.Value == null)
                throw new ArgumentNullException(nameof(network), "Property is not nullable for class SummaryInfo.");

            if (registrar.IsSet && registrar.Value == null)
                throw new ArgumentNullException(nameof(registrar), "Property is not nullable for class SummaryInfo.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class SummaryInfo.");

            if (asnPrimary.IsSet && asnPrimary.Value == null)
                throw new ArgumentNullException(nameof(asnPrimary), "Property is not nullable for class SummaryInfo.");

            if (riskScore.IsSet && riskScore.Value == null)
                throw new ArgumentNullException(nameof(riskScore), "Property is not nullable for class SummaryInfo.");

            if (ipType.IsSet && ipType.Value == null)
                throw new ArgumentNullException(nameof(ipType), "Property is not nullable for class SummaryInfo.");

            if (totalDomains.IsSet && totalDomains.Value == null)
                throw new ArgumentNullException(nameof(totalDomains), "Property is not nullable for class SummaryInfo.");

            if (domainName.IsSet && domainName.Value == null)
                throw new ArgumentNullException(nameof(domainName), "Property is not nullable for class SummaryInfo.");

            if (registrationDate.IsSet && registrationDate.Value == null)
                throw new ArgumentNullException(nameof(registrationDate), "Property is not nullable for class SummaryInfo.");

            if (expirationDate.IsSet && expirationDate.Value == null)
                throw new ArgumentNullException(nameof(expirationDate), "Property is not nullable for class SummaryInfo.");

            if (dnsProvider.IsSet && dnsProvider.Value == null)
                throw new ArgumentNullException(nameof(dnsProvider), "Property is not nullable for class SummaryInfo.");

            if (totalLinksIn.IsSet && totalLinksIn.Value == null)
                throw new ArgumentNullException(nameof(totalLinksIn), "Property is not nullable for class SummaryInfo.");

            if (totalLinksOut.IsSet && totalLinksOut.Value == null)
                throw new ArgumentNullException(nameof(totalLinksOut), "Property is not nullable for class SummaryInfo.");

            return new SummaryInfo(organization, location, network, registrar, status, asnPrimary, riskScore, ipType, totalDomains, domainName, registrationDate, expirationDate, dnsProvider, totalLinksIn, totalLinksOut);
        }

        /// <summary>
        /// Serializes a <see cref="SummaryInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="summaryInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SummaryInfo summaryInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, summaryInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SummaryInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="summaryInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SummaryInfo summaryInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (summaryInfo.OrganizationOption.IsSet && summaryInfo.Organization == null)
                throw new ArgumentNullException(nameof(summaryInfo.Organization), "Property is required for class SummaryInfo.");

            if (summaryInfo.LocationOption.IsSet && summaryInfo.Location == null)
                throw new ArgumentNullException(nameof(summaryInfo.Location), "Property is required for class SummaryInfo.");

            if (summaryInfo.NetworkOption.IsSet && summaryInfo.Network == null)
                throw new ArgumentNullException(nameof(summaryInfo.Network), "Property is required for class SummaryInfo.");

            if (summaryInfo.RegistrarOption.IsSet && summaryInfo.Registrar == null)
                throw new ArgumentNullException(nameof(summaryInfo.Registrar), "Property is required for class SummaryInfo.");

            if (summaryInfo.AsnPrimaryOption.IsSet && summaryInfo.AsnPrimary == null)
                throw new ArgumentNullException(nameof(summaryInfo.AsnPrimary), "Property is required for class SummaryInfo.");

            if (summaryInfo.DomainNameOption.IsSet && summaryInfo.DomainName == null)
                throw new ArgumentNullException(nameof(summaryInfo.DomainName), "Property is required for class SummaryInfo.");

            if (summaryInfo.RegistrationDateOption.IsSet && summaryInfo.RegistrationDate == null)
                throw new ArgumentNullException(nameof(summaryInfo.RegistrationDate), "Property is required for class SummaryInfo.");

            if (summaryInfo.ExpirationDateOption.IsSet && summaryInfo.ExpirationDate == null)
                throw new ArgumentNullException(nameof(summaryInfo.ExpirationDate), "Property is required for class SummaryInfo.");

            if (summaryInfo.DnsProviderOption.IsSet && summaryInfo.DnsProvider == null)
                throw new ArgumentNullException(nameof(summaryInfo.DnsProvider), "Property is required for class SummaryInfo.");

            if (summaryInfo.OrganizationOption.IsSet)
                writer.WriteString("organization", summaryInfo.Organization);

            if (summaryInfo.LocationOption.IsSet)
                writer.WriteString("location", summaryInfo.Location);

            if (summaryInfo.NetworkOption.IsSet)
                writer.WriteString("network", summaryInfo.Network);

            if (summaryInfo.RegistrarOption.IsSet)
                writer.WriteString("registrar", summaryInfo.Registrar);

            var statusRawValue = SummaryInfo.StatusEnumToJsonValue(summaryInfo.StatusOption.Value!.Value);
            writer.WriteString("status", statusRawValue);
            if (summaryInfo.AsnPrimaryOption.IsSet)
                writer.WriteString("asn_primary", summaryInfo.AsnPrimary);

            if (summaryInfo.RiskScoreOption.IsSet)
                writer.WriteNumber("risk_score", summaryInfo.RiskScoreOption.Value!.Value);

            var ipTypeRawValue = SummaryInfo.IpTypeEnumToJsonValue(summaryInfo.IpTypeOption.Value!.Value);
            writer.WriteString("ip_type", ipTypeRawValue);
            if (summaryInfo.TotalDomainsOption.IsSet)
                writer.WriteNumber("total_domains", summaryInfo.TotalDomainsOption.Value!.Value);

            if (summaryInfo.DomainNameOption.IsSet)
                writer.WriteString("domain_name", summaryInfo.DomainName);

            if (summaryInfo.RegistrationDateOption.IsSet)
                writer.WriteString("registration_date", summaryInfo.RegistrationDate);

            if (summaryInfo.ExpirationDateOption.IsSet)
                writer.WriteString("expiration_date", summaryInfo.ExpirationDate);

            if (summaryInfo.DnsProviderOption.IsSet)
                writer.WriteString("dns_provider", summaryInfo.DnsProvider);

            if (summaryInfo.TotalLinksInOption.IsSet)
                writer.WriteNumber("total_links_in", summaryInfo.TotalLinksInOption.Value!.Value);

            if (summaryInfo.TotalLinksOutOption.IsSet)
                writer.WriteNumber("total_links_out", summaryInfo.TotalLinksOutOption.Value!.Value);
        }
    }
}
