// <auto-generated>
/*
 * Whisper API v1
 *
 * <h2>The Foundational Intelligence Layer for the Internet</h2> <p>The Whisper API provides comprehensive, real-time intelligence on any internet asset. By connecting billions of data points across live internet routing, historical registration records, and deep resolution data, our API moves beyond simple enrichment to deliver predictive, context-rich insights.</p> <p>This document is the single source of truth for our v1 API. It is designed for security experts, developers, and automated systems to understand and leverage the full power of our platform.</p>  <h3>üöÄ Quick Start</h3> <p><b>1. Get your API key:</b> <a href=\"https://dash.whisper.security\">Sign up at dash.whisper.security</a></p> <p><b>2. Make your first request:</b></p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" https://api.whisper.security/v1/indicators/ip/8.8.8.8</code></pre> <p><b>3. Explore the API:</b> Use the \"Try it out\" button in each endpoint below to test interactively.</p>  <h3>üéØ Key Features</h3> <ul>     <li><b>Unified & Simple:</b> Small set of powerful, resource-oriented endpoints</li>     <li><b>Performant by Design:</b> Asynchronous-first with strategic caching (&lt;500ms typical response)</li>     <li><b>Workflow-Oriented:</b> Built for real-world security operations, not just data dumps</li>     <li><b>Comprehensive:</b> IP, Domain, DNS, WHOIS, Routing, Geolocation, Screenshots, Monitoring</li> </ul>  <h3>‚ö° Performance Targets</h3> <table>     <tr><th>Endpoint Type</th><th>Response Time</th><th>Use Case</th></tr>     <tr><td>Geolocation</td><td>&lt;150ms</td><td>Real-time fraud detection</td></tr>     <tr><td>Single Indicator</td><td>&lt;500ms</td><td>Incident response enrichment</td></tr>     <tr><td>With Routing Data</td><td>&lt;2s (cached: 200ms)</td><td>Deep network analysis</td></tr>     <tr><td>Bulk Operations</td><td>5-30s</td><td>Batch log enrichment</td></tr>     <tr><td>Search/Discovery</td><td>10-60s</td><td>Threat hunting</td></tr> </table>  <h3>üîê Authentication</h3> <p>All endpoints require Bearer token authentication. Click the <b>\"Authorize\"</b> button above and enter your API key.</p> <pre><code>Authorization: Bearer wsk_live_1234567890abcdef</code></pre>  <h3>üìä Rate Limits</h3> <table>     <tr><th>Category</th><th>Limit</th></tr>     <tr><td>Standard Enrichment</td><td>100 req/min</td></tr>     <tr><td>Bulk Operations</td><td>10 req/min</td></tr>     <tr><td>Search/Discovery</td><td>5 req/min</td></tr>     <tr><td>Screenshots</td><td>10 req/min</td></tr> </table> <p><i>Rate limits return HTTP 429. Retry after the time specified in the <code>Retry-After</code> header.</i></p>  <h3>üìö Resources</h3> <ul>     <li><a href=\"https://docs.whisper.security\">Full Documentation</a></li>     <li><a href=\"https://docs.whisper.security/quickstart\">Quick Start Guide</a></li>     <li><a href=\"https://docs.whisper.security/examples\">Code Examples</a></li>     <li><a href=\"https://whisper.security/support\">API Support</a></li> </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Whisper.Api.Sdk.Client;

namespace Whisper.Api.Sdk.Model
{
    /// <summary>
    /// Search query for finding indicators matching specific criteria. Powerful for threat hunting and infrastructure discovery.
    /// </summary>
    public partial class SearchRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchRequest" /> class.
        /// </summary>
        /// <param name="query">Search query using field:value syntax. Supports multiple fields combined with logical operators.  **Supported Fields:** - WHOIS: &#x60;registrantCompany&#x60;, &#x60;registrantName&#x60;, &#x60;registrantEmail&#x60;, &#x60;registrar&#x60; - Network: &#x60;asn&#x60;, &#x60;network&#x60;, &#x60;country_code&#x60;, &#x60;city&#x60; - Domain: &#x60;tld&#x60;, &#x60;domain_length&#x60;, &#x60;creation_date&#x60;  **Examples:** - &#x60;registrantCompany:EvilCorp&#x60; - Find domains by registrant - &#x60;asn:15169 AND country_code:US&#x60; - Complex query with AND - &#x60;registrantEmail:admin@example.com&#x60; - Find domains by email </param>
        /// <param name="filters">Additional filters to narrow down search results. Applied after query matching.</param>
        /// <param name="limit">Maximum number of results to return per page (default to 100)</param>
        /// <param name="offset">Number of results to skip for pagination. Use with limit for paginated results. (default to 0)</param>
        /// <param name="sortBy">Field to sort results by</param>
        /// <param name="sortOrder">Sort order (default to SortOrderEnum.Asc)</param>
        [JsonConstructor]
        public SearchRequest(string query, Option<Dictionary<string, string>> filters = default, Option<int?> limit = default, Option<int?> offset = default, Option<SortByEnum?> sortBy = default, Option<SortOrderEnum?> sortOrder = default)
        {
            Query = query;
            FiltersOption = filters;
            LimitOption = limit;
            OffsetOption = offset;
            SortByOption = sortBy;
            SortOrderOption = sortOrder;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Field to sort results by
        /// </summary>
        /// <value>Field to sort results by</value>
        public enum SortByEnum
        {
            /// <summary>
            /// Enum RegistrationDate for value: registration_date
            /// </summary>
            RegistrationDate = 1,

            /// <summary>
            /// Enum ExpirationDate for value: expiration_date
            /// </summary>
            ExpirationDate = 2,

            /// <summary>
            /// Enum RiskScore for value: risk_score
            /// </summary>
            RiskScore = 3,

            /// <summary>
            /// Enum DomainName for value: domain_name
            /// </summary>
            DomainName = 4,

            /// <summary>
            /// Enum Asn for value: asn
            /// </summary>
            Asn = 5
        }

        /// <summary>
        /// Returns a <see cref="SortByEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SortByEnum SortByEnumFromString(string value)
        {
            if (value.Equals("registration_date"))
                return SortByEnum.RegistrationDate;

            if (value.Equals("expiration_date"))
                return SortByEnum.ExpirationDate;

            if (value.Equals("risk_score"))
                return SortByEnum.RiskScore;

            if (value.Equals("domain_name"))
                return SortByEnum.DomainName;

            if (value.Equals("asn"))
                return SortByEnum.Asn;

            throw new NotImplementedException($"Could not convert value to type SortByEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SortByEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SortByEnum? SortByEnumFromStringOrDefault(string value)
        {
            if (value.Equals("registration_date"))
                return SortByEnum.RegistrationDate;

            if (value.Equals("expiration_date"))
                return SortByEnum.ExpirationDate;

            if (value.Equals("risk_score"))
                return SortByEnum.RiskScore;

            if (value.Equals("domain_name"))
                return SortByEnum.DomainName;

            if (value.Equals("asn"))
                return SortByEnum.Asn;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SortByEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SortByEnumToJsonValue(SortByEnum? value)
        {
            if (value == SortByEnum.RegistrationDate)
                return "registration_date";

            if (value == SortByEnum.ExpirationDate)
                return "expiration_date";

            if (value == SortByEnum.RiskScore)
                return "risk_score";

            if (value == SortByEnum.DomainName)
                return "domain_name";

            if (value == SortByEnum.Asn)
                return "asn";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SortBy
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SortByEnum?> SortByOption { get; private set; }

        /// <summary>
        /// Field to sort results by
        /// </summary>
        /// <value>Field to sort results by</value>
        /* <example>registration_date</example> */
        [JsonPropertyName("sort_by")]
        public SortByEnum? SortBy { get { return this.SortByOption; } set { this.SortByOption = new(value); } }

        /// <summary>
        /// Sort order
        /// </summary>
        /// <value>Sort order</value>
        public enum SortOrderEnum
        {
            /// <summary>
            /// Enum Asc for value: asc
            /// </summary>
            Asc = 1,

            /// <summary>
            /// Enum Desc for value: desc
            /// </summary>
            Desc = 2
        }

        /// <summary>
        /// Returns a <see cref="SortOrderEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SortOrderEnum SortOrderEnumFromString(string value)
        {
            if (value.Equals("asc"))
                return SortOrderEnum.Asc;

            if (value.Equals("desc"))
                return SortOrderEnum.Desc;

            throw new NotImplementedException($"Could not convert value to type SortOrderEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SortOrderEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SortOrderEnum? SortOrderEnumFromStringOrDefault(string value)
        {
            if (value.Equals("asc"))
                return SortOrderEnum.Asc;

            if (value.Equals("desc"))
                return SortOrderEnum.Desc;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SortOrderEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SortOrderEnumToJsonValue(SortOrderEnum? value)
        {
            if (value == SortOrderEnum.Asc)
                return "asc";

            if (value == SortOrderEnum.Desc)
                return "desc";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SortOrder
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SortOrderEnum?> SortOrderOption { get; private set; }

        /// <summary>
        /// Sort order
        /// </summary>
        /// <value>Sort order</value>
        /* <example>desc</example> */
        [JsonPropertyName("sort_order")]
        public SortOrderEnum? SortOrder { get { return this.SortOrderOption; } set { this.SortOrderOption = new(value); } }

        /// <summary>
        /// Search query using field:value syntax. Supports multiple fields combined with logical operators.  **Supported Fields:** - WHOIS: &#x60;registrantCompany&#x60;, &#x60;registrantName&#x60;, &#x60;registrantEmail&#x60;, &#x60;registrar&#x60; - Network: &#x60;asn&#x60;, &#x60;network&#x60;, &#x60;country_code&#x60;, &#x60;city&#x60; - Domain: &#x60;tld&#x60;, &#x60;domain_length&#x60;, &#x60;creation_date&#x60;  **Examples:** - &#x60;registrantCompany:EvilCorp&#x60; - Find domains by registrant - &#x60;asn:15169 AND country_code:US&#x60; - Complex query with AND - &#x60;registrantEmail:admin@example.com&#x60; - Find domains by email 
        /// </summary>
        /// <value>Search query using field:value syntax. Supports multiple fields combined with logical operators.  **Supported Fields:** - WHOIS: &#x60;registrantCompany&#x60;, &#x60;registrantName&#x60;, &#x60;registrantEmail&#x60;, &#x60;registrar&#x60; - Network: &#x60;asn&#x60;, &#x60;network&#x60;, &#x60;country_code&#x60;, &#x60;city&#x60; - Domain: &#x60;tld&#x60;, &#x60;domain_length&#x60;, &#x60;creation_date&#x60;  **Examples:** - &#x60;registrantCompany:EvilCorp&#x60; - Find domains by registrant - &#x60;asn:15169 AND country_code:US&#x60; - Complex query with AND - &#x60;registrantEmail:admin@example.com&#x60; - Find domains by email </value>
        /* <example>registrantCompany:Google AND country_code:US</example> */
        [JsonPropertyName("query")]
        public string Query { get; set; }

        /// <summary>
        /// Used to track the state of Filters
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, string>> FiltersOption { get; private set; }

        /// <summary>
        /// Additional filters to narrow down search results. Applied after query matching.
        /// </summary>
        /// <value>Additional filters to narrow down search results. Applied after query matching.</value>
        /* <example>{&quot;risk_score_min&quot;:&quot;5.0&quot;,&quot;status&quot;:&quot;active&quot;}</example> */
        [JsonPropertyName("filters")]
        public Dictionary<string, string> Filters { get { return this.FiltersOption; } set { this.FiltersOption = new(value); } }

        /// <summary>
        /// Used to track the state of Limit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LimitOption { get; private set; }

        /// <summary>
        /// Maximum number of results to return per page
        /// </summary>
        /// <value>Maximum number of results to return per page</value>
        /* <example>100</example> */
        [JsonPropertyName("limit")]
        public int? Limit { get { return this.LimitOption; } set { this.LimitOption = new(value); } }

        /// <summary>
        /// Used to track the state of Offset
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OffsetOption { get; private set; }

        /// <summary>
        /// Number of results to skip for pagination. Use with limit for paginated results.
        /// </summary>
        /// <value>Number of results to skip for pagination. Use with limit for paginated results.</value>
        /* <example>0</example> */
        [JsonPropertyName("offset")]
        public int? Offset { get { return this.OffsetOption; } set { this.OffsetOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchRequest {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Limit (int) maximum
            if (this.LimitOption.IsSet && this.LimitOption.Value > (int)1000)
            {
                yield return new ValidationResult("Invalid value for Limit, must be a value less than or equal to 1000.", new [] { "Limit" });
            }

            // Limit (int) minimum
            if (this.LimitOption.IsSet && this.LimitOption.Value < (int)1)
            {
                yield return new ValidationResult("Invalid value for Limit, must be a value greater than or equal to 1.", new [] { "Limit" });
            }

            // Offset (int) minimum
            if (this.OffsetOption.IsSet && this.OffsetOption.Value < (int)0)
            {
                yield return new ValidationResult("Invalid value for Offset, must be a value greater than or equal to 0.", new [] { "Offset" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SearchRequest" />
    /// </summary>
    public class SearchRequestJsonConverter : JsonConverter<SearchRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="SearchRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SearchRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> query = default;
            Option<Dictionary<string, string>> filters = default;
            Option<int?> limit = default;
            Option<int?> offset = default;
            Option<SearchRequest.SortByEnum?> sortBy = default;
            Option<SearchRequest.SortOrderEnum?> sortOrder = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "query":
                            query = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "filters":
                            filters = new Option<Dictionary<string, string>>(JsonSerializer.Deserialize<Dictionary<string, string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "limit":
                            limit = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "offset":
                            offset = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "sort_by":
                            string sortByRawValue = utf8JsonReader.GetString();
                            if (sortByRawValue != null)
                                sortBy = new Option<SearchRequest.SortByEnum?>(SearchRequest.SortByEnumFromStringOrDefault(sortByRawValue));
                            break;
                        case "sort_order":
                            string sortOrderRawValue = utf8JsonReader.GetString();
                            if (sortOrderRawValue != null)
                                sortOrder = new Option<SearchRequest.SortOrderEnum?>(SearchRequest.SortOrderEnumFromStringOrDefault(sortOrderRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!query.IsSet)
                throw new ArgumentException("Property is required for class SearchRequest.", nameof(query));

            if (query.IsSet && query.Value == null)
                throw new ArgumentNullException(nameof(query), "Property is not nullable for class SearchRequest.");

            if (filters.IsSet && filters.Value == null)
                throw new ArgumentNullException(nameof(filters), "Property is not nullable for class SearchRequest.");

            if (limit.IsSet && limit.Value == null)
                throw new ArgumentNullException(nameof(limit), "Property is not nullable for class SearchRequest.");

            if (offset.IsSet && offset.Value == null)
                throw new ArgumentNullException(nameof(offset), "Property is not nullable for class SearchRequest.");

            if (sortBy.IsSet && sortBy.Value == null)
                throw new ArgumentNullException(nameof(sortBy), "Property is not nullable for class SearchRequest.");

            if (sortOrder.IsSet && sortOrder.Value == null)
                throw new ArgumentNullException(nameof(sortOrder), "Property is not nullable for class SearchRequest.");

            return new SearchRequest(query.Value, filters, limit, offset, sortBy, sortOrder);
        }

        /// <summary>
        /// Serializes a <see cref="SearchRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SearchRequest searchRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, searchRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SearchRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="searchRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SearchRequest searchRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (searchRequest.Query == null)
                throw new ArgumentNullException(nameof(searchRequest.Query), "Property is required for class SearchRequest.");

            if (searchRequest.FiltersOption.IsSet && searchRequest.Filters == null)
                throw new ArgumentNullException(nameof(searchRequest.Filters), "Property is required for class SearchRequest.");

            writer.WriteString("query", searchRequest.Query);

            if (searchRequest.FiltersOption.IsSet)
            {
                writer.WritePropertyName("filters");
                JsonSerializer.Serialize(writer, searchRequest.Filters, jsonSerializerOptions);
            }
            if (searchRequest.LimitOption.IsSet)
                writer.WriteNumber("limit", searchRequest.LimitOption.Value.Value);

            if (searchRequest.OffsetOption.IsSet)
                writer.WriteNumber("offset", searchRequest.OffsetOption.Value.Value);

            var sortByRawValue = SearchRequest.SortByEnumToJsonValue(searchRequest.SortByOption.Value.Value);
            writer.WriteString("sort_by", sortByRawValue);
            var sortOrderRawValue = SearchRequest.SortOrderEnumToJsonValue(searchRequest.SortOrderOption.Value.Value);
            writer.WriteString("sort_order", sortOrderRawValue);
        }
    }
}
