// <auto-generated>
/*
 * Whisper API v1
 *
 * <h2>The Foundational Intelligence Layer for the Internet</h2> <p>The Whisper API provides comprehensive, real-time intelligence on any internet asset. By connecting billions of data points across live internet routing, historical registration records, and deep resolution data, our API moves beyond simple enrichment to deliver predictive, context-rich insights.</p> <p>This document is the single source of truth for our v1 API. It is designed for security experts, developers, and automated systems to understand and leverage the full power of our platform.</p>  <h3>üöÄ Quick Start</h3> <p><b>1. Get your API key:</b> <a href=\"https://dash.whisper.security\">Sign up at dash.whisper.security</a></p> <p><b>2. Make your first request:</b></p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" https://api.whisper.security/v1/indicators/ip/8.8.8.8</code></pre> <p><b>3. Explore the API:</b> Use the \"Try it out\" button in each endpoint below to test interactively.</p>  <h3>üéØ Key Features</h3> <ul>     <li><b>Unified & Simple:</b> Small set of powerful, resource-oriented endpoints</li>     <li><b>Performant by Design:</b> Asynchronous-first with strategic caching (&lt;500ms typical response)</li>     <li><b>Workflow-Oriented:</b> Built for real-world security operations, not just data dumps</li>     <li><b>Comprehensive:</b> IP, Domain, DNS, WHOIS, Routing, Geolocation, Screenshots, Monitoring</li> </ul>  <h3>‚ö° Performance Targets</h3> <table>     <tr><th>Endpoint Type</th><th>Response Time</th><th>Use Case</th></tr>     <tr><td>Geolocation</td><td>&lt;150ms</td><td>Real-time fraud detection</td></tr>     <tr><td>Single Indicator</td><td>&lt;500ms</td><td>Incident response enrichment</td></tr>     <tr><td>With Routing Data</td><td>&lt;2s (cached: 200ms)</td><td>Deep network analysis</td></tr>     <tr><td>Bulk Operations</td><td>5-30s</td><td>Batch log enrichment</td></tr>     <tr><td>Search/Discovery</td><td>10-60s</td><td>Threat hunting</td></tr> </table>  <h3>üîê Authentication</h3> <p>All endpoints require Bearer token authentication. Click the <b>\"Authorize\"</b> button above and enter your API key.</p> <pre><code>Authorization: Bearer wsk_live_1234567890abcdef</code></pre>  <h3>üìä Rate Limits</h3> <table>     <tr><th>Category</th><th>Limit</th></tr>     <tr><td>Standard Enrichment</td><td>100 req/min</td></tr>     <tr><td>Bulk Operations</td><td>10 req/min</td></tr>     <tr><td>Search/Discovery</td><td>5 req/min</td></tr>     <tr><td>Screenshots</td><td>10 req/min</td></tr> </table> <p><i>Rate limits return HTTP 429. Retry after the time specified in the <code>Retry-After</code> header.</i></p>  <h3>üìö Resources</h3> <ul>     <li><a href=\"https://docs.whisper.security\">Full Documentation</a></li>     <li><a href=\"https://docs.whisper.security/quickstart\">Quick Start Guide</a></li>     <li><a href=\"https://docs.whisper.security/examples\">Code Examples</a></li>     <li><a href=\"https://whisper.security/support\">API Support</a></li> </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Whisper.Api.Sdk.Client;

namespace Whisper.Api.Sdk.Model
{
    /// <summary>
    /// Configuration for performing infrastructure discovery and security scanning
    /// </summary>
    public partial class InfraScanRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InfraScanRequest" /> class.
        /// </summary>
        /// <param name="target">The target to scan (IP, CIDR, domain, or ASN)</param>
        /// <param name="targetType">Type of target being scanned</param>
        /// <param name="scanTypes">Types of scans to perform</param>
        /// <param name="scanDepth">Scan depth level (default to ScanDepthEnum.Medium)</param>
        /// <param name="timeout">Maximum scan duration in seconds (default to 300)</param>
        /// <param name="options">options</param>
        [JsonConstructor]
        public InfraScanRequest(string target, TargetTypeEnum targetType, Option<HashSet<string>> scanTypes = default, Option<ScanDepthEnum?> scanDepth = default, Option<int?> timeout = default, Option<ScanOptions> options = default)
        {
            Target = target;
            TargetType = targetType;
            ScanTypesOption = scanTypes;
            ScanDepthOption = scanDepth;
            TimeoutOption = timeout;
            OptionsOption = options;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of target being scanned
        /// </summary>
        /// <value>Type of target being scanned</value>
        public enum TargetTypeEnum
        {
            /// <summary>
            /// Enum Ip for value: ip
            /// </summary>
            Ip = 1,

            /// <summary>
            /// Enum Cidr for value: cidr
            /// </summary>
            Cidr = 2,

            /// <summary>
            /// Enum Domain for value: domain
            /// </summary>
            Domain = 3,

            /// <summary>
            /// Enum Asn for value: asn
            /// </summary>
            Asn = 4
        }

        /// <summary>
        /// Returns a <see cref="TargetTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TargetTypeEnum TargetTypeEnumFromString(string value)
        {
            if (value.Equals("ip"))
                return TargetTypeEnum.Ip;

            if (value.Equals("cidr"))
                return TargetTypeEnum.Cidr;

            if (value.Equals("domain"))
                return TargetTypeEnum.Domain;

            if (value.Equals("asn"))
                return TargetTypeEnum.Asn;

            throw new NotImplementedException($"Could not convert value to type TargetTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TargetTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TargetTypeEnum? TargetTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ip"))
                return TargetTypeEnum.Ip;

            if (value.Equals("cidr"))
                return TargetTypeEnum.Cidr;

            if (value.Equals("domain"))
                return TargetTypeEnum.Domain;

            if (value.Equals("asn"))
                return TargetTypeEnum.Asn;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TargetTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TargetTypeEnumToJsonValue(TargetTypeEnum value)
        {
            if (value == TargetTypeEnum.Ip)
                return "ip";

            if (value == TargetTypeEnum.Cidr)
                return "cidr";

            if (value == TargetTypeEnum.Domain)
                return "domain";

            if (value == TargetTypeEnum.Asn)
                return "asn";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Type of target being scanned
        /// </summary>
        /// <value>Type of target being scanned</value>
        /* <example>cidr</example> */
        [JsonPropertyName("target_type")]
        public TargetTypeEnum TargetType { get; set; }

        /// <summary>
        /// Scan depth level
        /// </summary>
        /// <value>Scan depth level</value>
        public enum ScanDepthEnum
        {
            /// <summary>
            /// Enum Light for value: light
            /// </summary>
            Light = 1,

            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            Medium = 2,

            /// <summary>
            /// Enum Deep for value: deep
            /// </summary>
            Deep = 3
        }

        /// <summary>
        /// Returns a <see cref="ScanDepthEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static ScanDepthEnum ScanDepthEnumFromString(string value)
        {
            if (value.Equals("light"))
                return ScanDepthEnum.Light;

            if (value.Equals("medium"))
                return ScanDepthEnum.Medium;

            if (value.Equals("deep"))
                return ScanDepthEnum.Deep;

            throw new NotImplementedException($"Could not convert value to type ScanDepthEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="ScanDepthEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static ScanDepthEnum? ScanDepthEnumFromStringOrDefault(string value)
        {
            if (value.Equals("light"))
                return ScanDepthEnum.Light;

            if (value.Equals("medium"))
                return ScanDepthEnum.Medium;

            if (value.Equals("deep"))
                return ScanDepthEnum.Deep;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="ScanDepthEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ScanDepthEnumToJsonValue(ScanDepthEnum? value)
        {
            if (value == ScanDepthEnum.Light)
                return "light";

            if (value == ScanDepthEnum.Medium)
                return "medium";

            if (value == ScanDepthEnum.Deep)
                return "deep";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of ScanDepth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ScanDepthEnum?> ScanDepthOption { get; private set; }

        /// <summary>
        /// Scan depth level
        /// </summary>
        /// <value>Scan depth level</value>
        /* <example>medium</example> */
        [JsonPropertyName("scan_depth")]
        public ScanDepthEnum? ScanDepth { get { return this.ScanDepthOption; } set { this.ScanDepthOption = new(value); } }

        /// <summary>
        /// The target to scan (IP, CIDR, domain, or ASN)
        /// </summary>
        /// <value>The target to scan (IP, CIDR, domain, or ASN)</value>
        /* <example>192.168.1.0/24</example> */
        [JsonPropertyName("target")]
        public string Target { get; set; }

        /// <summary>
        /// Used to track the state of ScanTypes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<HashSet<string>> ScanTypesOption { get; private set; }

        /// <summary>
        /// Types of scans to perform
        /// </summary>
        /// <value>Types of scans to perform</value>
        /* <example>[&quot;port_scan&quot;,&quot;service_discovery&quot;,&quot;vulnerability_assessment&quot;]</example> */
        [JsonPropertyName("scan_types")]
        public HashSet<string> ScanTypes { get { return this.ScanTypesOption; } set { this.ScanTypesOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timeout
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TimeoutOption { get; private set; }

        /// <summary>
        /// Maximum scan duration in seconds
        /// </summary>
        /// <value>Maximum scan duration in seconds</value>
        /* <example>300</example> */
        [JsonPropertyName("timeout")]
        public int? Timeout { get { return this.TimeoutOption; } set { this.TimeoutOption = new(value); } }

        /// <summary>
        /// Used to track the state of Options
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ScanOptions> OptionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [JsonPropertyName("options")]
        public ScanOptions Options { get { return this.OptionsOption; } set { this.OptionsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InfraScanRequest {\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  TargetType: ").Append(TargetType).Append("\n");
            sb.Append("  ScanTypes: ").Append(ScanTypes).Append("\n");
            sb.Append("  ScanDepth: ").Append(ScanDepth).Append("\n");
            sb.Append("  Timeout: ").Append(Timeout).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Timeout (int) maximum
            if (this.TimeoutOption.IsSet && this.TimeoutOption.Value > (int)3600)
            {
                yield return new ValidationResult("Invalid value for Timeout, must be a value less than or equal to 3600.", new [] { "Timeout" });
            }

            // Timeout (int) minimum
            if (this.TimeoutOption.IsSet && this.TimeoutOption.Value < (int)60)
            {
                yield return new ValidationResult("Invalid value for Timeout, must be a value greater than or equal to 60.", new [] { "Timeout" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InfraScanRequest" />
    /// </summary>
    public class InfraScanRequestJsonConverter : JsonConverter<InfraScanRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="InfraScanRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InfraScanRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> target = default;
            Option<InfraScanRequest.TargetTypeEnum?> targetType = default;
            Option<HashSet<string>> scanTypes = default;
            Option<InfraScanRequest.ScanDepthEnum?> scanDepth = default;
            Option<int?> timeout = default;
            Option<ScanOptions> options = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "target":
                            target = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "target_type":
                            string targetTypeRawValue = utf8JsonReader.GetString();
                            if (targetTypeRawValue != null)
                                targetType = new Option<InfraScanRequest.TargetTypeEnum?>(InfraScanRequest.TargetTypeEnumFromStringOrDefault(targetTypeRawValue));
                            break;
                        case "scan_types":
                            scanTypes = new Option<HashSet<string>>(JsonSerializer.Deserialize<HashSet<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "scan_depth":
                            string scanDepthRawValue = utf8JsonReader.GetString();
                            if (scanDepthRawValue != null)
                                scanDepth = new Option<InfraScanRequest.ScanDepthEnum?>(InfraScanRequest.ScanDepthEnumFromStringOrDefault(scanDepthRawValue));
                            break;
                        case "timeout":
                            timeout = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "options":
                            options = new Option<ScanOptions>(JsonSerializer.Deserialize<ScanOptions>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!target.IsSet)
                throw new ArgumentException("Property is required for class InfraScanRequest.", nameof(target));

            if (!targetType.IsSet)
                throw new ArgumentException("Property is required for class InfraScanRequest.", nameof(targetType));

            if (target.IsSet && target.Value == null)
                throw new ArgumentNullException(nameof(target), "Property is not nullable for class InfraScanRequest.");

            if (targetType.IsSet && targetType.Value == null)
                throw new ArgumentNullException(nameof(targetType), "Property is not nullable for class InfraScanRequest.");

            if (scanTypes.IsSet && scanTypes.Value == null)
                throw new ArgumentNullException(nameof(scanTypes), "Property is not nullable for class InfraScanRequest.");

            if (scanDepth.IsSet && scanDepth.Value == null)
                throw new ArgumentNullException(nameof(scanDepth), "Property is not nullable for class InfraScanRequest.");

            if (timeout.IsSet && timeout.Value == null)
                throw new ArgumentNullException(nameof(timeout), "Property is not nullable for class InfraScanRequest.");

            if (options.IsSet && options.Value == null)
                throw new ArgumentNullException(nameof(options), "Property is not nullable for class InfraScanRequest.");

            return new InfraScanRequest(target.Value, targetType.Value.Value, scanTypes, scanDepth, timeout, options);
        }

        /// <summary>
        /// Serializes a <see cref="InfraScanRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="infraScanRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InfraScanRequest infraScanRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, infraScanRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InfraScanRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="infraScanRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InfraScanRequest infraScanRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (infraScanRequest.Target == null)
                throw new ArgumentNullException(nameof(infraScanRequest.Target), "Property is required for class InfraScanRequest.");

            if (infraScanRequest.ScanTypesOption.IsSet && infraScanRequest.ScanTypes == null)
                throw new ArgumentNullException(nameof(infraScanRequest.ScanTypes), "Property is required for class InfraScanRequest.");

            if (infraScanRequest.OptionsOption.IsSet && infraScanRequest.Options == null)
                throw new ArgumentNullException(nameof(infraScanRequest.Options), "Property is required for class InfraScanRequest.");

            writer.WriteString("target", infraScanRequest.Target);

            var targetTypeRawValue = InfraScanRequest.TargetTypeEnumToJsonValue(infraScanRequest.TargetType);
            writer.WriteString("target_type", targetTypeRawValue);
            if (infraScanRequest.ScanTypesOption.IsSet)
            {
                writer.WritePropertyName("scan_types");
                JsonSerializer.Serialize(writer, infraScanRequest.ScanTypes, jsonSerializerOptions);
            }
            var scanDepthRawValue = InfraScanRequest.ScanDepthEnumToJsonValue(infraScanRequest.ScanDepthOption.Value.Value);
            writer.WriteString("scan_depth", scanDepthRawValue);
            if (infraScanRequest.TimeoutOption.IsSet)
                writer.WriteNumber("timeout", infraScanRequest.TimeoutOption.Value.Value);

            if (infraScanRequest.OptionsOption.IsSet)
            {
                writer.WritePropertyName("options");
                JsonSerializer.Serialize(writer, infraScanRequest.Options, jsonSerializerOptions);
            }
        }
    }
}
