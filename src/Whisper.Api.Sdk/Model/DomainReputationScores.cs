// <auto-generated>
/*
 * Whisper API v1
 *
 * <h2>The Foundational Intelligence Layer for the Internet</h2> <p>The Whisper API provides comprehensive, real-time intelligence on any internet asset. By connecting billions of data points across live internet routing, historical registration records, and deep resolution data, our API moves beyond simple enrichment to deliver predictive, context-rich insights.</p> <p>This document is the single source of truth for our v1 API. It is designed for security experts, developers, and automated systems to understand and leverage the full power of our platform.</p>  <h3>üöÄ Quick Start</h3> <p><b>1. Get your API key:</b> <a href=\"https://dash.whisper.security\">Sign up at dash.whisper.security</a></p> <p><b>2. Make your first request:</b></p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" https://api.whisper.security/v1/indicators/ip/8.8.8.8</code></pre> <p><b>3. Explore the API:</b> Use the \"Try it out\" button in each endpoint below to test interactively.</p>  <h3>üéØ Key Features</h3> <ul>     <li><b>Unified & Simple:</b> Small set of powerful, resource-oriented endpoints</li>     <li><b>Performant by Design:</b> Asynchronous-first with strategic caching (&lt;500ms typical response)</li>     <li><b>Workflow-Oriented:</b> Built for real-world security operations, not just data dumps</li>     <li><b>Comprehensive:</b> IP, Domain, DNS, WHOIS, Routing, Geolocation, Screenshots, Monitoring</li> </ul>  <h3>‚ö° Performance Targets</h3> <table>     <tr><th>Endpoint Type</th><th>Response Time</th><th>Use Case</th></tr>     <tr><td>Geolocation</td><td>&lt;150ms</td><td>Real-time fraud detection</td></tr>     <tr><td>Single Indicator</td><td>&lt;500ms</td><td>Incident response enrichment</td></tr>     <tr><td>With Routing Data</td><td>&lt;2s (cached: 200ms)</td><td>Deep network analysis</td></tr>     <tr><td>Bulk Operations</td><td>5-30s</td><td>Batch log enrichment</td></tr>     <tr><td>Search/Discovery</td><td>10-60s</td><td>Threat hunting</td></tr> </table>  <h3>üîê Authentication</h3> <p>All endpoints require Bearer token authentication. Click the <b>\"Authorize\"</b> button above and enter your API key.</p> <pre><code>Authorization: Bearer wsk_live_1234567890abcdef</code></pre>  <h3>üìä Rate Limits</h3> <table>     <tr><th>Category</th><th>Limit</th></tr>     <tr><td>Standard Enrichment</td><td>100 req/min</td></tr>     <tr><td>Bulk Operations</td><td>10 req/min</td></tr>     <tr><td>Search/Discovery</td><td>5 req/min</td></tr>     <tr><td>Screenshots</td><td>10 req/min</td></tr> </table> <p><i>Rate limits return HTTP 429. Retry after the time specified in the <code>Retry-After</code> header.</i></p>  <h3>üìö Resources</h3> <ul>     <li><a href=\"https://docs.whisper.security\">Full Documentation</a></li>     <li><a href=\"https://docs.whisper.security/quickstart\">Quick Start Guide</a></li>     <li><a href=\"https://docs.whisper.security/examples\">Code Examples</a></li>     <li><a href=\"https://whisper.security/support\">API Support</a></li> </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Whisper.Api.Sdk.Client;

namespace Whisper.Api.Sdk.Model
{
    /// <summary>
    /// Domain reputation calculated from infrastructure IP scores
    /// </summary>
    public partial class DomainReputationScores : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainReputationScores" /> class.
        /// </summary>
        /// <param name="overallScore">Overall reputation score (0-100, higher &#x3D; more suspicious)</param>
        /// <param name="riskLevel">Risk classification based on overall score</param>
        /// <param name="domainIpScore">Average IP reputation score for domain&#39;s A records</param>
        /// <param name="nameserverIpScore">Average IP reputation score for nameserver IPs</param>
        /// <param name="mailserverIpScore">Average IP reputation score for mail server IPs</param>
        /// <param name="details">details</param>
        /// <param name="scoringMethod">Scoring methodology used</param>
        /// <param name="weights">Weighting strategy applied to infrastructure components</param>
        [JsonConstructor]
        public DomainReputationScores(Option<double?> overallScore = default, Option<RiskLevelEnum?> riskLevel = default, Option<double?> domainIpScore = default, Option<double?> nameserverIpScore = default, Option<double?> mailserverIpScore = default, Option<DomainReputationDetails> details = default, Option<string> scoringMethod = default, Option<Dictionary<string, double>> weights = default)
        {
            OverallScoreOption = overallScore;
            RiskLevelOption = riskLevel;
            DomainIpScoreOption = domainIpScore;
            NameserverIpScoreOption = nameserverIpScore;
            MailserverIpScoreOption = mailserverIpScore;
            DetailsOption = details;
            ScoringMethodOption = scoringMethod;
            WeightsOption = weights;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Risk classification based on overall score
        /// </summary>
        /// <value>Risk classification based on overall score</value>
        public enum RiskLevelEnum
        {
            /// <summary>
            /// Enum Clean for value: clean
            /// </summary>
            Clean = 1,

            /// <summary>
            /// Enum LowRisk for value: low_risk
            /// </summary>
            LowRisk = 2,

            /// <summary>
            /// Enum MediumRisk for value: medium_risk
            /// </summary>
            MediumRisk = 3,

            /// <summary>
            /// Enum HighRisk for value: high_risk
            /// </summary>
            HighRisk = 4,

            /// <summary>
            /// Enum Malicious for value: malicious
            /// </summary>
            Malicious = 5
        }

        /// <summary>
        /// Returns a <see cref="RiskLevelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RiskLevelEnum RiskLevelEnumFromString(string value)
        {
            if (value.Equals("clean"))
                return RiskLevelEnum.Clean;

            if (value.Equals("low_risk"))
                return RiskLevelEnum.LowRisk;

            if (value.Equals("medium_risk"))
                return RiskLevelEnum.MediumRisk;

            if (value.Equals("high_risk"))
                return RiskLevelEnum.HighRisk;

            if (value.Equals("malicious"))
                return RiskLevelEnum.Malicious;

            throw new NotImplementedException($"Could not convert value to type RiskLevelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RiskLevelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RiskLevelEnum? RiskLevelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("clean"))
                return RiskLevelEnum.Clean;

            if (value.Equals("low_risk"))
                return RiskLevelEnum.LowRisk;

            if (value.Equals("medium_risk"))
                return RiskLevelEnum.MediumRisk;

            if (value.Equals("high_risk"))
                return RiskLevelEnum.HighRisk;

            if (value.Equals("malicious"))
                return RiskLevelEnum.Malicious;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RiskLevelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RiskLevelEnumToJsonValue(RiskLevelEnum? value)
        {
            if (value == RiskLevelEnum.Clean)
                return "clean";

            if (value == RiskLevelEnum.LowRisk)
                return "low_risk";

            if (value == RiskLevelEnum.MediumRisk)
                return "medium_risk";

            if (value == RiskLevelEnum.HighRisk)
                return "high_risk";

            if (value == RiskLevelEnum.Malicious)
                return "malicious";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of RiskLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RiskLevelEnum?> RiskLevelOption { get; private set; }

        /// <summary>
        /// Risk classification based on overall score
        /// </summary>
        /// <value>Risk classification based on overall score</value>
        /* <example>medium_risk</example> */
        [JsonPropertyName("risk_level")]
        public RiskLevelEnum? RiskLevel { get { return this.RiskLevelOption; } set { this.RiskLevelOption = new(value); } }

        /// <summary>
        /// Used to track the state of OverallScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> OverallScoreOption { get; private set; }

        /// <summary>
        /// Overall reputation score (0-100, higher &#x3D; more suspicious)
        /// </summary>
        /// <value>Overall reputation score (0-100, higher &#x3D; more suspicious)</value>
        /* <example>51.3</example> */
        [JsonPropertyName("overall_score")]
        public double? OverallScore { get { return this.OverallScoreOption; } set { this.OverallScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of DomainIpScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> DomainIpScoreOption { get; private set; }

        /// <summary>
        /// Average IP reputation score for domain&#39;s A records
        /// </summary>
        /// <value>Average IP reputation score for domain&#39;s A records</value>
        /* <example>85.5</example> */
        [JsonPropertyName("domain_ip_score")]
        public double? DomainIpScore { get { return this.DomainIpScoreOption; } set { this.DomainIpScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of NameserverIpScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> NameserverIpScoreOption { get; private set; }

        /// <summary>
        /// Average IP reputation score for nameserver IPs
        /// </summary>
        /// <value>Average IP reputation score for nameserver IPs</value>
        /* <example>45.2</example> */
        [JsonPropertyName("nameserver_ip_score")]
        public double? NameserverIpScore { get { return this.NameserverIpScoreOption; } set { this.NameserverIpScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of MailserverIpScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<double?> MailserverIpScoreOption { get; private set; }

        /// <summary>
        /// Average IP reputation score for mail server IPs
        /// </summary>
        /// <value>Average IP reputation score for mail server IPs</value>
        /* <example>32.1</example> */
        [JsonPropertyName("mailserver_ip_score")]
        public double? MailserverIpScore { get { return this.MailserverIpScoreOption; } set { this.MailserverIpScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of Details
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DomainReputationDetails> DetailsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [JsonPropertyName("details")]
        public DomainReputationDetails Details { get { return this.DetailsOption; } set { this.DetailsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ScoringMethod
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ScoringMethodOption { get; private set; }

        /// <summary>
        /// Scoring methodology used
        /// </summary>
        /// <value>Scoring methodology used</value>
        /* <example>composite_infrastructure</example> */
        [JsonPropertyName("scoring_method")]
        public string ScoringMethod { get { return this.ScoringMethodOption; } set { this.ScoringMethodOption = new(value); } }

        /// <summary>
        /// Used to track the state of Weights
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, double>> WeightsOption { get; private set; }

        /// <summary>
        /// Weighting strategy applied to infrastructure components
        /// </summary>
        /// <value>Weighting strategy applied to infrastructure components</value>
        [JsonPropertyName("weights")]
        public Dictionary<string, double> Weights { get { return this.WeightsOption; } set { this.WeightsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DomainReputationScores {\n");
            sb.Append("  OverallScore: ").Append(OverallScore).Append("\n");
            sb.Append("  RiskLevel: ").Append(RiskLevel).Append("\n");
            sb.Append("  DomainIpScore: ").Append(DomainIpScore).Append("\n");
            sb.Append("  NameserverIpScore: ").Append(NameserverIpScore).Append("\n");
            sb.Append("  MailserverIpScore: ").Append(MailserverIpScore).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  ScoringMethod: ").Append(ScoringMethod).Append("\n");
            sb.Append("  Weights: ").Append(Weights).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // OverallScore (double) maximum
            if (this.OverallScoreOption.IsSet && this.OverallScoreOption.Value > (double)100)
            {
                yield return new ValidationResult("Invalid value for OverallScore, must be a value less than or equal to 100.", new [] { "OverallScore" });
            }

            // OverallScore (double) minimum
            if (this.OverallScoreOption.IsSet && this.OverallScoreOption.Value < (double)0)
            {
                yield return new ValidationResult("Invalid value for OverallScore, must be a value greater than or equal to 0.", new [] { "OverallScore" });
            }

            // DomainIpScore (double) maximum
            if (this.DomainIpScoreOption.IsSet && this.DomainIpScoreOption.Value > (double)100)
            {
                yield return new ValidationResult("Invalid value for DomainIpScore, must be a value less than or equal to 100.", new [] { "DomainIpScore" });
            }

            // DomainIpScore (double) minimum
            if (this.DomainIpScoreOption.IsSet && this.DomainIpScoreOption.Value < (double)0)
            {
                yield return new ValidationResult("Invalid value for DomainIpScore, must be a value greater than or equal to 0.", new [] { "DomainIpScore" });
            }

            // NameserverIpScore (double) maximum
            if (this.NameserverIpScoreOption.IsSet && this.NameserverIpScoreOption.Value > (double)100)
            {
                yield return new ValidationResult("Invalid value for NameserverIpScore, must be a value less than or equal to 100.", new [] { "NameserverIpScore" });
            }

            // NameserverIpScore (double) minimum
            if (this.NameserverIpScoreOption.IsSet && this.NameserverIpScoreOption.Value < (double)0)
            {
                yield return new ValidationResult("Invalid value for NameserverIpScore, must be a value greater than or equal to 0.", new [] { "NameserverIpScore" });
            }

            // MailserverIpScore (double) maximum
            if (this.MailserverIpScoreOption.IsSet && this.MailserverIpScoreOption.Value > (double)100)
            {
                yield return new ValidationResult("Invalid value for MailserverIpScore, must be a value less than or equal to 100.", new [] { "MailserverIpScore" });
            }

            // MailserverIpScore (double) minimum
            if (this.MailserverIpScoreOption.IsSet && this.MailserverIpScoreOption.Value < (double)0)
            {
                yield return new ValidationResult("Invalid value for MailserverIpScore, must be a value greater than or equal to 0.", new [] { "MailserverIpScore" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DomainReputationScores" />
    /// </summary>
    public class DomainReputationScoresJsonConverter : JsonConverter<DomainReputationScores>
    {
        /// <summary>
        /// Deserializes json to <see cref="DomainReputationScores" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DomainReputationScores Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<double?> overallScore = default;
            Option<DomainReputationScores.RiskLevelEnum?> riskLevel = default;
            Option<double?> domainIpScore = default;
            Option<double?> nameserverIpScore = default;
            Option<double?> mailserverIpScore = default;
            Option<DomainReputationDetails> details = default;
            Option<string> scoringMethod = default;
            Option<Dictionary<string, double>> weights = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "overall_score":
                            overallScore = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "risk_level":
                            string riskLevelRawValue = utf8JsonReader.GetString();
                            if (riskLevelRawValue != null)
                                riskLevel = new Option<DomainReputationScores.RiskLevelEnum?>(DomainReputationScores.RiskLevelEnumFromStringOrDefault(riskLevelRawValue));
                            break;
                        case "domain_ip_score":
                            domainIpScore = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "nameserver_ip_score":
                            nameserverIpScore = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "mailserver_ip_score":
                            mailserverIpScore = new Option<double?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (double?)null : utf8JsonReader.GetDouble());
                            break;
                        case "details":
                            details = new Option<DomainReputationDetails>(JsonSerializer.Deserialize<DomainReputationDetails>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "scoring_method":
                            scoringMethod = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "weights":
                            weights = new Option<Dictionary<string, double>>(JsonSerializer.Deserialize<Dictionary<string, double>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (overallScore.IsSet && overallScore.Value == null)
                throw new ArgumentNullException(nameof(overallScore), "Property is not nullable for class DomainReputationScores.");

            if (riskLevel.IsSet && riskLevel.Value == null)
                throw new ArgumentNullException(nameof(riskLevel), "Property is not nullable for class DomainReputationScores.");

            if (domainIpScore.IsSet && domainIpScore.Value == null)
                throw new ArgumentNullException(nameof(domainIpScore), "Property is not nullable for class DomainReputationScores.");

            if (nameserverIpScore.IsSet && nameserverIpScore.Value == null)
                throw new ArgumentNullException(nameof(nameserverIpScore), "Property is not nullable for class DomainReputationScores.");

            if (mailserverIpScore.IsSet && mailserverIpScore.Value == null)
                throw new ArgumentNullException(nameof(mailserverIpScore), "Property is not nullable for class DomainReputationScores.");

            if (details.IsSet && details.Value == null)
                throw new ArgumentNullException(nameof(details), "Property is not nullable for class DomainReputationScores.");

            if (scoringMethod.IsSet && scoringMethod.Value == null)
                throw new ArgumentNullException(nameof(scoringMethod), "Property is not nullable for class DomainReputationScores.");

            if (weights.IsSet && weights.Value == null)
                throw new ArgumentNullException(nameof(weights), "Property is not nullable for class DomainReputationScores.");

            return new DomainReputationScores(overallScore, riskLevel, domainIpScore, nameserverIpScore, mailserverIpScore, details, scoringMethod, weights);
        }

        /// <summary>
        /// Serializes a <see cref="DomainReputationScores" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainReputationScores"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DomainReputationScores domainReputationScores, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, domainReputationScores, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DomainReputationScores" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainReputationScores"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DomainReputationScores domainReputationScores, JsonSerializerOptions jsonSerializerOptions)
        {
            if (domainReputationScores.DetailsOption.IsSet && domainReputationScores.Details == null)
                throw new ArgumentNullException(nameof(domainReputationScores.Details), "Property is required for class DomainReputationScores.");

            if (domainReputationScores.ScoringMethodOption.IsSet && domainReputationScores.ScoringMethod == null)
                throw new ArgumentNullException(nameof(domainReputationScores.ScoringMethod), "Property is required for class DomainReputationScores.");

            if (domainReputationScores.WeightsOption.IsSet && domainReputationScores.Weights == null)
                throw new ArgumentNullException(nameof(domainReputationScores.Weights), "Property is required for class DomainReputationScores.");

            if (domainReputationScores.OverallScoreOption.IsSet)
                writer.WriteNumber("overall_score", domainReputationScores.OverallScoreOption.Value.Value);

            var riskLevelRawValue = DomainReputationScores.RiskLevelEnumToJsonValue(domainReputationScores.RiskLevelOption.Value.Value);
            writer.WriteString("risk_level", riskLevelRawValue);
            if (domainReputationScores.DomainIpScoreOption.IsSet)
                writer.WriteNumber("domain_ip_score", domainReputationScores.DomainIpScoreOption.Value.Value);

            if (domainReputationScores.NameserverIpScoreOption.IsSet)
                writer.WriteNumber("nameserver_ip_score", domainReputationScores.NameserverIpScoreOption.Value.Value);

            if (domainReputationScores.MailserverIpScoreOption.IsSet)
                writer.WriteNumber("mailserver_ip_score", domainReputationScores.MailserverIpScoreOption.Value.Value);

            if (domainReputationScores.DetailsOption.IsSet)
            {
                writer.WritePropertyName("details");
                JsonSerializer.Serialize(writer, domainReputationScores.Details, jsonSerializerOptions);
            }
            if (domainReputationScores.ScoringMethodOption.IsSet)
                writer.WriteString("scoring_method", domainReputationScores.ScoringMethod);

            if (domainReputationScores.WeightsOption.IsSet)
            {
                writer.WritePropertyName("weights");
                JsonSerializer.Serialize(writer, domainReputationScores.Weights, jsonSerializerOptions);
            }
        }
    }
}
