// <auto-generated>
/*
 * Whisper API v1
 *
 * <h2>The Foundational Intelligence Layer for the Internet</h2> <p>The Whisper API provides comprehensive, real-time intelligence on any internet asset. By connecting billions of data points across live internet routing, historical registration records, and deep resolution data, our API moves beyond simple enrichment to deliver predictive, context-rich insights.</p> <p>This document is the single source of truth for our v1 API. It is designed for security experts, developers, and automated systems to understand and leverage the full power of our platform.</p>  <h3>üöÄ Quick Start</h3> <p><b>1. Get your API key:</b> <a href=\"https://dash.whisper.security\">Sign up at dash.whisper.security</a></p> <p><b>2. Make your first request:</b></p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" https://api.whisper.security/v1/indicators/ip/8.8.8.8</code></pre> <p><b>3. Explore the API:</b> Use the \"Try it out\" button in each endpoint below to test interactively.</p>  <h3>üéØ Key Features</h3> <ul>     <li><b>Unified & Simple:</b> Small set of powerful, resource-oriented endpoints</li>     <li><b>Performant by Design:</b> Asynchronous-first with strategic caching (&lt;500ms typical response)</li>     <li><b>Workflow-Oriented:</b> Built for real-world security operations, not just data dumps</li>     <li><b>Comprehensive:</b> IP, Domain, DNS, WHOIS, Routing, Geolocation, Screenshots, Monitoring</li> </ul>  <h3>‚ö° Performance Targets</h3> <table>     <tr><th>Endpoint Type</th><th>Response Time</th><th>Use Case</th></tr>     <tr><td>Geolocation</td><td>&lt;150ms</td><td>Real-time fraud detection</td></tr>     <tr><td>Single Indicator</td><td>&lt;500ms</td><td>Incident response enrichment</td></tr>     <tr><td>With Routing Data</td><td>&lt;2s (cached: 200ms)</td><td>Deep network analysis</td></tr>     <tr><td>Bulk Operations</td><td>5-30s</td><td>Batch log enrichment</td></tr>     <tr><td>Search/Discovery</td><td>10-60s</td><td>Threat hunting</td></tr> </table>  <h3>üîê Authentication</h3> <p>All endpoints require Bearer token authentication. Click the <b>\"Authorize\"</b> button above and enter your API key.</p> <pre><code>Authorization: Bearer wsk_live_1234567890abcdef</code></pre>  <h3>üìä Rate Limits</h3> <table>     <tr><th>Category</th><th>Limit</th></tr>     <tr><td>Standard Enrichment</td><td>100 req/min</td></tr>     <tr><td>Bulk Operations</td><td>10 req/min</td></tr>     <tr><td>Search/Discovery</td><td>5 req/min</td></tr>     <tr><td>Screenshots</td><td>10 req/min</td></tr> </table> <p><i>Rate limits return HTTP 429. Retry after the time specified in the <code>Retry-After</code> header.</i></p>  <h3>üìö Resources</h3> <ul>     <li><a href=\"https://docs.whisper.security\">Full Documentation</a></li>     <li><a href=\"https://docs.whisper.security/quickstart\">Quick Start Guide</a></li>     <li><a href=\"https://docs.whisper.security/examples\">Code Examples</a></li>     <li><a href=\"https://whisper.security/support\">API Support</a></li> </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Whisper.Api.Sdk.Client;

namespace Whisper.Api.Sdk.Model
{
    /// <summary>
    /// Detailed information about a discovered subdomain
    /// </summary>
    public partial class SubdomainInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubdomainInfo" /> class.
        /// </summary>
        /// <param name="subdomain">The full subdomain name</param>
        /// <param name="ipAddresses">IP addresses associated with the subdomain</param>
        /// <param name="firstSeen">First time this subdomain was observed</param>
        /// <param name="lastSeen">Last time this subdomain was observed</param>
        /// <param name="recordType">Type of subdomain record</param>
        /// <param name="status">Current status of the subdomain</param>
        /// <param name="technologies">Technology stack detected on this subdomain</param>
        /// <param name="riskScore">Risk score for this subdomain (0-100)</param>
        [JsonConstructor]
        public SubdomainInfo(string subdomain, Option<List<string>> ipAddresses = default, Option<DateTime?> firstSeen = default, Option<DateTime?> lastSeen = default, Option<RecordTypeEnum?> recordType = default, Option<StatusEnum?> status = default, Option<List<string>> technologies = default, Option<int?> riskScore = default)
        {
            Subdomain = subdomain;
            IpAddressesOption = ipAddresses;
            FirstSeenOption = firstSeen;
            LastSeenOption = lastSeen;
            RecordTypeOption = recordType;
            StatusOption = status;
            TechnologiesOption = technologies;
            RiskScoreOption = riskScore;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Type of subdomain record
        /// </summary>
        /// <value>Type of subdomain record</value>
        public enum RecordTypeEnum
        {
            /// <summary>
            /// Enum A for value: A
            /// </summary>
            A = 1,

            /// <summary>
            /// Enum AAAA for value: AAAA
            /// </summary>
            AAAA = 2,

            /// <summary>
            /// Enum CNAME for value: CNAME
            /// </summary>
            CNAME = 3,

            /// <summary>
            /// Enum MX for value: MX
            /// </summary>
            MX = 4,

            /// <summary>
            /// Enum TXT for value: TXT
            /// </summary>
            TXT = 5,

            /// <summary>
            /// Enum NS for value: NS
            /// </summary>
            NS = 6
        }

        /// <summary>
        /// Returns a <see cref="RecordTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static RecordTypeEnum RecordTypeEnumFromString(string value)
        {
            if (value.Equals("A"))
                return RecordTypeEnum.A;

            if (value.Equals("AAAA"))
                return RecordTypeEnum.AAAA;

            if (value.Equals("CNAME"))
                return RecordTypeEnum.CNAME;

            if (value.Equals("MX"))
                return RecordTypeEnum.MX;

            if (value.Equals("TXT"))
                return RecordTypeEnum.TXT;

            if (value.Equals("NS"))
                return RecordTypeEnum.NS;

            throw new NotImplementedException($"Could not convert value to type RecordTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="RecordTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static RecordTypeEnum? RecordTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("A"))
                return RecordTypeEnum.A;

            if (value.Equals("AAAA"))
                return RecordTypeEnum.AAAA;

            if (value.Equals("CNAME"))
                return RecordTypeEnum.CNAME;

            if (value.Equals("MX"))
                return RecordTypeEnum.MX;

            if (value.Equals("TXT"))
                return RecordTypeEnum.TXT;

            if (value.Equals("NS"))
                return RecordTypeEnum.NS;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="RecordTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string RecordTypeEnumToJsonValue(RecordTypeEnum? value)
        {
            if (value == RecordTypeEnum.A)
                return "A";

            if (value == RecordTypeEnum.AAAA)
                return "AAAA";

            if (value == RecordTypeEnum.CNAME)
                return "CNAME";

            if (value == RecordTypeEnum.MX)
                return "MX";

            if (value == RecordTypeEnum.TXT)
                return "TXT";

            if (value == RecordTypeEnum.NS)
                return "NS";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of RecordType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RecordTypeEnum?> RecordTypeOption { get; private set; }

        /// <summary>
        /// Type of subdomain record
        /// </summary>
        /// <value>Type of subdomain record</value>
        /* <example>A</example> */
        [JsonPropertyName("record_type")]
        public RecordTypeEnum? RecordType { get { return this.RecordTypeOption; } set { this.RecordTypeOption = new(value); } }

        /// <summary>
        /// Current status of the subdomain
        /// </summary>
        /// <value>Current status of the subdomain</value>
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            Active = 1,

            /// <summary>
            /// Enum Inactive for value: inactive
            /// </summary>
            Inactive = 2,

            /// <summary>
            /// Enum Parked for value: parked
            /// </summary>
            Parked = 3
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static StatusEnum StatusEnumFromString(string value)
        {
            if (value.Equals("active"))
                return StatusEnum.Active;

            if (value.Equals("inactive"))
                return StatusEnum.Inactive;

            if (value.Equals("parked"))
                return StatusEnum.Parked;

            throw new NotImplementedException($"Could not convert value to type StatusEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="StatusEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static StatusEnum? StatusEnumFromStringOrDefault(string value)
        {
            if (value.Equals("active"))
                return StatusEnum.Active;

            if (value.Equals("inactive"))
                return StatusEnum.Inactive;

            if (value.Equals("parked"))
                return StatusEnum.Parked;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="StatusEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string StatusEnumToJsonValue(StatusEnum? value)
        {
            if (value == StatusEnum.Active)
                return "active";

            if (value == StatusEnum.Inactive)
                return "inactive";

            if (value == StatusEnum.Parked)
                return "parked";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<StatusEnum?> StatusOption { get; private set; }

        /// <summary>
        /// Current status of the subdomain
        /// </summary>
        /// <value>Current status of the subdomain</value>
        /* <example>active</example> */
        [JsonPropertyName("status")]
        public StatusEnum? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// The full subdomain name
        /// </summary>
        /// <value>The full subdomain name</value>
        /* <example>www.example.com</example> */
        [JsonPropertyName("subdomain")]
        public string Subdomain { get; set; }

        /// <summary>
        /// Used to track the state of IpAddresses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> IpAddressesOption { get; private set; }

        /// <summary>
        /// IP addresses associated with the subdomain
        /// </summary>
        /// <value>IP addresses associated with the subdomain</value>
        /* <example>[&quot;192.0.2.1&quot;,&quot;198.51.100.1&quot;]</example> */
        [JsonPropertyName("ip_addresses")]
        public List<string> IpAddresses { get { return this.IpAddressesOption; } set { this.IpAddressesOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstSeen
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> FirstSeenOption { get; private set; }

        /// <summary>
        /// First time this subdomain was observed
        /// </summary>
        /// <value>First time this subdomain was observed</value>
        /* <example>2024-01-15T08:00Z</example> */
        [JsonPropertyName("first_seen")]
        public DateTime? FirstSeen { get { return this.FirstSeenOption; } set { this.FirstSeenOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastSeen
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> LastSeenOption { get; private set; }

        /// <summary>
        /// Last time this subdomain was observed
        /// </summary>
        /// <value>Last time this subdomain was observed</value>
        /* <example>2024-12-20T10:00Z</example> */
        [JsonPropertyName("last_seen")]
        public DateTime? LastSeen { get { return this.LastSeenOption; } set { this.LastSeenOption = new(value); } }

        /// <summary>
        /// Used to track the state of Technologies
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<string>> TechnologiesOption { get; private set; }

        /// <summary>
        /// Technology stack detected on this subdomain
        /// </summary>
        /// <value>Technology stack detected on this subdomain</value>
        /* <example>[&quot;nginx&quot;,&quot;WordPress&quot;,&quot;CloudFlare&quot;]</example> */
        [JsonPropertyName("technologies")]
        public List<string> Technologies { get { return this.TechnologiesOption; } set { this.TechnologiesOption = new(value); } }

        /// <summary>
        /// Used to track the state of RiskScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RiskScoreOption { get; private set; }

        /// <summary>
        /// Risk score for this subdomain (0-100)
        /// </summary>
        /// <value>Risk score for this subdomain (0-100)</value>
        /* <example>15</example> */
        [JsonPropertyName("risk_score")]
        public int? RiskScore { get { return this.RiskScoreOption; } set { this.RiskScoreOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SubdomainInfo {\n");
            sb.Append("  Subdomain: ").Append(Subdomain).Append("\n");
            sb.Append("  IpAddresses: ").Append(IpAddresses).Append("\n");
            sb.Append("  FirstSeen: ").Append(FirstSeen).Append("\n");
            sb.Append("  LastSeen: ").Append(LastSeen).Append("\n");
            sb.Append("  RecordType: ").Append(RecordType).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Technologies: ").Append(Technologies).Append("\n");
            sb.Append("  RiskScore: ").Append(RiskScore).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RiskScore (int) maximum
            if (this.RiskScoreOption.IsSet && this.RiskScoreOption.Value > (int)100)
            {
                yield return new ValidationResult("Invalid value for RiskScore, must be a value less than or equal to 100.", new [] { "RiskScore" });
            }

            // RiskScore (int) minimum
            if (this.RiskScoreOption.IsSet && this.RiskScoreOption.Value < (int)0)
            {
                yield return new ValidationResult("Invalid value for RiskScore, must be a value greater than or equal to 0.", new [] { "RiskScore" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="SubdomainInfo" />
    /// </summary>
    public class SubdomainInfoJsonConverter : JsonConverter<SubdomainInfo>
    {
        /// <summary>
        /// The format to use to serialize FirstSeen
        /// </summary>
        public static string FirstSeenFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// The format to use to serialize LastSeen
        /// </summary>
        public static string LastSeenFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="SubdomainInfo" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override SubdomainInfo Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> subdomain = default;
            Option<List<string>> ipAddresses = default;
            Option<DateTime?> firstSeen = default;
            Option<DateTime?> lastSeen = default;
            Option<SubdomainInfo.RecordTypeEnum?> recordType = default;
            Option<SubdomainInfo.StatusEnum?> status = default;
            Option<List<string>> technologies = default;
            Option<int?> riskScore = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "subdomain":
                            subdomain = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "ip_addresses":
                            ipAddresses = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "first_seen":
                            firstSeen = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "last_seen":
                            lastSeen = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "record_type":
                            string recordTypeRawValue = utf8JsonReader.GetString();
                            if (recordTypeRawValue != null)
                                recordType = new Option<SubdomainInfo.RecordTypeEnum?>(SubdomainInfo.RecordTypeEnumFromStringOrDefault(recordTypeRawValue));
                            break;
                        case "status":
                            string statusRawValue = utf8JsonReader.GetString();
                            if (statusRawValue != null)
                                status = new Option<SubdomainInfo.StatusEnum?>(SubdomainInfo.StatusEnumFromStringOrDefault(statusRawValue));
                            break;
                        case "technologies":
                            technologies = new Option<List<string>>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "risk_score":
                            riskScore = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!subdomain.IsSet)
                throw new ArgumentException("Property is required for class SubdomainInfo.", nameof(subdomain));

            if (subdomain.IsSet && subdomain.Value == null)
                throw new ArgumentNullException(nameof(subdomain), "Property is not nullable for class SubdomainInfo.");

            if (ipAddresses.IsSet && ipAddresses.Value == null)
                throw new ArgumentNullException(nameof(ipAddresses), "Property is not nullable for class SubdomainInfo.");

            if (firstSeen.IsSet && firstSeen.Value == null)
                throw new ArgumentNullException(nameof(firstSeen), "Property is not nullable for class SubdomainInfo.");

            if (lastSeen.IsSet && lastSeen.Value == null)
                throw new ArgumentNullException(nameof(lastSeen), "Property is not nullable for class SubdomainInfo.");

            if (recordType.IsSet && recordType.Value == null)
                throw new ArgumentNullException(nameof(recordType), "Property is not nullable for class SubdomainInfo.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class SubdomainInfo.");

            if (technologies.IsSet && technologies.Value == null)
                throw new ArgumentNullException(nameof(technologies), "Property is not nullable for class SubdomainInfo.");

            if (riskScore.IsSet && riskScore.Value == null)
                throw new ArgumentNullException(nameof(riskScore), "Property is not nullable for class SubdomainInfo.");

            return new SubdomainInfo(subdomain.Value, ipAddresses, firstSeen, lastSeen, recordType, status, technologies, riskScore);
        }

        /// <summary>
        /// Serializes a <see cref="SubdomainInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subdomainInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, SubdomainInfo subdomainInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, subdomainInfo, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="SubdomainInfo" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="subdomainInfo"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, SubdomainInfo subdomainInfo, JsonSerializerOptions jsonSerializerOptions)
        {
            if (subdomainInfo.Subdomain == null)
                throw new ArgumentNullException(nameof(subdomainInfo.Subdomain), "Property is required for class SubdomainInfo.");

            if (subdomainInfo.IpAddressesOption.IsSet && subdomainInfo.IpAddresses == null)
                throw new ArgumentNullException(nameof(subdomainInfo.IpAddresses), "Property is required for class SubdomainInfo.");

            if (subdomainInfo.TechnologiesOption.IsSet && subdomainInfo.Technologies == null)
                throw new ArgumentNullException(nameof(subdomainInfo.Technologies), "Property is required for class SubdomainInfo.");

            writer.WriteString("subdomain", subdomainInfo.Subdomain);

            if (subdomainInfo.IpAddressesOption.IsSet)
            {
                writer.WritePropertyName("ip_addresses");
                JsonSerializer.Serialize(writer, subdomainInfo.IpAddresses, jsonSerializerOptions);
            }
            if (subdomainInfo.FirstSeenOption.IsSet)
                writer.WriteString("first_seen", subdomainInfo.FirstSeenOption.Value.Value.ToString(FirstSeenFormat));

            if (subdomainInfo.LastSeenOption.IsSet)
                writer.WriteString("last_seen", subdomainInfo.LastSeenOption.Value.Value.ToString(LastSeenFormat));

            var recordTypeRawValue = SubdomainInfo.RecordTypeEnumToJsonValue(subdomainInfo.RecordTypeOption.Value.Value);
            writer.WriteString("record_type", recordTypeRawValue);
            var statusRawValue = SubdomainInfo.StatusEnumToJsonValue(subdomainInfo.StatusOption.Value.Value);
            writer.WriteString("status", statusRawValue);
            if (subdomainInfo.TechnologiesOption.IsSet)
            {
                writer.WritePropertyName("technologies");
                JsonSerializer.Serialize(writer, subdomainInfo.Technologies, jsonSerializerOptions);
            }
            if (subdomainInfo.RiskScoreOption.IsSet)
                writer.WriteNumber("risk_score", subdomainInfo.RiskScoreOption.Value.Value);
        }
    }
}
