// <auto-generated>
/*
 * Whisper API v1
 *
 * <h2>The Foundational Intelligence Layer for the Internet</h2> <p>The Whisper API provides comprehensive, real-time intelligence on any internet asset. By connecting billions of data points across live internet routing, historical registration records, and deep resolution data, our API moves beyond simple enrichment to deliver predictive, context-rich insights.</p> <p>This document is the single source of truth for our v1 API. It is designed for security experts, developers, and automated systems to understand and leverage the full power of our platform.</p>  <h3>üöÄ Quick Start</h3> <p><b>1. Get your API key:</b> <a href=\"https://dash.whisper.security\">Sign up at dash.whisper.security</a></p> <p><b>2. Make your first request:</b></p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" https://api.whisper.security/v1/indicators/ip/8.8.8.8</code></pre> <p><b>3. Explore the API:</b> Use the \"Try it out\" button in each endpoint below to test interactively.</p>  <h3>üéØ Key Features</h3> <ul>     <li><b>Unified & Simple:</b> Small set of powerful, resource-oriented endpoints</li>     <li><b>Performant by Design:</b> Asynchronous-first with strategic caching (&lt;500ms typical response)</li>     <li><b>Workflow-Oriented:</b> Built for real-world security operations, not just data dumps</li>     <li><b>Comprehensive:</b> IP, Domain, DNS, WHOIS, Routing, Geolocation, Screenshots, Monitoring</li> </ul>  <h3>‚ö° Performance Targets</h3> <table>     <tr><th>Endpoint Type</th><th>Response Time</th><th>Use Case</th></tr>     <tr><td>Geolocation</td><td>&lt;150ms</td><td>Real-time fraud detection</td></tr>     <tr><td>Single Indicator</td><td>&lt;500ms</td><td>Incident response enrichment</td></tr>     <tr><td>With Routing Data</td><td>&lt;2s (cached: 200ms)</td><td>Deep network analysis</td></tr>     <tr><td>Bulk Operations</td><td>5-30s</td><td>Batch log enrichment</td></tr>     <tr><td>Search/Discovery</td><td>10-60s</td><td>Threat hunting</td></tr> </table>  <h3>üîê Authentication</h3> <p>All endpoints require Bearer token authentication. Click the <b>\"Authorize\"</b> button above and enter your API key.</p> <pre><code>Authorization: Bearer wsk_live_1234567890abcdef</code></pre>  <h3>üìä Rate Limits</h3> <table>     <tr><th>Category</th><th>Limit</th></tr>     <tr><td>Standard Enrichment</td><td>100 req/min</td></tr>     <tr><td>Bulk Operations</td><td>10 req/min</td></tr>     <tr><td>Search/Discovery</td><td>5 req/min</td></tr>     <tr><td>Screenshots</td><td>10 req/min</td></tr> </table> <p><i>Rate limits return HTTP 429. Retry after the time specified in the <code>Retry-After</code> header.</i></p>  <h3>üìö Resources</h3> <ul>     <li><a href=\"https://docs.whisper.security\">Full Documentation</a></li>     <li><a href=\"https://docs.whisper.security/quickstart\">Quick Start Guide</a></li>     <li><a href=\"https://docs.whisper.security/examples\">Code Examples</a></li>     <li><a href=\"https://whisper.security/support\">API Support</a></li> </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Whisper.Api.Sdk.Client;

namespace Whisper.Api.Sdk.Model
{
    /// <summary>
    /// Standard error response returned when an API request fails
    /// </summary>
    public partial class ErrorResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorResponse" /> class.
        /// </summary>
        /// <param name="status">The HTTP status code of the error</param>
        /// <param name="error">A short, machine-readable error code</param>
        /// <param name="message">A human-readable error message providing more detail</param>
        /// <param name="timestamp">The timestamp when the error occurred</param>
        /// <param name="details">Additional details about the error, including field-specific validation errors</param>
        /// <param name="traceId">A unique trace ID for this request, useful for debugging</param>
        /// <param name="path">The API path that generated this error</param>
        [JsonConstructor]
        public ErrorResponse(int status, string error, string message, DateTime timestamp, Option<Object> details = default, Option<string> traceId = default, Option<string> path = default)
        {
            Status = status;
            Error = error;
            Message = message;
            Timestamp = timestamp;
            DetailsOption = details;
            TraceIdOption = traceId;
            PathOption = path;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The HTTP status code of the error
        /// </summary>
        /// <value>The HTTP status code of the error</value>
        /* <example>400</example> */
        [JsonPropertyName("status")]
        public int Status { get; set; }

        /// <summary>
        /// A short, machine-readable error code
        /// </summary>
        /// <value>A short, machine-readable error code</value>
        /* <example>INVALID_INDICATOR</example> */
        [JsonPropertyName("error")]
        public string Error { get; set; }

        /// <summary>
        /// A human-readable error message providing more detail
        /// </summary>
        /// <value>A human-readable error message providing more detail</value>
        /* <example>The provided IP address is not a valid IPv4 or IPv6 address</example> */
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// The timestamp when the error occurred
        /// </summary>
        /// <value>The timestamp when the error occurred</value>
        /* <example>2024-12-20T10:15:30.123Z</example> */
        [JsonPropertyName("timestamp")]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Used to track the state of Details
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object> DetailsOption { get; private set; }

        /// <summary>
        /// Additional details about the error, including field-specific validation errors
        /// </summary>
        /// <value>Additional details about the error, including field-specific validation errors</value>
        /* <example>{&quot;field&quot;:&quot;ip&quot;,&quot;issue&quot;:&quot;Invalid format&quot;}</example> */
        [JsonPropertyName("details")]
        public Object Details { get { return this.DetailsOption; } set { this.DetailsOption = new(value); } }

        /// <summary>
        /// Used to track the state of TraceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TraceIdOption { get; private set; }

        /// <summary>
        /// A unique trace ID for this request, useful for debugging
        /// </summary>
        /// <value>A unique trace ID for this request, useful for debugging</value>
        /* <example>550e8400-e29b-41d4-a716-446655440000</example> */
        [JsonPropertyName("trace_id")]
        public string TraceId { get { return this.TraceIdOption; } set { this.TraceIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> PathOption { get; private set; }

        /// <summary>
        /// The API path that generated this error
        /// </summary>
        /// <value>The API path that generated this error</value>
        /* <example>/v1/indicators/ip/invalid-ip</example> */
        [JsonPropertyName("path")]
        public string Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ErrorResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  TraceId: ").Append(TraceId).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ErrorResponse" />
    /// </summary>
    public class ErrorResponseJsonConverter : JsonConverter<ErrorResponse>
    {
        /// <summary>
        /// The format to use to serialize Timestamp
        /// </summary>
        public static string TimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ErrorResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ErrorResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> status = default;
            Option<string> error = default;
            Option<string> message = default;
            Option<DateTime?> timestamp = default;
            Option<Object> details = default;
            Option<string> traceId = default;
            Option<string> path = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            status = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "error":
                            error = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "message":
                            message = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "timestamp":
                            timestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "details":
                            details = new Option<Object>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "trace_id":
                            traceId = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "path":
                            path = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class ErrorResponse.", nameof(status));

            if (!error.IsSet)
                throw new ArgumentException("Property is required for class ErrorResponse.", nameof(error));

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class ErrorResponse.", nameof(message));

            if (!timestamp.IsSet)
                throw new ArgumentException("Property is required for class ErrorResponse.", nameof(timestamp));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class ErrorResponse.");

            if (error.IsSet && error.Value == null)
                throw new ArgumentNullException(nameof(error), "Property is not nullable for class ErrorResponse.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class ErrorResponse.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class ErrorResponse.");

            if (details.IsSet && details.Value == null)
                throw new ArgumentNullException(nameof(details), "Property is not nullable for class ErrorResponse.");

            if (traceId.IsSet && traceId.Value == null)
                throw new ArgumentNullException(nameof(traceId), "Property is not nullable for class ErrorResponse.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class ErrorResponse.");

            return new ErrorResponse(status.Value.Value, error.Value, message.Value, timestamp.Value.Value, details, traceId, path);
        }

        /// <summary>
        /// Serializes a <see cref="ErrorResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="errorResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ErrorResponse errorResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, errorResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ErrorResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="errorResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ErrorResponse errorResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (errorResponse.Error == null)
                throw new ArgumentNullException(nameof(errorResponse.Error), "Property is required for class ErrorResponse.");

            if (errorResponse.Message == null)
                throw new ArgumentNullException(nameof(errorResponse.Message), "Property is required for class ErrorResponse.");

            if (errorResponse.DetailsOption.IsSet && errorResponse.Details == null)
                throw new ArgumentNullException(nameof(errorResponse.Details), "Property is required for class ErrorResponse.");

            if (errorResponse.TraceIdOption.IsSet && errorResponse.TraceId == null)
                throw new ArgumentNullException(nameof(errorResponse.TraceId), "Property is required for class ErrorResponse.");

            if (errorResponse.PathOption.IsSet && errorResponse.Path == null)
                throw new ArgumentNullException(nameof(errorResponse.Path), "Property is required for class ErrorResponse.");

            writer.WriteNumber("status", errorResponse.Status);

            writer.WriteString("error", errorResponse.Error);

            writer.WriteString("message", errorResponse.Message);

            writer.WriteString("timestamp", errorResponse.Timestamp.ToString(TimestampFormat));

            if (errorResponse.DetailsOption.IsSet)
            {
                writer.WritePropertyName("details");
                JsonSerializer.Serialize(writer, errorResponse.Details, jsonSerializerOptions);
            }
            if (errorResponse.TraceIdOption.IsSet)
                writer.WriteString("trace_id", errorResponse.TraceId);

            if (errorResponse.PathOption.IsSet)
                writer.WriteString("path", errorResponse.Path);
        }
    }
}
