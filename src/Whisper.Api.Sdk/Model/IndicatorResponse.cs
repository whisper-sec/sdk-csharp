// <auto-generated>
/*
 * Whisper API v1
 *
 * <h2>The Foundational Intelligence Layer for the Internet</h2> <p>The Whisper API provides comprehensive, real-time intelligence on any internet asset. By connecting billions of data points across live internet routing, historical registration records, and deep resolution data, our API moves beyond simple enrichment to deliver predictive, context-rich insights.</p> <p>This document is the single source of truth for our v1 API. It is designed for security experts, developers, and automated systems to understand and leverage the full power of our platform.</p>  <h3>üöÄ Quick Start</h3> <p><b>1. Get your API key:</b> <a href=\"https://dash.whisper.security\">Sign up at dash.whisper.security</a></p> <p><b>2. Make your first request:</b></p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" https://api.whisper.security/v1/indicators/ip/8.8.8.8</code></pre> <p><b>3. Explore the API:</b> Use the \"Try it out\" button in each endpoint below to test interactively.</p>  <h3>üéØ Key Features</h3> <ul>     <li><b>Unified & Simple:</b> Small set of powerful, resource-oriented endpoints</li>     <li><b>Performant by Design:</b> Asynchronous-first with strategic caching (&lt;500ms typical response)</li>     <li><b>Workflow-Oriented:</b> Built for real-world security operations, not just data dumps</li>     <li><b>Comprehensive:</b> IP, Domain, DNS, WHOIS, Routing, Geolocation, Screenshots, Monitoring</li> </ul>  <h3>‚ö° Performance Targets</h3> <table>     <tr><th>Endpoint Type</th><th>Response Time</th><th>Use Case</th></tr>     <tr><td>Geolocation</td><td>&lt;150ms</td><td>Real-time fraud detection</td></tr>     <tr><td>Single Indicator</td><td>&lt;500ms</td><td>Incident response enrichment</td></tr>     <tr><td>With Routing Data</td><td>&lt;2s (cached: 200ms)</td><td>Deep network analysis</td></tr>     <tr><td>Bulk Operations</td><td>5-30s</td><td>Batch log enrichment</td></tr>     <tr><td>Search/Discovery</td><td>10-60s</td><td>Threat hunting</td></tr> </table>  <h3>üîê Authentication</h3> <p>All endpoints require Bearer token authentication. Click the <b>\"Authorize\"</b> button above and enter your API key.</p> <pre><code>Authorization: Bearer wsk_live_1234567890abcdef</code></pre>  <h3>üìä Rate Limits</h3> <table>     <tr><th>Category</th><th>Limit</th></tr>     <tr><td>Standard Enrichment</td><td>100 req/min</td></tr>     <tr><td>Bulk Operations</td><td>10 req/min</td></tr>     <tr><td>Search/Discovery</td><td>5 req/min</td></tr>     <tr><td>Screenshots</td><td>10 req/min</td></tr> </table> <p><i>Rate limits return HTTP 429. Retry after the time specified in the <code>Retry-After</code> header.</i></p>  <h3>üìö Resources</h3> <ul>     <li><a href=\"https://docs.whisper.security\">Full Documentation</a></li>     <li><a href=\"https://docs.whisper.security/quickstart\">Quick Start Guide</a></li>     <li><a href=\"https://docs.whisper.security/examples\">Code Examples</a></li>     <li><a href=\"https://whisper.security/support\">API Support</a></li> </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Whisper.Api.Sdk.Client;

namespace Whisper.Api.Sdk.Model
{
    /// <summary>
    /// Comprehensive intelligence response for an IP address or domain indicator
    /// </summary>
    public partial class IndicatorResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IndicatorResponse" /> class.
        /// </summary>
        /// <param name="query">query</param>
        /// <param name="summary">summary</param>
        /// <param name="geolocation">geolocation</param>
        /// <param name="network">network</param>
        /// <param name="isp">isp</param>
        /// <param name="registration">registration</param>
        /// <param name="dns">dns</param>
        /// <param name="relationships">relationships</param>
        /// <param name="reputation">reputation</param>
        /// <param name="security">security</param>
        /// <param name="ipIntelligence">When domain is queried with include&#x3D;ip_intelligence, contains full intelligence for each resolved IP</param>
        /// <param name="metadata">metadata</param>
        [JsonConstructor]
        public IndicatorResponse(Option<QueryInfo> query = default, Option<SummaryInfo> summary = default, Option<Object> geolocation = default, Option<Object> network = default, Option<Object> isp = default, Option<Object> registration = default, Option<DnsInfo> dns = default, Option<RelationshipInfo> relationships = default, Option<ReputationInfo> reputation = default, Option<Object> security = default, Option<Dictionary<string, Object>> ipIntelligence = default, Option<MetadataInfo> metadata = default)
        {
            QueryOption = query;
            SummaryOption = summary;
            GeolocationOption = geolocation;
            NetworkOption = network;
            IspOption = isp;
            RegistrationOption = registration;
            DnsOption = dns;
            RelationshipsOption = relationships;
            ReputationOption = reputation;
            SecurityOption = security;
            IpIntelligenceOption = ipIntelligence;
            MetadataOption = metadata;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Query
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<QueryInfo> QueryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [JsonPropertyName("query")]
        public QueryInfo Query { get { return this.QueryOption; } set { this.QueryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Summary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SummaryInfo> SummaryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [JsonPropertyName("summary")]
        public SummaryInfo Summary { get { return this.SummaryOption; } set { this.SummaryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Geolocation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object> GeolocationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Geolocation
        /// </summary>
        [JsonPropertyName("geolocation")]
        public Object Geolocation { get { return this.GeolocationOption; } set { this.GeolocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Network
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object> NetworkOption { get; private set; }

        /// <summary>
        /// Gets or Sets Network
        /// </summary>
        [JsonPropertyName("network")]
        public Object Network { get { return this.NetworkOption; } set { this.NetworkOption = new(value); } }

        /// <summary>
        /// Used to track the state of Isp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object> IspOption { get; private set; }

        /// <summary>
        /// Gets or Sets Isp
        /// </summary>
        [JsonPropertyName("isp")]
        public Object Isp { get { return this.IspOption; } set { this.IspOption = new(value); } }

        /// <summary>
        /// Used to track the state of Registration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object> RegistrationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Registration
        /// </summary>
        [JsonPropertyName("registration")]
        public Object Registration { get { return this.RegistrationOption; } set { this.RegistrationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dns
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DnsInfo> DnsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Dns
        /// </summary>
        [JsonPropertyName("dns")]
        public DnsInfo Dns { get { return this.DnsOption; } set { this.DnsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Relationships
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RelationshipInfo> RelationshipsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Relationships
        /// </summary>
        [JsonPropertyName("relationships")]
        public RelationshipInfo Relationships { get { return this.RelationshipsOption; } set { this.RelationshipsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reputation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<ReputationInfo> ReputationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Reputation
        /// </summary>
        [JsonPropertyName("reputation")]
        public ReputationInfo Reputation { get { return this.ReputationOption; } set { this.ReputationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Security
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object> SecurityOption { get; private set; }

        /// <summary>
        /// Gets or Sets Security
        /// </summary>
        [JsonPropertyName("security")]
        public Object Security { get { return this.SecurityOption; } set { this.SecurityOption = new(value); } }

        /// <summary>
        /// Used to track the state of IpIntelligence
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>> IpIntelligenceOption { get; private set; }

        /// <summary>
        /// When domain is queried with include&#x3D;ip_intelligence, contains full intelligence for each resolved IP
        /// </summary>
        /// <value>When domain is queried with include&#x3D;ip_intelligence, contains full intelligence for each resolved IP</value>
        [JsonPropertyName("ip_intelligence")]
        public Dictionary<string, Object> IpIntelligence { get { return this.IpIntelligenceOption; } set { this.IpIntelligenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<MetadataInfo> MetadataOption { get; private set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [JsonPropertyName("metadata")]
        public MetadataInfo Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IndicatorResponse {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Geolocation: ").Append(Geolocation).Append("\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("  Isp: ").Append(Isp).Append("\n");
            sb.Append("  Registration: ").Append(Registration).Append("\n");
            sb.Append("  Dns: ").Append(Dns).Append("\n");
            sb.Append("  Relationships: ").Append(Relationships).Append("\n");
            sb.Append("  Reputation: ").Append(Reputation).Append("\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("  IpIntelligence: ").Append(IpIntelligence).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IndicatorResponse" />
    /// </summary>
    public class IndicatorResponseJsonConverter : JsonConverter<IndicatorResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="IndicatorResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IndicatorResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<QueryInfo> query = default;
            Option<SummaryInfo> summary = default;
            Option<Object> geolocation = default;
            Option<Object> network = default;
            Option<Object> isp = default;
            Option<Object> registration = default;
            Option<DnsInfo> dns = default;
            Option<RelationshipInfo> relationships = default;
            Option<ReputationInfo> reputation = default;
            Option<Object> security = default;
            Option<Dictionary<string, Object>> ipIntelligence = default;
            Option<MetadataInfo> metadata = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "query":
                            query = new Option<QueryInfo>(JsonSerializer.Deserialize<QueryInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "summary":
                            summary = new Option<SummaryInfo>(JsonSerializer.Deserialize<SummaryInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "geolocation":
                            geolocation = new Option<Object>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "network":
                            network = new Option<Object>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "isp":
                            isp = new Option<Object>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "registration":
                            registration = new Option<Object>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "dns":
                            dns = new Option<DnsInfo>(JsonSerializer.Deserialize<DnsInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "relationships":
                            relationships = new Option<RelationshipInfo>(JsonSerializer.Deserialize<RelationshipInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "reputation":
                            reputation = new Option<ReputationInfo>(JsonSerializer.Deserialize<ReputationInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "security":
                            security = new Option<Object>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "ip_intelligence":
                            ipIntelligence = new Option<Dictionary<string, Object>>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "metadata":
                            metadata = new Option<MetadataInfo>(JsonSerializer.Deserialize<MetadataInfo>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (query.IsSet && query.Value == null)
                throw new ArgumentNullException(nameof(query), "Property is not nullable for class IndicatorResponse.");

            if (summary.IsSet && summary.Value == null)
                throw new ArgumentNullException(nameof(summary), "Property is not nullable for class IndicatorResponse.");

            if (geolocation.IsSet && geolocation.Value == null)
                throw new ArgumentNullException(nameof(geolocation), "Property is not nullable for class IndicatorResponse.");

            if (network.IsSet && network.Value == null)
                throw new ArgumentNullException(nameof(network), "Property is not nullable for class IndicatorResponse.");

            if (isp.IsSet && isp.Value == null)
                throw new ArgumentNullException(nameof(isp), "Property is not nullable for class IndicatorResponse.");

            if (registration.IsSet && registration.Value == null)
                throw new ArgumentNullException(nameof(registration), "Property is not nullable for class IndicatorResponse.");

            if (dns.IsSet && dns.Value == null)
                throw new ArgumentNullException(nameof(dns), "Property is not nullable for class IndicatorResponse.");

            if (relationships.IsSet && relationships.Value == null)
                throw new ArgumentNullException(nameof(relationships), "Property is not nullable for class IndicatorResponse.");

            if (reputation.IsSet && reputation.Value == null)
                throw new ArgumentNullException(nameof(reputation), "Property is not nullable for class IndicatorResponse.");

            if (security.IsSet && security.Value == null)
                throw new ArgumentNullException(nameof(security), "Property is not nullable for class IndicatorResponse.");

            if (ipIntelligence.IsSet && ipIntelligence.Value == null)
                throw new ArgumentNullException(nameof(ipIntelligence), "Property is not nullable for class IndicatorResponse.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class IndicatorResponse.");

            return new IndicatorResponse(query, summary, geolocation, network, isp, registration, dns, relationships, reputation, security, ipIntelligence, metadata);
        }

        /// <summary>
        /// Serializes a <see cref="IndicatorResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="indicatorResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IndicatorResponse indicatorResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, indicatorResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IndicatorResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="indicatorResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IndicatorResponse indicatorResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (indicatorResponse.QueryOption.IsSet && indicatorResponse.Query == null)
                throw new ArgumentNullException(nameof(indicatorResponse.Query), "Property is required for class IndicatorResponse.");

            if (indicatorResponse.SummaryOption.IsSet && indicatorResponse.Summary == null)
                throw new ArgumentNullException(nameof(indicatorResponse.Summary), "Property is required for class IndicatorResponse.");

            if (indicatorResponse.GeolocationOption.IsSet && indicatorResponse.Geolocation == null)
                throw new ArgumentNullException(nameof(indicatorResponse.Geolocation), "Property is required for class IndicatorResponse.");

            if (indicatorResponse.NetworkOption.IsSet && indicatorResponse.Network == null)
                throw new ArgumentNullException(nameof(indicatorResponse.Network), "Property is required for class IndicatorResponse.");

            if (indicatorResponse.IspOption.IsSet && indicatorResponse.Isp == null)
                throw new ArgumentNullException(nameof(indicatorResponse.Isp), "Property is required for class IndicatorResponse.");

            if (indicatorResponse.RegistrationOption.IsSet && indicatorResponse.Registration == null)
                throw new ArgumentNullException(nameof(indicatorResponse.Registration), "Property is required for class IndicatorResponse.");

            if (indicatorResponse.DnsOption.IsSet && indicatorResponse.Dns == null)
                throw new ArgumentNullException(nameof(indicatorResponse.Dns), "Property is required for class IndicatorResponse.");

            if (indicatorResponse.RelationshipsOption.IsSet && indicatorResponse.Relationships == null)
                throw new ArgumentNullException(nameof(indicatorResponse.Relationships), "Property is required for class IndicatorResponse.");

            if (indicatorResponse.ReputationOption.IsSet && indicatorResponse.Reputation == null)
                throw new ArgumentNullException(nameof(indicatorResponse.Reputation), "Property is required for class IndicatorResponse.");

            if (indicatorResponse.SecurityOption.IsSet && indicatorResponse.Security == null)
                throw new ArgumentNullException(nameof(indicatorResponse.Security), "Property is required for class IndicatorResponse.");

            if (indicatorResponse.IpIntelligenceOption.IsSet && indicatorResponse.IpIntelligence == null)
                throw new ArgumentNullException(nameof(indicatorResponse.IpIntelligence), "Property is required for class IndicatorResponse.");

            if (indicatorResponse.MetadataOption.IsSet && indicatorResponse.Metadata == null)
                throw new ArgumentNullException(nameof(indicatorResponse.Metadata), "Property is required for class IndicatorResponse.");

            if (indicatorResponse.QueryOption.IsSet)
            {
                writer.WritePropertyName("query");
                JsonSerializer.Serialize(writer, indicatorResponse.Query, jsonSerializerOptions);
            }
            if (indicatorResponse.SummaryOption.IsSet)
            {
                writer.WritePropertyName("summary");
                JsonSerializer.Serialize(writer, indicatorResponse.Summary, jsonSerializerOptions);
            }
            if (indicatorResponse.GeolocationOption.IsSet)
            {
                writer.WritePropertyName("geolocation");
                JsonSerializer.Serialize(writer, indicatorResponse.Geolocation, jsonSerializerOptions);
            }
            if (indicatorResponse.NetworkOption.IsSet)
            {
                writer.WritePropertyName("network");
                JsonSerializer.Serialize(writer, indicatorResponse.Network, jsonSerializerOptions);
            }
            if (indicatorResponse.IspOption.IsSet)
            {
                writer.WritePropertyName("isp");
                JsonSerializer.Serialize(writer, indicatorResponse.Isp, jsonSerializerOptions);
            }
            if (indicatorResponse.RegistrationOption.IsSet)
            {
                writer.WritePropertyName("registration");
                JsonSerializer.Serialize(writer, indicatorResponse.Registration, jsonSerializerOptions);
            }
            if (indicatorResponse.DnsOption.IsSet)
            {
                writer.WritePropertyName("dns");
                JsonSerializer.Serialize(writer, indicatorResponse.Dns, jsonSerializerOptions);
            }
            if (indicatorResponse.RelationshipsOption.IsSet)
            {
                writer.WritePropertyName("relationships");
                JsonSerializer.Serialize(writer, indicatorResponse.Relationships, jsonSerializerOptions);
            }
            if (indicatorResponse.ReputationOption.IsSet)
            {
                writer.WritePropertyName("reputation");
                JsonSerializer.Serialize(writer, indicatorResponse.Reputation, jsonSerializerOptions);
            }
            if (indicatorResponse.SecurityOption.IsSet)
            {
                writer.WritePropertyName("security");
                JsonSerializer.Serialize(writer, indicatorResponse.Security, jsonSerializerOptions);
            }
            if (indicatorResponse.IpIntelligenceOption.IsSet)
            {
                writer.WritePropertyName("ip_intelligence");
                JsonSerializer.Serialize(writer, indicatorResponse.IpIntelligence, jsonSerializerOptions);
            }
            if (indicatorResponse.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, indicatorResponse.Metadata, jsonSerializerOptions);
            }
        }
    }
}
