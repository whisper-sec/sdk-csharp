// <auto-generated>
/*
 * Whisper API v1
 *
 * <h2>The Foundational Intelligence Layer for the Internet</h2> <p>The Whisper API provides comprehensive, real-time intelligence on any internet asset. By connecting billions of data points across live internet routing, historical registration records, and deep resolution data, our API moves beyond simple enrichment to deliver predictive, context-rich insights.</p> <p>This document is the single source of truth for our v1 API. It is designed for security experts, developers, and automated systems to understand and leverage the full power of our platform.</p>  <h3>üöÄ Quick Start</h3> <p><b>1. Get your API key:</b> <a href=\"https://dash.whisper.security\">Sign up at dash.whisper.security</a></p> <p><b>2. Make your first request:</b></p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" https://api.whisper.security/v1/indicators/ip/8.8.8.8</code></pre> <p><b>3. Explore the API:</b> Use the \"Try it out\" button in each endpoint below to test interactively.</p>  <h3>üéØ Key Features</h3> <ul>     <li><b>Unified & Simple:</b> Small set of powerful, resource-oriented endpoints</li>     <li><b>Performant by Design:</b> Asynchronous-first with strategic caching (&lt;500ms typical response)</li>     <li><b>Workflow-Oriented:</b> Built for real-world security operations, not just data dumps</li>     <li><b>Comprehensive:</b> IP, Domain, DNS, WHOIS, Routing, Geolocation, Screenshots, Monitoring</li> </ul>  <h3>‚ö° Performance Targets</h3> <table>     <tr><th>Endpoint Type</th><th>Response Time</th><th>Use Case</th></tr>     <tr><td>Geolocation</td><td>&lt;150ms</td><td>Real-time fraud detection</td></tr>     <tr><td>Single Indicator</td><td>&lt;500ms</td><td>Incident response enrichment</td></tr>     <tr><td>With Routing Data</td><td>&lt;2s (cached: 200ms)</td><td>Deep network analysis</td></tr>     <tr><td>Bulk Operations</td><td>5-30s</td><td>Batch log enrichment</td></tr>     <tr><td>Search/Discovery</td><td>10-60s</td><td>Threat hunting</td></tr> </table>  <h3>üîê Authentication</h3> <p>All endpoints require Bearer token authentication. Click the <b>\"Authorize\"</b> button above and enter your API key.</p> <pre><code>Authorization: Bearer wsk_live_1234567890abcdef</code></pre>  <h3>üìä Rate Limits</h3> <table>     <tr><th>Category</th><th>Limit</th></tr>     <tr><td>Standard Enrichment</td><td>100 req/min</td></tr>     <tr><td>Bulk Operations</td><td>10 req/min</td></tr>     <tr><td>Search/Discovery</td><td>5 req/min</td></tr>     <tr><td>Screenshots</td><td>10 req/min</td></tr> </table> <p><i>Rate limits return HTTP 429. Retry after the time specified in the <code>Retry-After</code> header.</i></p>  <h3>üìö Resources</h3> <ul>     <li><a href=\"https://docs.whisper.security\">Full Documentation</a></li>     <li><a href=\"https://docs.whisper.security/quickstart\">Quick Start Guide</a></li>     <li><a href=\"https://docs.whisper.security/examples\">Code Examples</a></li>     <li><a href=\"https://whisper.security/support\">API Support</a></li> </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Whisper.Api.Sdk.Client;

namespace Whisper.Api.Sdk.Model
{
    /// <summary>
    /// Configuration for port scanning
    /// </summary>
    public partial class PortScanConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PortScanConfig" /> class.
        /// </summary>
        /// <param name="ports">Ports to scan (comma-separated or range) (default to &quot;top-1000&quot;)</param>
        /// <param name="technique">Scan technique (default to TechniqueEnum.Syn)</param>
        /// <param name="threads">Number of parallel threads (default to 10)</param>
        /// <param name="portTimeout">Timeout per port in milliseconds (default to 1000)</param>
        [JsonConstructor]
        public PortScanConfig(Option<string?> ports = default, Option<TechniqueEnum?> technique = default, Option<int?> threads = default, Option<int?> portTimeout = default)
        {
            PortsOption = ports;
            TechniqueOption = technique;
            ThreadsOption = threads;
            PortTimeoutOption = portTimeout;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Scan technique
        /// </summary>
        /// <value>Scan technique</value>
        public enum TechniqueEnum
        {
            /// <summary>
            /// Enum Syn for value: syn
            /// </summary>
            Syn = 1,

            /// <summary>
            /// Enum Connect for value: connect
            /// </summary>
            Connect = 2,

            /// <summary>
            /// Enum Udp for value: udp
            /// </summary>
            Udp = 3,

            /// <summary>
            /// Enum Comprehensive for value: comprehensive
            /// </summary>
            Comprehensive = 4
        }

        /// <summary>
        /// Returns a <see cref="TechniqueEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static TechniqueEnum TechniqueEnumFromString(string value)
        {
            if (value.Equals("syn"))
                return TechniqueEnum.Syn;

            if (value.Equals("connect"))
                return TechniqueEnum.Connect;

            if (value.Equals("udp"))
                return TechniqueEnum.Udp;

            if (value.Equals("comprehensive"))
                return TechniqueEnum.Comprehensive;

            throw new NotImplementedException($"Could not convert value to type TechniqueEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="TechniqueEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TechniqueEnum? TechniqueEnumFromStringOrDefault(string value)
        {
            if (value.Equals("syn"))
                return TechniqueEnum.Syn;

            if (value.Equals("connect"))
                return TechniqueEnum.Connect;

            if (value.Equals("udp"))
                return TechniqueEnum.Udp;

            if (value.Equals("comprehensive"))
                return TechniqueEnum.Comprehensive;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="TechniqueEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TechniqueEnumToJsonValue(TechniqueEnum? value)
        {
            if (value == TechniqueEnum.Syn)
                return "syn";

            if (value == TechniqueEnum.Connect)
                return "connect";

            if (value == TechniqueEnum.Udp)
                return "udp";

            if (value == TechniqueEnum.Comprehensive)
                return "comprehensive";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Technique
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TechniqueEnum?> TechniqueOption { get; private set; }

        /// <summary>
        /// Scan technique
        /// </summary>
        /// <value>Scan technique</value>
        /* <example>syn</example> */
        [JsonPropertyName("technique")]
        public TechniqueEnum? Technique { get { return this.TechniqueOption; } set { this.TechniqueOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ports
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PortsOption { get; private set; }

        /// <summary>
        /// Ports to scan (comma-separated or range)
        /// </summary>
        /// <value>Ports to scan (comma-separated or range)</value>
        /* <example>80,443,8080-8090</example> */
        [JsonPropertyName("ports")]
        public string? Ports { get { return this.PortsOption; } set { this.PortsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Threads
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ThreadsOption { get; private set; }

        /// <summary>
        /// Number of parallel threads
        /// </summary>
        /// <value>Number of parallel threads</value>
        /* <example>10</example> */
        [JsonPropertyName("threads")]
        public int? Threads { get { return this.ThreadsOption; } set { this.ThreadsOption = new(value); } }

        /// <summary>
        /// Used to track the state of PortTimeout
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> PortTimeoutOption { get; private set; }

        /// <summary>
        /// Timeout per port in milliseconds
        /// </summary>
        /// <value>Timeout per port in milliseconds</value>
        /* <example>1000</example> */
        [JsonPropertyName("port_timeout")]
        public int? PortTimeout { get { return this.PortTimeoutOption; } set { this.PortTimeoutOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PortScanConfig {\n");
            sb.Append("  Ports: ").Append(Ports).Append("\n");
            sb.Append("  Technique: ").Append(Technique).Append("\n");
            sb.Append("  Threads: ").Append(Threads).Append("\n");
            sb.Append("  PortTimeout: ").Append(PortTimeout).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Threads (int) maximum
            if (this.ThreadsOption.IsSet && this.ThreadsOption.Value > (int)100)
            {
                yield return new ValidationResult("Invalid value for Threads, must be a value less than or equal to 100.", new [] { "Threads" });
            }

            // Threads (int) minimum
            if (this.ThreadsOption.IsSet && this.ThreadsOption.Value < (int)1)
            {
                yield return new ValidationResult("Invalid value for Threads, must be a value greater than or equal to 1.", new [] { "Threads" });
            }

            // PortTimeout (int) maximum
            if (this.PortTimeoutOption.IsSet && this.PortTimeoutOption.Value > (int)10000)
            {
                yield return new ValidationResult("Invalid value for PortTimeout, must be a value less than or equal to 10000.", new [] { "PortTimeout" });
            }

            // PortTimeout (int) minimum
            if (this.PortTimeoutOption.IsSet && this.PortTimeoutOption.Value < (int)100)
            {
                yield return new ValidationResult("Invalid value for PortTimeout, must be a value greater than or equal to 100.", new [] { "PortTimeout" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="PortScanConfig" />
    /// </summary>
    public class PortScanConfigJsonConverter : JsonConverter<PortScanConfig>
    {
        /// <summary>
        /// Deserializes json to <see cref="PortScanConfig" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PortScanConfig Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> ports = default;
            Option<PortScanConfig.TechniqueEnum?> technique = default;
            Option<int?> threads = default;
            Option<int?> portTimeout = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "ports":
                            ports = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "technique":
                            string? techniqueRawValue = utf8JsonReader.GetString();
                            if (techniqueRawValue != null)
                                technique = new Option<PortScanConfig.TechniqueEnum?>(PortScanConfig.TechniqueEnumFromStringOrDefault(techniqueRawValue));
                            break;
                        case "threads":
                            threads = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "port_timeout":
                            portTimeout = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (ports.IsSet && ports.Value == null)
                throw new ArgumentNullException(nameof(ports), "Property is not nullable for class PortScanConfig.");

            if (technique.IsSet && technique.Value == null)
                throw new ArgumentNullException(nameof(technique), "Property is not nullable for class PortScanConfig.");

            if (threads.IsSet && threads.Value == null)
                throw new ArgumentNullException(nameof(threads), "Property is not nullable for class PortScanConfig.");

            if (portTimeout.IsSet && portTimeout.Value == null)
                throw new ArgumentNullException(nameof(portTimeout), "Property is not nullable for class PortScanConfig.");

            return new PortScanConfig(ports, technique, threads, portTimeout);
        }

        /// <summary>
        /// Serializes a <see cref="PortScanConfig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="portScanConfig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PortScanConfig portScanConfig, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, portScanConfig, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="PortScanConfig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="portScanConfig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, PortScanConfig portScanConfig, JsonSerializerOptions jsonSerializerOptions)
        {
            if (portScanConfig.PortsOption.IsSet && portScanConfig.Ports == null)
                throw new ArgumentNullException(nameof(portScanConfig.Ports), "Property is required for class PortScanConfig.");

            if (portScanConfig.PortsOption.IsSet)
                writer.WriteString("ports", portScanConfig.Ports);

            var techniqueRawValue = PortScanConfig.TechniqueEnumToJsonValue(portScanConfig.TechniqueOption.Value!.Value);
            writer.WriteString("technique", techniqueRawValue);
            if (portScanConfig.ThreadsOption.IsSet)
                writer.WriteNumber("threads", portScanConfig.ThreadsOption.Value!.Value);

            if (portScanConfig.PortTimeoutOption.IsSet)
                writer.WriteNumber("port_timeout", portScanConfig.PortTimeoutOption.Value!.Value);
        }
    }
}
