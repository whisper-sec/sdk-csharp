// <auto-generated>
/*
 * Whisper API v1
 *
 * <h2>The Foundational Intelligence Layer for the Internet</h2> <p>The Whisper API provides comprehensive, real-time intelligence on any internet asset. By connecting billions of data points across live internet routing, historical registration records, and deep resolution data, our API moves beyond simple enrichment to deliver predictive, context-rich insights.</p> <p>This document is the single source of truth for our v1 API. It is designed for security experts, developers, and automated systems to understand and leverage the full power of our platform.</p>  <h3>üöÄ Quick Start</h3> <p><b>1. Get your API key:</b> <a href=\"https://dash.whisper.security\">Sign up at dash.whisper.security</a></p> <p><b>2. Make your first request:</b></p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" https://api.whisper.security/v1/indicators/ip/8.8.8.8</code></pre> <p><b>3. Explore the API:</b> Use the \"Try it out\" button in each endpoint below to test interactively.</p>  <h3>üéØ Key Features</h3> <ul>     <li><b>Unified & Simple:</b> Small set of powerful, resource-oriented endpoints</li>     <li><b>Performant by Design:</b> Asynchronous-first with strategic caching (&lt;500ms typical response)</li>     <li><b>Workflow-Oriented:</b> Built for real-world security operations, not just data dumps</li>     <li><b>Comprehensive:</b> IP, Domain, DNS, WHOIS, Routing, Geolocation, Screenshots, Monitoring</li> </ul>  <h3>‚ö° Performance Targets</h3> <table>     <tr><th>Endpoint Type</th><th>Response Time</th><th>Use Case</th></tr>     <tr><td>Geolocation</td><td>&lt;150ms</td><td>Real-time fraud detection</td></tr>     <tr><td>Single Indicator</td><td>&lt;500ms</td><td>Incident response enrichment</td></tr>     <tr><td>With Routing Data</td><td>&lt;2s (cached: 200ms)</td><td>Deep network analysis</td></tr>     <tr><td>Bulk Operations</td><td>5-30s</td><td>Batch log enrichment</td></tr>     <tr><td>Search/Discovery</td><td>10-60s</td><td>Threat hunting</td></tr> </table>  <h3>üîê Authentication</h3> <p>All endpoints require Bearer token authentication. Click the <b>\"Authorize\"</b> button above and enter your API key.</p> <pre><code>Authorization: Bearer wsk_live_1234567890abcdef</code></pre>  <h3>üìä Rate Limits</h3> <table>     <tr><th>Category</th><th>Limit</th></tr>     <tr><td>Standard Enrichment</td><td>100 req/min</td></tr>     <tr><td>Bulk Operations</td><td>10 req/min</td></tr>     <tr><td>Search/Discovery</td><td>5 req/min</td></tr>     <tr><td>Screenshots</td><td>10 req/min</td></tr> </table> <p><i>Rate limits return HTTP 429. Retry after the time specified in the <code>Retry-After</code> header.</i></p>  <h3>üìö Resources</h3> <ul>     <li><a href=\"https://docs.whisper.security\">Full Documentation</a></li>     <li><a href=\"https://docs.whisper.security/quickstart\">Quick Start Guide</a></li>     <li><a href=\"https://docs.whisper.security/examples\">Code Examples</a></li>     <li><a href=\"https://whisper.security/support\">API Support</a></li> </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Whisper.Api.Sdk.Client;

namespace Whisper.Api.Sdk.Model
{
    /// <summary>
    /// Configuration options for screenshot capture
    /// </summary>
    public partial class ScreenshotOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScreenshotOptions" /> class.
        /// </summary>
        /// <param name="width">Viewport width in pixels (default to 1920)</param>
        /// <param name="height">Viewport height in pixels (default to 1080)</param>
        /// <param name="fullPage">Capture the full page height (scrolling screenshot) (default to false)</param>
        /// <param name="waitTime">Wait time in milliseconds before taking screenshot (default to 2000)</param>
        /// <param name="format">Image format for the screenshot (default to FormatEnum.Png)</param>
        /// <param name="quality">Image quality (1-100, only for jpeg/webp) (default to 90)</param>
        /// <param name="userAgent">User agent string to use for the request</param>
        /// <param name="javascript">Enable JavaScript execution (default to true)</param>
        /// <param name="blockAds">Block ads and trackers (default to false)</param>
        /// <param name="acceptCookies">Accept cookies consent if prompted (default to true)</param>
        [JsonConstructor]
        public ScreenshotOptions(Option<int?> width = default, Option<int?> height = default, Option<bool?> fullPage = default, Option<int?> waitTime = default, Option<FormatEnum?> format = default, Option<int?> quality = default, Option<string> userAgent = default, Option<bool?> javascript = default, Option<bool?> blockAds = default, Option<bool?> acceptCookies = default)
        {
            WidthOption = width;
            HeightOption = height;
            FullPageOption = fullPage;
            WaitTimeOption = waitTime;
            FormatOption = format;
            QualityOption = quality;
            UserAgentOption = userAgent;
            JavascriptOption = javascript;
            BlockAdsOption = blockAds;
            AcceptCookiesOption = acceptCookies;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Image format for the screenshot
        /// </summary>
        /// <value>Image format for the screenshot</value>
        public enum FormatEnum
        {
            /// <summary>
            /// Enum Png for value: png
            /// </summary>
            Png = 1,

            /// <summary>
            /// Enum Jpeg for value: jpeg
            /// </summary>
            Jpeg = 2,

            /// <summary>
            /// Enum Webp for value: webp
            /// </summary>
            Webp = 3
        }

        /// <summary>
        /// Returns a <see cref="FormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FormatEnum FormatEnumFromString(string value)
        {
            if (value.Equals("png"))
                return FormatEnum.Png;

            if (value.Equals("jpeg"))
                return FormatEnum.Jpeg;

            if (value.Equals("webp"))
                return FormatEnum.Webp;

            throw new NotImplementedException($"Could not convert value to type FormatEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FormatEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FormatEnum? FormatEnumFromStringOrDefault(string value)
        {
            if (value.Equals("png"))
                return FormatEnum.Png;

            if (value.Equals("jpeg"))
                return FormatEnum.Jpeg;

            if (value.Equals("webp"))
                return FormatEnum.Webp;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FormatEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FormatEnumToJsonValue(FormatEnum? value)
        {
            if (value == FormatEnum.Png)
                return "png";

            if (value == FormatEnum.Jpeg)
                return "jpeg";

            if (value == FormatEnum.Webp)
                return "webp";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Format
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FormatEnum?> FormatOption { get; private set; }

        /// <summary>
        /// Image format for the screenshot
        /// </summary>
        /// <value>Image format for the screenshot</value>
        /* <example>png</example> */
        [JsonPropertyName("format")]
        public FormatEnum? Format { get { return this.FormatOption; } set { this.FormatOption = new(value); } }

        /// <summary>
        /// Used to track the state of Width
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WidthOption { get; private set; }

        /// <summary>
        /// Viewport width in pixels
        /// </summary>
        /// <value>Viewport width in pixels</value>
        /* <example>1920</example> */
        [JsonPropertyName("width")]
        public int? Width { get { return this.WidthOption; } set { this.WidthOption = new(value); } }

        /// <summary>
        /// Used to track the state of Height
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> HeightOption { get; private set; }

        /// <summary>
        /// Viewport height in pixels
        /// </summary>
        /// <value>Viewport height in pixels</value>
        /* <example>1080</example> */
        [JsonPropertyName("height")]
        public int? Height { get { return this.HeightOption; } set { this.HeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of FullPage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FullPageOption { get; private set; }

        /// <summary>
        /// Capture the full page height (scrolling screenshot)
        /// </summary>
        /// <value>Capture the full page height (scrolling screenshot)</value>
        /* <example>false</example> */
        [JsonPropertyName("full_page")]
        public bool? FullPage { get { return this.FullPageOption; } set { this.FullPageOption = new(value); } }

        /// <summary>
        /// Used to track the state of WaitTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WaitTimeOption { get; private set; }

        /// <summary>
        /// Wait time in milliseconds before taking screenshot
        /// </summary>
        /// <value>Wait time in milliseconds before taking screenshot</value>
        /* <example>2000</example> */
        [JsonPropertyName("wait_time")]
        public int? WaitTime { get { return this.WaitTimeOption; } set { this.WaitTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Quality
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> QualityOption { get; private set; }

        /// <summary>
        /// Image quality (1-100, only for jpeg/webp)
        /// </summary>
        /// <value>Image quality (1-100, only for jpeg/webp)</value>
        /* <example>90</example> */
        [JsonPropertyName("quality")]
        public int? Quality { get { return this.QualityOption; } set { this.QualityOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserAgent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> UserAgentOption { get; private set; }

        /// <summary>
        /// User agent string to use for the request
        /// </summary>
        /// <value>User agent string to use for the request</value>
        /* <example>Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36</example> */
        [JsonPropertyName("user_agent")]
        public string UserAgent { get { return this.UserAgentOption; } set { this.UserAgentOption = new(value); } }

        /// <summary>
        /// Used to track the state of Javascript
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> JavascriptOption { get; private set; }

        /// <summary>
        /// Enable JavaScript execution
        /// </summary>
        /// <value>Enable JavaScript execution</value>
        /* <example>true</example> */
        [JsonPropertyName("javascript")]
        public bool? Javascript { get { return this.JavascriptOption; } set { this.JavascriptOption = new(value); } }

        /// <summary>
        /// Used to track the state of BlockAds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> BlockAdsOption { get; private set; }

        /// <summary>
        /// Block ads and trackers
        /// </summary>
        /// <value>Block ads and trackers</value>
        /* <example>true</example> */
        [JsonPropertyName("block_ads")]
        public bool? BlockAds { get { return this.BlockAdsOption; } set { this.BlockAdsOption = new(value); } }

        /// <summary>
        /// Used to track the state of AcceptCookies
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> AcceptCookiesOption { get; private set; }

        /// <summary>
        /// Accept cookies consent if prompted
        /// </summary>
        /// <value>Accept cookies consent if prompted</value>
        /* <example>true</example> */
        [JsonPropertyName("accept_cookies")]
        public bool? AcceptCookies { get { return this.AcceptCookiesOption; } set { this.AcceptCookiesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScreenshotOptions {\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  FullPage: ").Append(FullPage).Append("\n");
            sb.Append("  WaitTime: ").Append(WaitTime).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Quality: ").Append(Quality).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("  Javascript: ").Append(Javascript).Append("\n");
            sb.Append("  BlockAds: ").Append(BlockAds).Append("\n");
            sb.Append("  AcceptCookies: ").Append(AcceptCookies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Width (int) maximum
            if (this.WidthOption.IsSet && this.WidthOption.Value > (int)7680)
            {
                yield return new ValidationResult("Invalid value for Width, must be a value less than or equal to 7680.", new [] { "Width" });
            }

            // Width (int) minimum
            if (this.WidthOption.IsSet && this.WidthOption.Value < (int)320)
            {
                yield return new ValidationResult("Invalid value for Width, must be a value greater than or equal to 320.", new [] { "Width" });
            }

            // Height (int) maximum
            if (this.HeightOption.IsSet && this.HeightOption.Value > (int)4320)
            {
                yield return new ValidationResult("Invalid value for Height, must be a value less than or equal to 4320.", new [] { "Height" });
            }

            // Height (int) minimum
            if (this.HeightOption.IsSet && this.HeightOption.Value < (int)240)
            {
                yield return new ValidationResult("Invalid value for Height, must be a value greater than or equal to 240.", new [] { "Height" });
            }

            // WaitTime (int) maximum
            if (this.WaitTimeOption.IsSet && this.WaitTimeOption.Value > (int)30000)
            {
                yield return new ValidationResult("Invalid value for WaitTime, must be a value less than or equal to 30000.", new [] { "WaitTime" });
            }

            // WaitTime (int) minimum
            if (this.WaitTimeOption.IsSet && this.WaitTimeOption.Value < (int)0)
            {
                yield return new ValidationResult("Invalid value for WaitTime, must be a value greater than or equal to 0.", new [] { "WaitTime" });
            }

            // Quality (int) maximum
            if (this.QualityOption.IsSet && this.QualityOption.Value > (int)100)
            {
                yield return new ValidationResult("Invalid value for Quality, must be a value less than or equal to 100.", new [] { "Quality" });
            }

            // Quality (int) minimum
            if (this.QualityOption.IsSet && this.QualityOption.Value < (int)1)
            {
                yield return new ValidationResult("Invalid value for Quality, must be a value greater than or equal to 1.", new [] { "Quality" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ScreenshotOptions" />
    /// </summary>
    public class ScreenshotOptionsJsonConverter : JsonConverter<ScreenshotOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="ScreenshotOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ScreenshotOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> width = default;
            Option<int?> height = default;
            Option<bool?> fullPage = default;
            Option<int?> waitTime = default;
            Option<ScreenshotOptions.FormatEnum?> format = default;
            Option<int?> quality = default;
            Option<string> userAgent = default;
            Option<bool?> javascript = default;
            Option<bool?> blockAds = default;
            Option<bool?> acceptCookies = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "width":
                            width = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "height":
                            height = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "full_page":
                            fullPage = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "wait_time":
                            waitTime = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "format":
                            string formatRawValue = utf8JsonReader.GetString();
                            if (formatRawValue != null)
                                format = new Option<ScreenshotOptions.FormatEnum?>(ScreenshotOptions.FormatEnumFromStringOrDefault(formatRawValue));
                            break;
                        case "quality":
                            quality = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "user_agent":
                            userAgent = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "javascript":
                            javascript = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "block_ads":
                            blockAds = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "accept_cookies":
                            acceptCookies = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (width.IsSet && width.Value == null)
                throw new ArgumentNullException(nameof(width), "Property is not nullable for class ScreenshotOptions.");

            if (height.IsSet && height.Value == null)
                throw new ArgumentNullException(nameof(height), "Property is not nullable for class ScreenshotOptions.");

            if (fullPage.IsSet && fullPage.Value == null)
                throw new ArgumentNullException(nameof(fullPage), "Property is not nullable for class ScreenshotOptions.");

            if (waitTime.IsSet && waitTime.Value == null)
                throw new ArgumentNullException(nameof(waitTime), "Property is not nullable for class ScreenshotOptions.");

            if (format.IsSet && format.Value == null)
                throw new ArgumentNullException(nameof(format), "Property is not nullable for class ScreenshotOptions.");

            if (quality.IsSet && quality.Value == null)
                throw new ArgumentNullException(nameof(quality), "Property is not nullable for class ScreenshotOptions.");

            if (userAgent.IsSet && userAgent.Value == null)
                throw new ArgumentNullException(nameof(userAgent), "Property is not nullable for class ScreenshotOptions.");

            if (javascript.IsSet && javascript.Value == null)
                throw new ArgumentNullException(nameof(javascript), "Property is not nullable for class ScreenshotOptions.");

            if (blockAds.IsSet && blockAds.Value == null)
                throw new ArgumentNullException(nameof(blockAds), "Property is not nullable for class ScreenshotOptions.");

            if (acceptCookies.IsSet && acceptCookies.Value == null)
                throw new ArgumentNullException(nameof(acceptCookies), "Property is not nullable for class ScreenshotOptions.");

            return new ScreenshotOptions(width, height, fullPage, waitTime, format, quality, userAgent, javascript, blockAds, acceptCookies);
        }

        /// <summary>
        /// Serializes a <see cref="ScreenshotOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="screenshotOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ScreenshotOptions screenshotOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, screenshotOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ScreenshotOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="screenshotOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ScreenshotOptions screenshotOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (screenshotOptions.UserAgentOption.IsSet && screenshotOptions.UserAgent == null)
                throw new ArgumentNullException(nameof(screenshotOptions.UserAgent), "Property is required for class ScreenshotOptions.");

            if (screenshotOptions.WidthOption.IsSet)
                writer.WriteNumber("width", screenshotOptions.WidthOption.Value.Value);

            if (screenshotOptions.HeightOption.IsSet)
                writer.WriteNumber("height", screenshotOptions.HeightOption.Value.Value);

            if (screenshotOptions.FullPageOption.IsSet)
                writer.WriteBoolean("full_page", screenshotOptions.FullPageOption.Value.Value);

            if (screenshotOptions.WaitTimeOption.IsSet)
                writer.WriteNumber("wait_time", screenshotOptions.WaitTimeOption.Value.Value);

            var formatRawValue = ScreenshotOptions.FormatEnumToJsonValue(screenshotOptions.FormatOption.Value.Value);
            writer.WriteString("format", formatRawValue);
            if (screenshotOptions.QualityOption.IsSet)
                writer.WriteNumber("quality", screenshotOptions.QualityOption.Value.Value);

            if (screenshotOptions.UserAgentOption.IsSet)
                writer.WriteString("user_agent", screenshotOptions.UserAgent);

            if (screenshotOptions.JavascriptOption.IsSet)
                writer.WriteBoolean("javascript", screenshotOptions.JavascriptOption.Value.Value);

            if (screenshotOptions.BlockAdsOption.IsSet)
                writer.WriteBoolean("block_ads", screenshotOptions.BlockAdsOption.Value.Value);

            if (screenshotOptions.AcceptCookiesOption.IsSet)
                writer.WriteBoolean("accept_cookies", screenshotOptions.AcceptCookiesOption.Value.Value);
        }
    }
}
