// <auto-generated>
/*
 * Whisper API v1
 *
 * <h2>The Foundational Intelligence Layer for the Internet</h2> <p>The Whisper API provides comprehensive, real-time intelligence on any internet asset. By connecting billions of data points across live internet routing, historical registration records, and deep resolution data, our API moves beyond simple enrichment to deliver predictive, context-rich insights.</p> <p>This document is the single source of truth for our v1 API. It is designed for security experts, developers, and automated systems to understand and leverage the full power of our platform.</p>  <h3>üöÄ Quick Start</h3> <p><b>1. Get your API key:</b> <a href=\"https://dash.whisper.security\">Sign up at dash.whisper.security</a></p> <p><b>2. Make your first request:</b></p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" https://api.whisper.security/v1/indicators/ip/8.8.8.8</code></pre> <p><b>3. Explore the API:</b> Use the \"Try it out\" button in each endpoint below to test interactively.</p>  <h3>üéØ Key Features</h3> <ul>     <li><b>Unified & Simple:</b> Small set of powerful, resource-oriented endpoints</li>     <li><b>Performant by Design:</b> Asynchronous-first with strategic caching (&lt;500ms typical response)</li>     <li><b>Workflow-Oriented:</b> Built for real-world security operations, not just data dumps</li>     <li><b>Comprehensive:</b> IP, Domain, DNS, WHOIS, Routing, Geolocation, Screenshots, Monitoring</li> </ul>  <h3>‚ö° Performance Targets</h3> <table>     <tr><th>Endpoint Type</th><th>Response Time</th><th>Use Case</th></tr>     <tr><td>Geolocation</td><td>&lt;150ms</td><td>Real-time fraud detection</td></tr>     <tr><td>Single Indicator</td><td>&lt;500ms</td><td>Incident response enrichment</td></tr>     <tr><td>With Routing Data</td><td>&lt;2s (cached: 200ms)</td><td>Deep network analysis</td></tr>     <tr><td>Bulk Operations</td><td>5-30s</td><td>Batch log enrichment</td></tr>     <tr><td>Search/Discovery</td><td>10-60s</td><td>Threat hunting</td></tr> </table>  <h3>üîê Authentication</h3> <p>All endpoints require Bearer token authentication. Click the <b>\"Authorize\"</b> button above and enter your API key.</p> <pre><code>Authorization: Bearer wsk_live_1234567890abcdef</code></pre>  <h3>üìä Rate Limits</h3> <table>     <tr><th>Category</th><th>Limit</th></tr>     <tr><td>Standard Enrichment</td><td>100 req/min</td></tr>     <tr><td>Bulk Operations</td><td>10 req/min</td></tr>     <tr><td>Search/Discovery</td><td>5 req/min</td></tr>     <tr><td>Screenshots</td><td>10 req/min</td></tr> </table> <p><i>Rate limits return HTTP 429. Retry after the time specified in the <code>Retry-After</code> header.</i></p>  <h3>üìö Resources</h3> <ul>     <li><a href=\"https://docs.whisper.security\">Full Documentation</a></li>     <li><a href=\"https://docs.whisper.security/quickstart\">Quick Start Guide</a></li>     <li><a href=\"https://docs.whisper.security/examples\">Code Examples</a></li>     <li><a href=\"https://whisper.security/support\">API Support</a></li> </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Whisper.Api.Sdk.Client;

namespace Whisper.Api.Sdk.Model
{
    /// <summary>
    /// Configuration for DNS enumeration and subdomain discovery
    /// </summary>
    public partial class DnsEnumConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DnsEnumConfig" /> class.
        /// </summary>
        /// <param name="subdomainEnum">Enable subdomain enumeration (default to true)</param>
        /// <param name="zoneTransfer">Enable DNS zone transfer attempts (default to false)</param>
        /// <param name="reverseDns">Enable reverse DNS lookups (default to true)</param>
        /// <param name="wordlistSize">Wordlist size for subdomain brute-forcing (default to WordlistSizeEnum.Medium)</param>
        [JsonConstructor]
        public DnsEnumConfig(Option<bool?> subdomainEnum = default, Option<bool?> zoneTransfer = default, Option<bool?> reverseDns = default, Option<WordlistSizeEnum?> wordlistSize = default)
        {
            SubdomainEnumOption = subdomainEnum;
            ZoneTransferOption = zoneTransfer;
            ReverseDnsOption = reverseDns;
            WordlistSizeOption = wordlistSize;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Wordlist size for subdomain brute-forcing
        /// </summary>
        /// <value>Wordlist size for subdomain brute-forcing</value>
        public enum WordlistSizeEnum
        {
            /// <summary>
            /// Enum Small for value: small
            /// </summary>
            Small = 1,

            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            Medium = 2,

            /// <summary>
            /// Enum Large for value: large
            /// </summary>
            Large = 3
        }

        /// <summary>
        /// Returns a <see cref="WordlistSizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static WordlistSizeEnum WordlistSizeEnumFromString(string value)
        {
            if (value.Equals("small"))
                return WordlistSizeEnum.Small;

            if (value.Equals("medium"))
                return WordlistSizeEnum.Medium;

            if (value.Equals("large"))
                return WordlistSizeEnum.Large;

            throw new NotImplementedException($"Could not convert value to type WordlistSizeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="WordlistSizeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static WordlistSizeEnum? WordlistSizeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("small"))
                return WordlistSizeEnum.Small;

            if (value.Equals("medium"))
                return WordlistSizeEnum.Medium;

            if (value.Equals("large"))
                return WordlistSizeEnum.Large;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="WordlistSizeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string WordlistSizeEnumToJsonValue(WordlistSizeEnum? value)
        {
            if (value == WordlistSizeEnum.Small)
                return "small";

            if (value == WordlistSizeEnum.Medium)
                return "medium";

            if (value == WordlistSizeEnum.Large)
                return "large";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of WordlistSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WordlistSizeEnum?> WordlistSizeOption { get; private set; }

        /// <summary>
        /// Wordlist size for subdomain brute-forcing
        /// </summary>
        /// <value>Wordlist size for subdomain brute-forcing</value>
        /* <example>medium</example> */
        [JsonPropertyName("wordlist_size")]
        public WordlistSizeEnum? WordlistSize { get { return this.WordlistSizeOption; } set { this.WordlistSizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of SubdomainEnum
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> SubdomainEnumOption { get; private set; }

        /// <summary>
        /// Enable subdomain enumeration
        /// </summary>
        /// <value>Enable subdomain enumeration</value>
        /* <example>true</example> */
        [JsonPropertyName("subdomain_enum")]
        public bool? SubdomainEnum { get { return this.SubdomainEnumOption; } set { this.SubdomainEnumOption = new(value); } }

        /// <summary>
        /// Used to track the state of ZoneTransfer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ZoneTransferOption { get; private set; }

        /// <summary>
        /// Enable DNS zone transfer attempts
        /// </summary>
        /// <value>Enable DNS zone transfer attempts</value>
        /* <example>false</example> */
        [JsonPropertyName("zone_transfer")]
        public bool? ZoneTransfer { get { return this.ZoneTransferOption; } set { this.ZoneTransferOption = new(value); } }

        /// <summary>
        /// Used to track the state of ReverseDns
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ReverseDnsOption { get; private set; }

        /// <summary>
        /// Enable reverse DNS lookups
        /// </summary>
        /// <value>Enable reverse DNS lookups</value>
        /* <example>true</example> */
        [JsonPropertyName("reverse_dns")]
        public bool? ReverseDns { get { return this.ReverseDnsOption; } set { this.ReverseDnsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DnsEnumConfig {\n");
            sb.Append("  SubdomainEnum: ").Append(SubdomainEnum).Append("\n");
            sb.Append("  ZoneTransfer: ").Append(ZoneTransfer).Append("\n");
            sb.Append("  ReverseDns: ").Append(ReverseDns).Append("\n");
            sb.Append("  WordlistSize: ").Append(WordlistSize).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DnsEnumConfig" />
    /// </summary>
    public class DnsEnumConfigJsonConverter : JsonConverter<DnsEnumConfig>
    {
        /// <summary>
        /// Deserializes json to <see cref="DnsEnumConfig" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DnsEnumConfig Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> subdomainEnum = default;
            Option<bool?> zoneTransfer = default;
            Option<bool?> reverseDns = default;
            Option<DnsEnumConfig.WordlistSizeEnum?> wordlistSize = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "subdomain_enum":
                            subdomainEnum = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "zone_transfer":
                            zoneTransfer = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "reverse_dns":
                            reverseDns = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "wordlist_size":
                            string wordlistSizeRawValue = utf8JsonReader.GetString();
                            if (wordlistSizeRawValue != null)
                                wordlistSize = new Option<DnsEnumConfig.WordlistSizeEnum?>(DnsEnumConfig.WordlistSizeEnumFromStringOrDefault(wordlistSizeRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (subdomainEnum.IsSet && subdomainEnum.Value == null)
                throw new ArgumentNullException(nameof(subdomainEnum), "Property is not nullable for class DnsEnumConfig.");

            if (zoneTransfer.IsSet && zoneTransfer.Value == null)
                throw new ArgumentNullException(nameof(zoneTransfer), "Property is not nullable for class DnsEnumConfig.");

            if (reverseDns.IsSet && reverseDns.Value == null)
                throw new ArgumentNullException(nameof(reverseDns), "Property is not nullable for class DnsEnumConfig.");

            if (wordlistSize.IsSet && wordlistSize.Value == null)
                throw new ArgumentNullException(nameof(wordlistSize), "Property is not nullable for class DnsEnumConfig.");

            return new DnsEnumConfig(subdomainEnum, zoneTransfer, reverseDns, wordlistSize);
        }

        /// <summary>
        /// Serializes a <see cref="DnsEnumConfig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dnsEnumConfig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DnsEnumConfig dnsEnumConfig, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, dnsEnumConfig, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DnsEnumConfig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="dnsEnumConfig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DnsEnumConfig dnsEnumConfig, JsonSerializerOptions jsonSerializerOptions)
        {
            if (dnsEnumConfig.SubdomainEnumOption.IsSet)
                writer.WriteBoolean("subdomain_enum", dnsEnumConfig.SubdomainEnumOption.Value.Value);

            if (dnsEnumConfig.ZoneTransferOption.IsSet)
                writer.WriteBoolean("zone_transfer", dnsEnumConfig.ZoneTransferOption.Value.Value);

            if (dnsEnumConfig.ReverseDnsOption.IsSet)
                writer.WriteBoolean("reverse_dns", dnsEnumConfig.ReverseDnsOption.Value.Value);

            var wordlistSizeRawValue = DnsEnumConfig.WordlistSizeEnumToJsonValue(dnsEnumConfig.WordlistSizeOption.Value.Value);
            writer.WriteString("wordlist_size", wordlistSizeRawValue);
        }
    }
}
