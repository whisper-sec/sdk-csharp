// <auto-generated>
/*
 * Whisper API v1
 *
 * <h2>The Foundational Intelligence Layer for the Internet</h2> <p>The Whisper API provides comprehensive, real-time intelligence on any internet asset. By connecting billions of data points across live internet routing, historical registration records, and deep resolution data, our API moves beyond simple enrichment to deliver predictive, context-rich insights.</p> <p>This document is the single source of truth for our v1 API. It is designed for security experts, developers, and automated systems to understand and leverage the full power of our platform.</p>  <h3>üöÄ Quick Start</h3> <p><b>1. Get your API key:</b> <a href=\"https://dash.whisper.security\">Sign up at dash.whisper.security</a></p> <p><b>2. Make your first request:</b></p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" https://api.whisper.security/v1/indicators/ip/8.8.8.8</code></pre> <p><b>3. Explore the API:</b> Use the \"Try it out\" button in each endpoint below to test interactively.</p>  <h3>üéØ Key Features</h3> <ul>     <li><b>Unified & Simple:</b> Small set of powerful, resource-oriented endpoints</li>     <li><b>Performant by Design:</b> Asynchronous-first with strategic caching (&lt;500ms typical response)</li>     <li><b>Workflow-Oriented:</b> Built for real-world security operations, not just data dumps</li>     <li><b>Comprehensive:</b> IP, Domain, DNS, WHOIS, Routing, Geolocation, Screenshots, Monitoring</li> </ul>  <h3>‚ö° Performance Targets</h3> <table>     <tr><th>Endpoint Type</th><th>Response Time</th><th>Use Case</th></tr>     <tr><td>Geolocation</td><td>&lt;150ms</td><td>Real-time fraud detection</td></tr>     <tr><td>Single Indicator</td><td>&lt;500ms</td><td>Incident response enrichment</td></tr>     <tr><td>With Routing Data</td><td>&lt;2s (cached: 200ms)</td><td>Deep network analysis</td></tr>     <tr><td>Bulk Operations</td><td>5-30s</td><td>Batch log enrichment</td></tr>     <tr><td>Search/Discovery</td><td>10-60s</td><td>Threat hunting</td></tr> </table>  <h3>üîê Authentication</h3> <p>All endpoints require Bearer token authentication. Click the <b>\"Authorize\"</b> button above and enter your API key.</p> <pre><code>Authorization: Bearer wsk_live_1234567890abcdef</code></pre>  <h3>üìä Rate Limits</h3> <table>     <tr><th>Category</th><th>Limit</th></tr>     <tr><td>Standard Enrichment</td><td>100 req/min</td></tr>     <tr><td>Bulk Operations</td><td>10 req/min</td></tr>     <tr><td>Search/Discovery</td><td>5 req/min</td></tr>     <tr><td>Screenshots</td><td>10 req/min</td></tr> </table> <p><i>Rate limits return HTTP 429. Retry after the time specified in the <code>Retry-After</code> header.</i></p>  <h3>üìö Resources</h3> <ul>     <li><a href=\"https://docs.whisper.security\">Full Documentation</a></li>     <li><a href=\"https://docs.whisper.security/quickstart\">Quick Start Guide</a></li>     <li><a href=\"https://docs.whisper.security/examples\">Code Examples</a></li>     <li><a href=\"https://whisper.security/support\">API Support</a></li> </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Whisper.Api.Sdk.Client;

namespace Whisper.Api.Sdk.Model
{
    /// <summary>
    /// Advanced configuration options for bulk processing behavior
    /// </summary>
    public partial class BulkOptions : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkOptions" /> class.
        /// </summary>
        /// <param name="parallelProcessing">Enable parallel processing of indicators for faster results (default to true)</param>
        /// <param name="batchSize">Number of indicators to process in each batch. Smaller batches &#x3D; more frequent progress updates (default to 10)</param>
        /// <param name="timeoutPerIndicator">Maximum time in milliseconds to wait for each indicator before timing out (default to 5000)</param>
        /// <param name="continueOnError">Continue processing remaining indicators if one fails. Recommended for large batches. (default to true)</param>
        /// <param name="includeFailed">Include failed indicators in the response with error details (default to false)</param>
        [JsonConstructor]
        public BulkOptions(Option<bool?> parallelProcessing = default, Option<int?> batchSize = default, Option<int?> timeoutPerIndicator = default, Option<bool?> continueOnError = default, Option<bool?> includeFailed = default)
        {
            ParallelProcessingOption = parallelProcessing;
            BatchSizeOption = batchSize;
            TimeoutPerIndicatorOption = timeoutPerIndicator;
            ContinueOnErrorOption = continueOnError;
            IncludeFailedOption = includeFailed;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ParallelProcessing
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ParallelProcessingOption { get; private set; }

        /// <summary>
        /// Enable parallel processing of indicators for faster results
        /// </summary>
        /// <value>Enable parallel processing of indicators for faster results</value>
        /* <example>true</example> */
        [JsonPropertyName("parallel_processing")]
        public bool? ParallelProcessing { get { return this.ParallelProcessingOption; } set { this.ParallelProcessingOption = new(value); } }

        /// <summary>
        /// Used to track the state of BatchSize
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BatchSizeOption { get; private set; }

        /// <summary>
        /// Number of indicators to process in each batch. Smaller batches &#x3D; more frequent progress updates
        /// </summary>
        /// <value>Number of indicators to process in each batch. Smaller batches &#x3D; more frequent progress updates</value>
        /* <example>10</example> */
        [JsonPropertyName("batch_size")]
        public int? BatchSize { get { return this.BatchSizeOption; } set { this.BatchSizeOption = new(value); } }

        /// <summary>
        /// Used to track the state of TimeoutPerIndicator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TimeoutPerIndicatorOption { get; private set; }

        /// <summary>
        /// Maximum time in milliseconds to wait for each indicator before timing out
        /// </summary>
        /// <value>Maximum time in milliseconds to wait for each indicator before timing out</value>
        /* <example>5000</example> */
        [JsonPropertyName("timeout_per_indicator")]
        public int? TimeoutPerIndicator { get { return this.TimeoutPerIndicatorOption; } set { this.TimeoutPerIndicatorOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContinueOnError
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> ContinueOnErrorOption { get; private set; }

        /// <summary>
        /// Continue processing remaining indicators if one fails. Recommended for large batches.
        /// </summary>
        /// <value>Continue processing remaining indicators if one fails. Recommended for large batches.</value>
        /* <example>true</example> */
        [JsonPropertyName("continue_on_error")]
        public bool? ContinueOnError { get { return this.ContinueOnErrorOption; } set { this.ContinueOnErrorOption = new(value); } }

        /// <summary>
        /// Used to track the state of IncludeFailed
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IncludeFailedOption { get; private set; }

        /// <summary>
        /// Include failed indicators in the response with error details
        /// </summary>
        /// <value>Include failed indicators in the response with error details</value>
        /* <example>false</example> */
        [JsonPropertyName("include_failed")]
        public bool? IncludeFailed { get { return this.IncludeFailedOption; } set { this.IncludeFailedOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BulkOptions {\n");
            sb.Append("  ParallelProcessing: ").Append(ParallelProcessing).Append("\n");
            sb.Append("  BatchSize: ").Append(BatchSize).Append("\n");
            sb.Append("  TimeoutPerIndicator: ").Append(TimeoutPerIndicator).Append("\n");
            sb.Append("  ContinueOnError: ").Append(ContinueOnError).Append("\n");
            sb.Append("  IncludeFailed: ").Append(IncludeFailed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BatchSize (int) maximum
            if (this.BatchSizeOption.IsSet && this.BatchSizeOption.Value > (int)50)
            {
                yield return new ValidationResult("Invalid value for BatchSize, must be a value less than or equal to 50.", new [] { "BatchSize" });
            }

            // BatchSize (int) minimum
            if (this.BatchSizeOption.IsSet && this.BatchSizeOption.Value < (int)1)
            {
                yield return new ValidationResult("Invalid value for BatchSize, must be a value greater than or equal to 1.", new [] { "BatchSize" });
            }

            // TimeoutPerIndicator (int) maximum
            if (this.TimeoutPerIndicatorOption.IsSet && this.TimeoutPerIndicatorOption.Value > (int)30000)
            {
                yield return new ValidationResult("Invalid value for TimeoutPerIndicator, must be a value less than or equal to 30000.", new [] { "TimeoutPerIndicator" });
            }

            // TimeoutPerIndicator (int) minimum
            if (this.TimeoutPerIndicatorOption.IsSet && this.TimeoutPerIndicatorOption.Value < (int)1000)
            {
                yield return new ValidationResult("Invalid value for TimeoutPerIndicator, must be a value greater than or equal to 1000.", new [] { "TimeoutPerIndicator" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="BulkOptions" />
    /// </summary>
    public class BulkOptionsJsonConverter : JsonConverter<BulkOptions>
    {
        /// <summary>
        /// Deserializes json to <see cref="BulkOptions" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override BulkOptions Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> parallelProcessing = default;
            Option<int?> batchSize = default;
            Option<int?> timeoutPerIndicator = default;
            Option<bool?> continueOnError = default;
            Option<bool?> includeFailed = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "parallel_processing":
                            parallelProcessing = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "batch_size":
                            batchSize = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "timeout_per_indicator":
                            timeoutPerIndicator = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "continue_on_error":
                            continueOnError = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "include_failed":
                            includeFailed = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (parallelProcessing.IsSet && parallelProcessing.Value == null)
                throw new ArgumentNullException(nameof(parallelProcessing), "Property is not nullable for class BulkOptions.");

            if (batchSize.IsSet && batchSize.Value == null)
                throw new ArgumentNullException(nameof(batchSize), "Property is not nullable for class BulkOptions.");

            if (timeoutPerIndicator.IsSet && timeoutPerIndicator.Value == null)
                throw new ArgumentNullException(nameof(timeoutPerIndicator), "Property is not nullable for class BulkOptions.");

            if (continueOnError.IsSet && continueOnError.Value == null)
                throw new ArgumentNullException(nameof(continueOnError), "Property is not nullable for class BulkOptions.");

            if (includeFailed.IsSet && includeFailed.Value == null)
                throw new ArgumentNullException(nameof(includeFailed), "Property is not nullable for class BulkOptions.");

            return new BulkOptions(parallelProcessing, batchSize, timeoutPerIndicator, continueOnError, includeFailed);
        }

        /// <summary>
        /// Serializes a <see cref="BulkOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bulkOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, BulkOptions bulkOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, bulkOptions, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="BulkOptions" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="bulkOptions"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, BulkOptions bulkOptions, JsonSerializerOptions jsonSerializerOptions)
        {
            if (bulkOptions.ParallelProcessingOption.IsSet)
                writer.WriteBoolean("parallel_processing", bulkOptions.ParallelProcessingOption.Value.Value);

            if (bulkOptions.BatchSizeOption.IsSet)
                writer.WriteNumber("batch_size", bulkOptions.BatchSizeOption.Value.Value);

            if (bulkOptions.TimeoutPerIndicatorOption.IsSet)
                writer.WriteNumber("timeout_per_indicator", bulkOptions.TimeoutPerIndicatorOption.Value.Value);

            if (bulkOptions.ContinueOnErrorOption.IsSet)
                writer.WriteBoolean("continue_on_error", bulkOptions.ContinueOnErrorOption.Value.Value);

            if (bulkOptions.IncludeFailedOption.IsSet)
                writer.WriteBoolean("include_failed", bulkOptions.IncludeFailedOption.Value.Value);
        }
    }
}
