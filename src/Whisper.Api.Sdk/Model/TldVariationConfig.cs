// <auto-generated>
/*
 * Whisper API v1
 *
 * <h2>The Foundational Intelligence Layer for the Internet</h2> <p>The Whisper API provides comprehensive, real-time intelligence on any internet asset. By connecting billions of data points across live internet routing, historical registration records, and deep resolution data, our API moves beyond simple enrichment to deliver predictive, context-rich insights.</p> <p>This document is the single source of truth for our v1 API. It is designed for security experts, developers, and automated systems to understand and leverage the full power of our platform.</p>  <h3>üöÄ Quick Start</h3> <p><b>1. Get your API key:</b> <a href=\"https://dash.whisper.security\">Sign up at dash.whisper.security</a></p> <p><b>2. Make your first request:</b></p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" https://api.whisper.security/v1/indicators/ip/8.8.8.8</code></pre> <p><b>3. Explore the API:</b> Use the \"Try it out\" button in each endpoint below to test interactively.</p>  <h3>üéØ Key Features</h3> <ul>     <li><b>Unified & Simple:</b> Small set of powerful, resource-oriented endpoints</li>     <li><b>Performant by Design:</b> Asynchronous-first with strategic caching (&lt;500ms typical response)</li>     <li><b>Workflow-Oriented:</b> Built for real-world security operations, not just data dumps</li>     <li><b>Comprehensive:</b> IP, Domain, DNS, WHOIS, Routing, Geolocation, Screenshots, Monitoring</li> </ul>  <h3>‚ö° Performance Targets</h3> <table>     <tr><th>Endpoint Type</th><th>Response Time</th><th>Use Case</th></tr>     <tr><td>Geolocation</td><td>&lt;150ms</td><td>Real-time fraud detection</td></tr>     <tr><td>Single Indicator</td><td>&lt;500ms</td><td>Incident response enrichment</td></tr>     <tr><td>With Routing Data</td><td>&lt;2s (cached: 200ms)</td><td>Deep network analysis</td></tr>     <tr><td>Bulk Operations</td><td>5-30s</td><td>Batch log enrichment</td></tr>     <tr><td>Search/Discovery</td><td>10-60s</td><td>Threat hunting</td></tr> </table>  <h3>üîê Authentication</h3> <p>All endpoints require Bearer token authentication. Click the <b>\"Authorize\"</b> button above and enter your API key.</p> <pre><code>Authorization: Bearer wsk_live_1234567890abcdef</code></pre>  <h3>üìä Rate Limits</h3> <table>     <tr><th>Category</th><th>Limit</th></tr>     <tr><td>Standard Enrichment</td><td>100 req/min</td></tr>     <tr><td>Bulk Operations</td><td>10 req/min</td></tr>     <tr><td>Search/Discovery</td><td>5 req/min</td></tr>     <tr><td>Screenshots</td><td>10 req/min</td></tr> </table> <p><i>Rate limits return HTTP 429. Retry after the time specified in the <code>Retry-After</code> header.</i></p>  <h3>üìö Resources</h3> <ul>     <li><a href=\"https://docs.whisper.security\">Full Documentation</a></li>     <li><a href=\"https://docs.whisper.security/quickstart\">Quick Start Guide</a></li>     <li><a href=\"https://docs.whisper.security/examples\">Code Examples</a></li>     <li><a href=\"https://whisper.security/support\">API Support</a></li> </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Whisper.Api.Sdk.Client;

namespace Whisper.Api.Sdk.Model
{
    /// <summary>
    /// Configuration for top-level domain variations
    /// </summary>
    public partial class TldVariationConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TldVariationConfig" /> class.
        /// </summary>
        /// <param name="commonTlds">Include common TLD variations (.com, .net, .org, etc.) (default to true)</param>
        /// <param name="countryTlds">Include country-code TLDs (default to false)</param>
        /// <param name="newGtlds">Include new generic TLDs (.app, .dev, .cloud, etc.) (default to true)</param>
        /// <param name="customTlds">Custom TLDs to check</param>
        [JsonConstructor]
        public TldVariationConfig(Option<bool?> commonTlds = default, Option<bool?> countryTlds = default, Option<bool?> newGtlds = default, Option<HashSet<string>> customTlds = default)
        {
            CommonTldsOption = commonTlds;
            CountryTldsOption = countryTlds;
            NewGtldsOption = newGtlds;
            CustomTldsOption = customTlds;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of CommonTlds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CommonTldsOption { get; private set; }

        /// <summary>
        /// Include common TLD variations (.com, .net, .org, etc.)
        /// </summary>
        /// <value>Include common TLD variations (.com, .net, .org, etc.)</value>
        /* <example>true</example> */
        [JsonPropertyName("common_tlds")]
        public bool? CommonTlds { get { return this.CommonTldsOption; } set { this.CommonTldsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CountryTlds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> CountryTldsOption { get; private set; }

        /// <summary>
        /// Include country-code TLDs
        /// </summary>
        /// <value>Include country-code TLDs</value>
        /* <example>true</example> */
        [JsonPropertyName("country_tlds")]
        public bool? CountryTlds { get { return this.CountryTldsOption; } set { this.CountryTldsOption = new(value); } }

        /// <summary>
        /// Used to track the state of NewGtlds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> NewGtldsOption { get; private set; }

        /// <summary>
        /// Include new generic TLDs (.app, .dev, .cloud, etc.)
        /// </summary>
        /// <value>Include new generic TLDs (.app, .dev, .cloud, etc.)</value>
        /* <example>true</example> */
        [JsonPropertyName("new_gtlds")]
        public bool? NewGtlds { get { return this.NewGtldsOption; } set { this.NewGtldsOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomTlds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<HashSet<string>> CustomTldsOption { get; private set; }

        /// <summary>
        /// Custom TLDs to check
        /// </summary>
        /// <value>Custom TLDs to check</value>
        /* <example>[&quot;io&quot;,&quot;ai&quot;,&quot;tech&quot;]</example> */
        [JsonPropertyName("custom_tlds")]
        public HashSet<string> CustomTlds { get { return this.CustomTldsOption; } set { this.CustomTldsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TldVariationConfig {\n");
            sb.Append("  CommonTlds: ").Append(CommonTlds).Append("\n");
            sb.Append("  CountryTlds: ").Append(CountryTlds).Append("\n");
            sb.Append("  NewGtlds: ").Append(NewGtlds).Append("\n");
            sb.Append("  CustomTlds: ").Append(CustomTlds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TldVariationConfig" />
    /// </summary>
    public class TldVariationConfigJsonConverter : JsonConverter<TldVariationConfig>
    {
        /// <summary>
        /// Deserializes json to <see cref="TldVariationConfig" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TldVariationConfig Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> commonTlds = default;
            Option<bool?> countryTlds = default;
            Option<bool?> newGtlds = default;
            Option<HashSet<string>> customTlds = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "common_tlds":
                            commonTlds = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "country_tlds":
                            countryTlds = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "new_gtlds":
                            newGtlds = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "custom_tlds":
                            customTlds = new Option<HashSet<string>>(JsonSerializer.Deserialize<HashSet<string>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (commonTlds.IsSet && commonTlds.Value == null)
                throw new ArgumentNullException(nameof(commonTlds), "Property is not nullable for class TldVariationConfig.");

            if (countryTlds.IsSet && countryTlds.Value == null)
                throw new ArgumentNullException(nameof(countryTlds), "Property is not nullable for class TldVariationConfig.");

            if (newGtlds.IsSet && newGtlds.Value == null)
                throw new ArgumentNullException(nameof(newGtlds), "Property is not nullable for class TldVariationConfig.");

            if (customTlds.IsSet && customTlds.Value == null)
                throw new ArgumentNullException(nameof(customTlds), "Property is not nullable for class TldVariationConfig.");

            return new TldVariationConfig(commonTlds, countryTlds, newGtlds, customTlds);
        }

        /// <summary>
        /// Serializes a <see cref="TldVariationConfig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tldVariationConfig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TldVariationConfig tldVariationConfig, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, tldVariationConfig, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TldVariationConfig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="tldVariationConfig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TldVariationConfig tldVariationConfig, JsonSerializerOptions jsonSerializerOptions)
        {
            if (tldVariationConfig.CustomTldsOption.IsSet && tldVariationConfig.CustomTlds == null)
                throw new ArgumentNullException(nameof(tldVariationConfig.CustomTlds), "Property is required for class TldVariationConfig.");

            if (tldVariationConfig.CommonTldsOption.IsSet)
                writer.WriteBoolean("common_tlds", tldVariationConfig.CommonTldsOption.Value.Value);

            if (tldVariationConfig.CountryTldsOption.IsSet)
                writer.WriteBoolean("country_tlds", tldVariationConfig.CountryTldsOption.Value.Value);

            if (tldVariationConfig.NewGtldsOption.IsSet)
                writer.WriteBoolean("new_gtlds", tldVariationConfig.NewGtldsOption.Value.Value);

            if (tldVariationConfig.CustomTldsOption.IsSet)
            {
                writer.WritePropertyName("custom_tlds");
                JsonSerializer.Serialize(writer, tldVariationConfig.CustomTlds, jsonSerializerOptions);
            }
        }
    }
}
