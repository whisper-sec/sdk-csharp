// <auto-generated>
/*
 * Whisper API v1
 *
 * <h2>The Foundational Intelligence Layer for the Internet</h2> <p>The Whisper API provides comprehensive, real-time intelligence on any internet asset. By connecting billions of data points across live internet routing, historical registration records, and deep resolution data, our API moves beyond simple enrichment to deliver predictive, context-rich insights.</p> <p>This document is the single source of truth for our v1 API. It is designed for security experts, developers, and automated systems to understand and leverage the full power of our platform.</p>  <h3>üöÄ Quick Start</h3> <p><b>1. Get your API key:</b> <a href=\"https://dash.whisper.security\">Sign up at dash.whisper.security</a></p> <p><b>2. Make your first request:</b></p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" https://api.whisper.security/v1/indicators/ip/8.8.8.8</code></pre> <p><b>3. Explore the API:</b> Use the \"Try it out\" button in each endpoint below to test interactively.</p>  <h3>üéØ Key Features</h3> <ul>     <li><b>Unified & Simple:</b> Small set of powerful, resource-oriented endpoints</li>     <li><b>Performant by Design:</b> Asynchronous-first with strategic caching (&lt;500ms typical response)</li>     <li><b>Workflow-Oriented:</b> Built for real-world security operations, not just data dumps</li>     <li><b>Comprehensive:</b> IP, Domain, DNS, WHOIS, Routing, Geolocation, Screenshots, Monitoring</li> </ul>  <h3>‚ö° Performance Targets</h3> <table>     <tr><th>Endpoint Type</th><th>Response Time</th><th>Use Case</th></tr>     <tr><td>Geolocation</td><td>&lt;150ms</td><td>Real-time fraud detection</td></tr>     <tr><td>Single Indicator</td><td>&lt;500ms</td><td>Incident response enrichment</td></tr>     <tr><td>With Routing Data</td><td>&lt;2s (cached: 200ms)</td><td>Deep network analysis</td></tr>     <tr><td>Bulk Operations</td><td>5-30s</td><td>Batch log enrichment</td></tr>     <tr><td>Search/Discovery</td><td>10-60s</td><td>Threat hunting</td></tr> </table>  <h3>üîê Authentication</h3> <p>All endpoints require Bearer token authentication. Click the <b>\"Authorize\"</b> button above and enter your API key.</p> <pre><code>Authorization: Bearer wsk_live_1234567890abcdef</code></pre>  <h3>üìä Rate Limits</h3> <table>     <tr><th>Category</th><th>Limit</th></tr>     <tr><td>Standard Enrichment</td><td>100 req/min</td></tr>     <tr><td>Bulk Operations</td><td>10 req/min</td></tr>     <tr><td>Search/Discovery</td><td>5 req/min</td></tr>     <tr><td>Screenshots</td><td>10 req/min</td></tr> </table> <p><i>Rate limits return HTTP 429. Retry after the time specified in the <code>Retry-After</code> header.</i></p>  <h3>üìö Resources</h3> <ul>     <li><a href=\"https://docs.whisper.security\">Full Documentation</a></li>     <li><a href=\"https://docs.whisper.security/quickstart\">Quick Start Guide</a></li>     <li><a href=\"https://docs.whisper.security/examples\">Code Examples</a></li>     <li><a href=\"https://whisper.security/support\">API Support</a></li> </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Whisper.Api.Sdk.Client;

namespace Whisper.Api.Sdk.Model
{
    /// <summary>
    /// Configuration for scheduling recurring screenshot captures
    /// </summary>
    public partial class ScheduleConfig : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleConfig" /> class.
        /// </summary>
        /// <param name="cron">Cron expression for scheduling</param>
        /// <param name="frequency">Frequency of captures</param>
        /// <param name="timezone">Timezone for scheduled captures (default to &quot;UTC&quot;)</param>
        /// <param name="retentionCount">Maximum number of captures to retain (default to 30)</param>
        /// <param name="enabled">Enable/disable the schedule (default to true)</param>
        [JsonConstructor]
        public ScheduleConfig(Option<string> cron = default, Option<FrequencyEnum?> frequency = default, Option<string> timezone = default, Option<int?> retentionCount = default, Option<bool?> enabled = default)
        {
            CronOption = cron;
            FrequencyOption = frequency;
            TimezoneOption = timezone;
            RetentionCountOption = retentionCount;
            EnabledOption = enabled;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Frequency of captures
        /// </summary>
        /// <value>Frequency of captures</value>
        public enum FrequencyEnum
        {
            /// <summary>
            /// Enum Hourly for value: hourly
            /// </summary>
            Hourly = 1,

            /// <summary>
            /// Enum Daily for value: daily
            /// </summary>
            Daily = 2,

            /// <summary>
            /// Enum Weekly for value: weekly
            /// </summary>
            Weekly = 3,

            /// <summary>
            /// Enum Monthly for value: monthly
            /// </summary>
            Monthly = 4
        }

        /// <summary>
        /// Returns a <see cref="FrequencyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static FrequencyEnum FrequencyEnumFromString(string value)
        {
            if (value.Equals("hourly"))
                return FrequencyEnum.Hourly;

            if (value.Equals("daily"))
                return FrequencyEnum.Daily;

            if (value.Equals("weekly"))
                return FrequencyEnum.Weekly;

            if (value.Equals("monthly"))
                return FrequencyEnum.Monthly;

            throw new NotImplementedException($"Could not convert value to type FrequencyEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="FrequencyEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static FrequencyEnum? FrequencyEnumFromStringOrDefault(string value)
        {
            if (value.Equals("hourly"))
                return FrequencyEnum.Hourly;

            if (value.Equals("daily"))
                return FrequencyEnum.Daily;

            if (value.Equals("weekly"))
                return FrequencyEnum.Weekly;

            if (value.Equals("monthly"))
                return FrequencyEnum.Monthly;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="FrequencyEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string FrequencyEnumToJsonValue(FrequencyEnum? value)
        {
            if (value == FrequencyEnum.Hourly)
                return "hourly";

            if (value == FrequencyEnum.Daily)
                return "daily";

            if (value == FrequencyEnum.Weekly)
                return "weekly";

            if (value == FrequencyEnum.Monthly)
                return "monthly";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Frequency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<FrequencyEnum?> FrequencyOption { get; private set; }

        /// <summary>
        /// Frequency of captures
        /// </summary>
        /// <value>Frequency of captures</value>
        /* <example>hourly</example> */
        [JsonPropertyName("frequency")]
        public FrequencyEnum? Frequency { get { return this.FrequencyOption; } set { this.FrequencyOption = new(value); } }

        /// <summary>
        /// Used to track the state of Cron
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CronOption { get; private set; }

        /// <summary>
        /// Cron expression for scheduling
        /// </summary>
        /// <value>Cron expression for scheduling</value>
        /* <example>0 0 * * * *</example> */
        [JsonPropertyName("cron")]
        public string Cron { get { return this.CronOption; } set { this.CronOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timezone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> TimezoneOption { get; private set; }

        /// <summary>
        /// Timezone for scheduled captures
        /// </summary>
        /// <value>Timezone for scheduled captures</value>
        /* <example>UTC</example> */
        [JsonPropertyName("timezone")]
        public string Timezone { get { return this.TimezoneOption; } set { this.TimezoneOption = new(value); } }

        /// <summary>
        /// Used to track the state of RetentionCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> RetentionCountOption { get; private set; }

        /// <summary>
        /// Maximum number of captures to retain
        /// </summary>
        /// <value>Maximum number of captures to retain</value>
        /* <example>30</example> */
        [JsonPropertyName("retention_count")]
        public int? RetentionCount { get { return this.RetentionCountOption; } set { this.RetentionCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of Enabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnabledOption { get; private set; }

        /// <summary>
        /// Enable/disable the schedule
        /// </summary>
        /// <value>Enable/disable the schedule</value>
        /* <example>true</example> */
        [JsonPropertyName("enabled")]
        public bool? Enabled { get { return this.EnabledOption; } set { this.EnabledOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduleConfig {\n");
            sb.Append("  Cron: ").Append(Cron).Append("\n");
            sb.Append("  Frequency: ").Append(Frequency).Append("\n");
            sb.Append("  Timezone: ").Append(Timezone).Append("\n");
            sb.Append("  RetentionCount: ").Append(RetentionCount).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.CronOption.Value != null) {
                // Cron (string) pattern
                Regex regexCron = new Regex(@"Cron expression", RegexOptions.CultureInvariant);

                if (this.CronOption.Value != null &&!regexCron.Match(this.CronOption.Value).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Cron, must match a pattern of " + regexCron, new [] { "Cron" });
                }
            }

            // RetentionCount (int) maximum
            if (this.RetentionCountOption.IsSet && this.RetentionCountOption.Value > (int)1000)
            {
                yield return new ValidationResult("Invalid value for RetentionCount, must be a value less than or equal to 1000.", new [] { "RetentionCount" });
            }

            // RetentionCount (int) minimum
            if (this.RetentionCountOption.IsSet && this.RetentionCountOption.Value < (int)1)
            {
                yield return new ValidationResult("Invalid value for RetentionCount, must be a value greater than or equal to 1.", new [] { "RetentionCount" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ScheduleConfig" />
    /// </summary>
    public class ScheduleConfigJsonConverter : JsonConverter<ScheduleConfig>
    {
        /// <summary>
        /// Deserializes json to <see cref="ScheduleConfig" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ScheduleConfig Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> cron = default;
            Option<ScheduleConfig.FrequencyEnum?> frequency = default;
            Option<string> timezone = default;
            Option<int?> retentionCount = default;
            Option<bool?> enabled = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "cron":
                            cron = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "frequency":
                            string frequencyRawValue = utf8JsonReader.GetString();
                            if (frequencyRawValue != null)
                                frequency = new Option<ScheduleConfig.FrequencyEnum?>(ScheduleConfig.FrequencyEnumFromStringOrDefault(frequencyRawValue));
                            break;
                        case "timezone":
                            timezone = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "retention_count":
                            retentionCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "enabled":
                            enabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (cron.IsSet && cron.Value == null)
                throw new ArgumentNullException(nameof(cron), "Property is not nullable for class ScheduleConfig.");

            if (frequency.IsSet && frequency.Value == null)
                throw new ArgumentNullException(nameof(frequency), "Property is not nullable for class ScheduleConfig.");

            if (timezone.IsSet && timezone.Value == null)
                throw new ArgumentNullException(nameof(timezone), "Property is not nullable for class ScheduleConfig.");

            if (retentionCount.IsSet && retentionCount.Value == null)
                throw new ArgumentNullException(nameof(retentionCount), "Property is not nullable for class ScheduleConfig.");

            if (enabled.IsSet && enabled.Value == null)
                throw new ArgumentNullException(nameof(enabled), "Property is not nullable for class ScheduleConfig.");

            return new ScheduleConfig(cron, frequency, timezone, retentionCount, enabled);
        }

        /// <summary>
        /// Serializes a <see cref="ScheduleConfig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="scheduleConfig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ScheduleConfig scheduleConfig, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, scheduleConfig, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ScheduleConfig" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="scheduleConfig"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ScheduleConfig scheduleConfig, JsonSerializerOptions jsonSerializerOptions)
        {
            if (scheduleConfig.CronOption.IsSet && scheduleConfig.Cron == null)
                throw new ArgumentNullException(nameof(scheduleConfig.Cron), "Property is required for class ScheduleConfig.");

            if (scheduleConfig.TimezoneOption.IsSet && scheduleConfig.Timezone == null)
                throw new ArgumentNullException(nameof(scheduleConfig.Timezone), "Property is required for class ScheduleConfig.");

            if (scheduleConfig.CronOption.IsSet)
                writer.WriteString("cron", scheduleConfig.Cron);

            var frequencyRawValue = ScheduleConfig.FrequencyEnumToJsonValue(scheduleConfig.FrequencyOption.Value.Value);
            writer.WriteString("frequency", frequencyRawValue);
            if (scheduleConfig.TimezoneOption.IsSet)
                writer.WriteString("timezone", scheduleConfig.Timezone);

            if (scheduleConfig.RetentionCountOption.IsSet)
                writer.WriteNumber("retention_count", scheduleConfig.RetentionCountOption.Value.Value);

            if (scheduleConfig.EnabledOption.IsSet)
                writer.WriteBoolean("enabled", scheduleConfig.EnabledOption.Value.Value);
        }
    }
}
