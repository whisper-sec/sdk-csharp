/*
 * Whisper API v1
 *
 * <h2>The Foundational Intelligence Layer for the Internet</h2> <p>The Whisper API provides comprehensive, real-time intelligence on any internet asset. By connecting billions of data points across live internet routing, historical registration records, and deep resolution data, our API moves beyond simple enrichment to deliver predictive, context-rich insights.</p> <p>This document is the single source of truth for our v1 API. It is designed for security experts, developers, and automated systems to understand and leverage the full power of our platform.</p>  <h3>üöÄ Quick Start</h3> <p><b>1. Get your API key:</b> <a href=\"https://dash.whisper.security\">Sign up at dash.whisper.security</a></p> <p><b>2. Make your first request:</b></p> <pre><code>curl -H \"Authorization: Bearer YOUR_API_KEY\" https://api.whisper.security/v1/indicators/ip/8.8.8.8</code></pre> <p><b>3. Explore the API:</b> Use the \"Try it out\" button in each endpoint below to test interactively.</p>  <h3>üéØ Key Features</h3> <ul>     <li><b>Unified & Simple:</b> Small set of powerful, resource-oriented endpoints</li>     <li><b>Performant by Design:</b> Asynchronous-first with strategic caching (&lt;500ms typical response)</li>     <li><b>Workflow-Oriented:</b> Built for real-world security operations, not just data dumps</li>     <li><b>Comprehensive:</b> IP, Domain, DNS, WHOIS, Routing, Geolocation, Screenshots, Monitoring</li> </ul>  <h3>‚ö° Performance Targets</h3> <table>     <tr><th>Endpoint Type</th><th>Response Time</th><th>Use Case</th></tr>     <tr><td>Geolocation</td><td>&lt;150ms</td><td>Real-time fraud detection</td></tr>     <tr><td>Single Indicator</td><td>&lt;500ms</td><td>Incident response enrichment</td></tr>     <tr><td>With Routing Data</td><td>&lt;2s (cached: 200ms)</td><td>Deep network analysis</td></tr>     <tr><td>Bulk Operations</td><td>5-30s</td><td>Batch log enrichment</td></tr>     <tr><td>Search/Discovery</td><td>10-60s</td><td>Threat hunting</td></tr> </table>  <h3>üîê Authentication</h3> <p>All endpoints require Bearer token authentication. Click the <b>\"Authorize\"</b> button above and enter your API key.</p> <pre><code>Authorization: Bearer wsk_live_1234567890abcdef</code></pre>  <h3>üìä Rate Limits</h3> <table>     <tr><th>Category</th><th>Limit</th></tr>     <tr><td>Standard Enrichment</td><td>100 req/min</td></tr>     <tr><td>Bulk Operations</td><td>10 req/min</td></tr>     <tr><td>Search/Discovery</td><td>5 req/min</td></tr>     <tr><td>Screenshots</td><td>10 req/min</td></tr> </table> <p><i>Rate limits return HTTP 429. Retry after the time specified in the <code>Retry-After</code> header.</i></p>  <h3>üìö Resources</h3> <ul>     <li><a href=\"https://docs.whisper.security\">Full Documentation</a></li>     <li><a href=\"https://docs.whisper.security/quickstart\">Quick Start Guide</a></li>     <li><a href=\"https://docs.whisper.security/examples\">Code Examples</a></li>     <li><a href=\"https://whisper.security/support\">API Support</a></li> </ul> 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Xunit;
using Microsoft.Extensions.DependencyInjection;
using Whisper.Api.Sdk.Api;
using Whisper.Api.Sdk.Model;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Whisper.Api.Sdk.Test.Api
{
    /// <summary>
    ///  Class for testing IndicatorsApi
    /// </summary>
    public sealed class IndicatorsApiTests : ApiTestsBase
    {
        private readonly IIndicatorsApi _instance;

        public IndicatorsApiTests(): base(Array.Empty<string>())
        {
            _instance = _host.Services.GetRequiredService<IIndicatorsApi>();
        }

        /// <summary>
        /// Test BulkEnrichment
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task BulkEnrichmentAsyncTest()
        {
            BulkRequest bulkRequest = default;
            var response = await _instance.BulkEnrichmentAsync(bulkRequest);
            var model = response.TooManyRequests();
            Assert.IsType<ErrorResponse>(model);
        }

        /// <summary>
        /// Test GenerateSimilarDomainsGet
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GenerateSimilarDomainsGetAsyncTest()
        {
            string domain = default;
            var response = await _instance.GenerateSimilarDomainsGetAsync(domain);
            var model = response.BadRequest();
            Assert.IsType<ErrorResponse>(model);
        }

        /// <summary>
        /// Test GenerateSimilarDomainsPost
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GenerateSimilarDomainsPostAsyncTest()
        {
            string domain = default;
            Client.Option<SimilarDomainRequest> similarDomainRequest = default;
            var response = await _instance.GenerateSimilarDomainsPostAsync(domain, similarDomainRequest);
            var model = response.BadRequest();
            Assert.IsType<ErrorResponse>(model);
        }

        /// <summary>
        /// Test GetIndicator
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetIndicatorAsyncTest()
        {
            string type = default;
            string value = default;
            Client.Option<string> include = default;
            var response = await _instance.GetIndicatorAsync(type, value, include);
            var model = response.TooManyRequests();
            Assert.IsType<ErrorResponse>(model);
        }

        /// <summary>
        /// Test GetIndicatorGraph
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetIndicatorGraphAsyncTest()
        {
            string type = default;
            string value = default;
            Client.Option<int> limit = default;
            var response = await _instance.GetIndicatorGraphAsync(type, value, limit);
            var model = response.BadRequest();
            Assert.IsType<ErrorResponse>(model);
        }

        /// <summary>
        /// Test GetIndicatorHistory
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetIndicatorHistoryAsyncTest()
        {
            string type = default;
            string value = default;
            Client.Option<string> historyType = default;
            var response = await _instance.GetIndicatorHistoryAsync(type, value, historyType);
            var model = response.Ok();
            Assert.IsType<HistoryResponse>(model);
        }

        /// <summary>
        /// Test GetSubdomains
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task GetSubdomainsAsyncTest()
        {
            string domain = default;
            Client.Option<int> limit = default;
            var response = await _instance.GetSubdomainsAsync(domain, limit);
            var model = response.NotFound();
            Assert.IsType<ErrorResponse>(model);
        }

        /// <summary>
        /// Test SearchIndicators
        /// </summary>
        [Fact (Skip = "not implemented")]
        public async Task SearchIndicatorsAsyncTest()
        {
            SearchRequest searchRequest = default;
            var response = await _instance.SearchIndicatorsAsync(searchRequest);
            var model = response.Accepted();
            Assert.IsType<JobResponse>(model);
        }
    }
}
