/*
 * Whisper API Platform
 *
 * Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.DependencyInjection;
using System.Collections.Generic;
using System.Security.Cryptography;
using Noctis.FrontGraph.Sdk.Client;
using Noctis.FrontGraph.Sdk.Api;
using Noctis.FrontGraph.Sdk.Extensions;
using Xunit;

namespace Noctis.FrontGraph.Sdk.Test.Api
{
    /// <summary>
    ///  Tests the dependency injection.
    /// </summary>
    public class DependencyInjectionTest
    {
        private readonly IHost _hostUsingConfigureWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken1);
            })
            .Build();

        private readonly IHost _hostUsingConfigureWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureApi((context, services, options) =>
            {
                BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                options.AddTokens(bearerToken1);
                options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
            })
            .Build();

        private readonly IHost _hostUsingAddWithoutAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken1);
                });
            })
            .Build();

        private readonly IHost _hostUsingAddWithAClient =
            Host.CreateDefaultBuilder([]).ConfigureServices((host, services) =>
            {
                services.AddApi(options =>
                {
                    BearerToken bearerToken1 = new("<token>", timeout: TimeSpan.FromSeconds(1));
                    options.AddTokens(bearerToken1);
                    options.AddApiHttpClients(client => client.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS));
                });
            })
            .Build();

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithAClientTest()
        {
            var domainManagementApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IDomainManagementApi>();
            Assert.True(domainManagementApi.HttpClient.BaseAddress != null);

            var intelligenceServicesApi = _hostUsingConfigureWithAClient.Services.GetRequiredService<IIntelligenceServicesApi>();
            Assert.True(intelligenceServicesApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the configure method
        /// </summary>
        [Fact]
        public void ConfigureApiWithoutAClientTest()
        {
            var domainManagementApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IDomainManagementApi>();
            Assert.True(domainManagementApi.HttpClient.BaseAddress != null);

            var intelligenceServicesApi = _hostUsingConfigureWithoutAClient.Services.GetRequiredService<IIntelligenceServicesApi>();
            Assert.True(intelligenceServicesApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithAClientTest()
        {
            var domainManagementApi = _hostUsingAddWithAClient.Services.GetRequiredService<IDomainManagementApi>();
            Assert.True(domainManagementApi.HttpClient.BaseAddress != null);
            
            var intelligenceServicesApi = _hostUsingAddWithAClient.Services.GetRequiredService<IIntelligenceServicesApi>();
            Assert.True(intelligenceServicesApi.HttpClient.BaseAddress != null);
        }

        /// <summary>
        /// Test dependency injection when using the add method
        /// </summary>
        [Fact]
        public void AddApiWithoutAClientTest()
        {
            var domainManagementApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IDomainManagementApi>();
            Assert.True(domainManagementApi.HttpClient.BaseAddress != null);

            var intelligenceServicesApi = _hostUsingAddWithoutAClient.Services.GetRequiredService<IIntelligenceServicesApi>();
            Assert.True(intelligenceServicesApi.HttpClient.BaseAddress != null);
        }
    }
}
