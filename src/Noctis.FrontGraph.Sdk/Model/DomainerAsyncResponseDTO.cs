// <auto-generated>
/*
 * Whisper API Platform
 *
 * Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Noctis.FrontGraph.Sdk.Client;

namespace Noctis.FrontGraph.Sdk.Model
{
    /// <summary>
    /// Response object for an asynchronous domain similarity search request submission
    /// </summary>
    public partial class DomainerAsyncResponseDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainerAsyncResponseDTO" /> class.
        /// </summary>
        /// <param name="requestId">Unique identifier for tracking the request</param>
        /// <param name="domainName">Domain name being searched</param>
        /// <param name="message">Status message providing information about the request</param>
        /// <param name="statusUrl">URL to check for results (can be polled to monitor progress and get results)</param>
        /// <param name="queryString">Query string submitted for free-text search (if applicable)</param>
        [JsonConstructor]
        internal DomainerAsyncResponseDTO(Guid requestId, string domainName, string message, string statusUrl, Option<string?> queryString = default)
        {
            RequestId = requestId;
            DomainName = domainName;
            Message = message;
            StatusUrl = statusUrl;
            QueryStringOption = queryString;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Unique identifier for tracking the request
        /// </summary>
        /// <value>Unique identifier for tracking the request</value>
        /* <example>123e4567-e89b-12d3-a456-426614174000</example> */
        [JsonPropertyName("requestId")]
        public Guid RequestId { get; }

        /// <summary>
        /// Domain name being searched
        /// </summary>
        /// <value>Domain name being searched</value>
        /* <example>example.com</example> */
        [JsonPropertyName("domainName")]
        public string DomainName { get; }

        /// <summary>
        /// Status message providing information about the request
        /// </summary>
        /// <value>Status message providing information about the request</value>
        /* <example>Request received and processing has started</example> */
        [JsonPropertyName("message")]
        public string Message { get; }

        /// <summary>
        /// URL to check for results (can be polled to monitor progress and get results)
        /// </summary>
        /// <value>URL to check for results (can be polled to monitor progress and get results)</value>
        /* <example>/api/domains/async/123e4567-e89b-12d3-a456-426614174000</example> */
        [JsonPropertyName("statusUrl")]
        public string StatusUrl { get; }

        /// <summary>
        /// Used to track the state of QueryString
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> QueryStringOption { get; }

        /// <summary>
        /// Query string submitted for free-text search (if applicable)
        /// </summary>
        /// <value>Query string submitted for free-text search (if applicable)</value>
        /* <example>exampl*</example> */
        [JsonPropertyName("queryString")]
        public string? QueryString { get { return this.QueryStringOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DomainerAsyncResponseDTO {\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  StatusUrl: ").Append(StatusUrl).Append("\n");
            sb.Append("  QueryString: ").Append(QueryString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DomainerAsyncResponseDTO" />
    /// </summary>
    public class DomainerAsyncResponseDTOJsonConverter : JsonConverter<DomainerAsyncResponseDTO>
    {
        /// <summary>
        /// Deserializes json to <see cref="DomainerAsyncResponseDTO" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DomainerAsyncResponseDTO Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<Guid?> requestId = default;
            Option<string?> domainName = default;
            Option<string?> message = default;
            Option<string?> statusUrl = default;
            Option<string?> queryString = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "requestId":
                            requestId = new Option<Guid?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (Guid?)null : utf8JsonReader.GetGuid());
                            break;
                        case "domainName":
                            domainName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "statusUrl":
                            statusUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "queryString":
                            queryString = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!requestId.IsSet)
                throw new ArgumentException("Property is required for class DomainerAsyncResponseDTO.", nameof(requestId));

            if (!domainName.IsSet)
                throw new ArgumentException("Property is required for class DomainerAsyncResponseDTO.", nameof(domainName));

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class DomainerAsyncResponseDTO.", nameof(message));

            if (!statusUrl.IsSet)
                throw new ArgumentException("Property is required for class DomainerAsyncResponseDTO.", nameof(statusUrl));

            if (requestId.IsSet && requestId.Value == null)
                throw new ArgumentNullException(nameof(requestId), "Property is not nullable for class DomainerAsyncResponseDTO.");

            if (domainName.IsSet && domainName.Value == null)
                throw new ArgumentNullException(nameof(domainName), "Property is not nullable for class DomainerAsyncResponseDTO.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class DomainerAsyncResponseDTO.");

            if (statusUrl.IsSet && statusUrl.Value == null)
                throw new ArgumentNullException(nameof(statusUrl), "Property is not nullable for class DomainerAsyncResponseDTO.");

            return new DomainerAsyncResponseDTO(requestId.Value!.Value!, domainName.Value!, message.Value!, statusUrl.Value!, queryString);
        }

        /// <summary>
        /// Serializes a <see cref="DomainerAsyncResponseDTO" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainerAsyncResponseDTO"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DomainerAsyncResponseDTO domainerAsyncResponseDTO, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, domainerAsyncResponseDTO, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DomainerAsyncResponseDTO" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainerAsyncResponseDTO"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DomainerAsyncResponseDTO domainerAsyncResponseDTO, JsonSerializerOptions jsonSerializerOptions)
        {
            if (domainerAsyncResponseDTO.DomainName == null)
                throw new ArgumentNullException(nameof(domainerAsyncResponseDTO.DomainName), "Property is required for class DomainerAsyncResponseDTO.");

            if (domainerAsyncResponseDTO.Message == null)
                throw new ArgumentNullException(nameof(domainerAsyncResponseDTO.Message), "Property is required for class DomainerAsyncResponseDTO.");

            if (domainerAsyncResponseDTO.StatusUrl == null)
                throw new ArgumentNullException(nameof(domainerAsyncResponseDTO.StatusUrl), "Property is required for class DomainerAsyncResponseDTO.");

            writer.WriteString("requestId", domainerAsyncResponseDTO.RequestId);

            writer.WriteString("domainName", domainerAsyncResponseDTO.DomainName);

            writer.WriteString("message", domainerAsyncResponseDTO.Message);

            writer.WriteString("statusUrl", domainerAsyncResponseDTO.StatusUrl);

            if (domainerAsyncResponseDTO.QueryStringOption.IsSet)
                if (domainerAsyncResponseDTO.QueryStringOption.Value != null)
                    writer.WriteString("queryString", domainerAsyncResponseDTO.QueryString);
                else
                    writer.WriteNull("queryString");
        }
    }
}
