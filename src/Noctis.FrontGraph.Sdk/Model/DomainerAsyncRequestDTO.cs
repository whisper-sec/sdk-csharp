// <auto-generated>
/*
 * Whisper API Platform
 *
 * Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Noctis.FrontGraph.Sdk.Client;

namespace Noctis.FrontGraph.Sdk.Model
{
    /// <summary>
    /// Parameters for an asynchronous domain search (either similarity or free-text)
    /// </summary>
    public partial class DomainerAsyncRequestDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainerAsyncRequestDTO" /> class.
        /// </summary>
        /// <param name="callbackUrl">URL to call with results when the search is complete (must be accessible from the server)</param>
        /// <param name="domainName">(Required for SIMILARITY requests) Domain name to search for similar domains</param>
        /// <param name="similarityType">(Required for SIMILARITY requests) Type of similarity to use: CONTAINS, SOUNDING, PREFIX, SUFFIX, TYPO, UTFVARS</param>
        /// <param name="queryString">(Required for SEARCH requests) Query string (supports standard query syntax)</param>
        /// <param name="operator">(Optional for SEARCH requests) Default operator between query terms if not specified (default to OperatorEnum.AND)</param>
        /// <param name="level">(Optional for SEARCH requests) Filter results by absolute domain level (dot count) (default to LevelEnum.ALL)</param>
        /// <param name="findAvailable">Set to true to find AVAILABLE similar domains (typo/sounding) instead of existing ones. Requires domainName, ignores similarityType/queryString/operator/level. (default to false)</param>
        /// <param name="limit">Maximum number of results to return (use a reasonable limit to prevent excessive processing) (default to 100)</param>
        [JsonConstructor]
        public DomainerAsyncRequestDTO(string callbackUrl, Option<string?> domainName = default, Option<SimilarityTypeEnum?> similarityType = default, Option<string?> queryString = default, Option<OperatorEnum?> @operator = default, Option<LevelEnum?> level = default, Option<bool?> findAvailable = default, Option<int?> limit = default)
        {
            CallbackUrl = callbackUrl;
            DomainNameOption = domainName;
            SimilarityTypeOption = similarityType;
            QueryStringOption = queryString;
            OperatorOption = @operator;
            LevelOption = level;
            FindAvailableOption = findAvailable;
            LimitOption = limit;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// (Required for SIMILARITY requests) Type of similarity to use: CONTAINS, SOUNDING, PREFIX, SUFFIX, TYPO, UTFVARS
        /// </summary>
        /// <value>(Required for SIMILARITY requests) Type of similarity to use: CONTAINS, SOUNDING, PREFIX, SUFFIX, TYPO, UTFVARS</value>
        public enum SimilarityTypeEnum
        {
            /// <summary>
            /// Enum CONTAINS for value: CONTAINS
            /// </summary>
            CONTAINS = 1,

            /// <summary>
            /// Enum PREFIX for value: PREFIX
            /// </summary>
            PREFIX = 2,

            /// <summary>
            /// Enum SUFFIX for value: SUFFIX
            /// </summary>
            SUFFIX = 3,

            /// <summary>
            /// Enum TYPO for value: TYPO
            /// </summary>
            TYPO = 4,

            /// <summary>
            /// Enum SOUNDING for value: SOUNDING
            /// </summary>
            SOUNDING = 5,

            /// <summary>
            /// Enum UTFVARS for value: UTFVARS
            /// </summary>
            UTFVARS = 6,

            /// <summary>
            /// Enum TLDVARIANTS for value: TLD_VARIANTS
            /// </summary>
            TLDVARIANTS = 7,

            /// <summary>
            /// Enum TYPOORSOUNDING for value: TYPO_OR_SOUNDING
            /// </summary>
            TYPOORSOUNDING = 8,

            /// <summary>
            /// Enum LEVENSHTEIN for value: LEVENSHTEIN
            /// </summary>
            LEVENSHTEIN = 9,

            /// <summary>
            /// Enum CONTAINS2 for value: CONTAINS
            /// </summary>
            CONTAINS2 = 10,

            /// <summary>
            /// Enum SOUNDING2 for value: SOUNDING
            /// </summary>
            SOUNDING2 = 11,

            /// <summary>
            /// Enum PREFIX2 for value: PREFIX
            /// </summary>
            PREFIX2 = 12,

            /// <summary>
            /// Enum SUFFIX2 for value: SUFFIX
            /// </summary>
            SUFFIX2 = 13,

            /// <summary>
            /// Enum TYPO2 for value: TYPO
            /// </summary>
            TYPO2 = 14,

            /// <summary>
            /// Enum UTFVARS2 for value: UTFVARS
            /// </summary>
            UTFVARS2 = 15
        }

        /// <summary>
        /// Returns a <see cref="SimilarityTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static SimilarityTypeEnum SimilarityTypeEnumFromString(string value)
        {
            if (value.Equals("CONTAINS"))
                return SimilarityTypeEnum.CONTAINS;

            if (value.Equals("PREFIX"))
                return SimilarityTypeEnum.PREFIX;

            if (value.Equals("SUFFIX"))
                return SimilarityTypeEnum.SUFFIX;

            if (value.Equals("TYPO"))
                return SimilarityTypeEnum.TYPO;

            if (value.Equals("SOUNDING"))
                return SimilarityTypeEnum.SOUNDING;

            if (value.Equals("UTFVARS"))
                return SimilarityTypeEnum.UTFVARS;

            if (value.Equals("TLD_VARIANTS"))
                return SimilarityTypeEnum.TLDVARIANTS;

            if (value.Equals("TYPO_OR_SOUNDING"))
                return SimilarityTypeEnum.TYPOORSOUNDING;

            if (value.Equals("LEVENSHTEIN"))
                return SimilarityTypeEnum.LEVENSHTEIN;

            if (value.Equals("CONTAINS"))
                return SimilarityTypeEnum.CONTAINS2;

            if (value.Equals("SOUNDING"))
                return SimilarityTypeEnum.SOUNDING2;

            if (value.Equals("PREFIX"))
                return SimilarityTypeEnum.PREFIX2;

            if (value.Equals("SUFFIX"))
                return SimilarityTypeEnum.SUFFIX2;

            if (value.Equals("TYPO"))
                return SimilarityTypeEnum.TYPO2;

            if (value.Equals("UTFVARS"))
                return SimilarityTypeEnum.UTFVARS2;

            throw new NotImplementedException($"Could not convert value to type SimilarityTypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="SimilarityTypeEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static SimilarityTypeEnum? SimilarityTypeEnumFromStringOrDefault(string value)
        {
            if (value.Equals("CONTAINS"))
                return SimilarityTypeEnum.CONTAINS;

            if (value.Equals("PREFIX"))
                return SimilarityTypeEnum.PREFIX;

            if (value.Equals("SUFFIX"))
                return SimilarityTypeEnum.SUFFIX;

            if (value.Equals("TYPO"))
                return SimilarityTypeEnum.TYPO;

            if (value.Equals("SOUNDING"))
                return SimilarityTypeEnum.SOUNDING;

            if (value.Equals("UTFVARS"))
                return SimilarityTypeEnum.UTFVARS;

            if (value.Equals("TLD_VARIANTS"))
                return SimilarityTypeEnum.TLDVARIANTS;

            if (value.Equals("TYPO_OR_SOUNDING"))
                return SimilarityTypeEnum.TYPOORSOUNDING;

            if (value.Equals("LEVENSHTEIN"))
                return SimilarityTypeEnum.LEVENSHTEIN;

            if (value.Equals("CONTAINS"))
                return SimilarityTypeEnum.CONTAINS2;

            if (value.Equals("SOUNDING"))
                return SimilarityTypeEnum.SOUNDING2;

            if (value.Equals("PREFIX"))
                return SimilarityTypeEnum.PREFIX2;

            if (value.Equals("SUFFIX"))
                return SimilarityTypeEnum.SUFFIX2;

            if (value.Equals("TYPO"))
                return SimilarityTypeEnum.TYPO2;

            if (value.Equals("UTFVARS"))
                return SimilarityTypeEnum.UTFVARS2;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="SimilarityTypeEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string SimilarityTypeEnumToJsonValue(SimilarityTypeEnum? value)
        {
            if (value == SimilarityTypeEnum.CONTAINS)
                return "CONTAINS";

            if (value == SimilarityTypeEnum.PREFIX)
                return "PREFIX";

            if (value == SimilarityTypeEnum.SUFFIX)
                return "SUFFIX";

            if (value == SimilarityTypeEnum.TYPO)
                return "TYPO";

            if (value == SimilarityTypeEnum.SOUNDING)
                return "SOUNDING";

            if (value == SimilarityTypeEnum.UTFVARS)
                return "UTFVARS";

            if (value == SimilarityTypeEnum.TLDVARIANTS)
                return "TLD_VARIANTS";

            if (value == SimilarityTypeEnum.TYPOORSOUNDING)
                return "TYPO_OR_SOUNDING";

            if (value == SimilarityTypeEnum.LEVENSHTEIN)
                return "LEVENSHTEIN";

            if (value == SimilarityTypeEnum.CONTAINS2)
                return "CONTAINS";

            if (value == SimilarityTypeEnum.SOUNDING2)
                return "SOUNDING";

            if (value == SimilarityTypeEnum.PREFIX2)
                return "PREFIX";

            if (value == SimilarityTypeEnum.SUFFIX2)
                return "SUFFIX";

            if (value == SimilarityTypeEnum.TYPO2)
                return "TYPO";

            if (value == SimilarityTypeEnum.UTFVARS2)
                return "UTFVARS";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of SimilarityType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<SimilarityTypeEnum?> SimilarityTypeOption { get; private set; }

        /// <summary>
        /// (Required for SIMILARITY requests) Type of similarity to use: CONTAINS, SOUNDING, PREFIX, SUFFIX, TYPO, UTFVARS
        /// </summary>
        /// <value>(Required for SIMILARITY requests) Type of similarity to use: CONTAINS, SOUNDING, PREFIX, SUFFIX, TYPO, UTFVARS</value>
        /* <example>SOUNDING</example> */
        [JsonPropertyName("similarityType")]
        public SimilarityTypeEnum? SimilarityType { get { return this.SimilarityTypeOption; } set { this.SimilarityTypeOption = new(value); } }

        /// <summary>
        /// (Optional for SEARCH requests) Default operator between query terms if not specified
        /// </summary>
        /// <value>(Optional for SEARCH requests) Default operator between query terms if not specified</value>
        public enum OperatorEnum
        {
            /// <summary>
            /// Enum AND for value: AND
            /// </summary>
            AND = 1,

            /// <summary>
            /// Enum OR for value: OR
            /// </summary>
            OR = 2
        }

        /// <summary>
        /// Returns a <see cref="OperatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static OperatorEnum OperatorEnumFromString(string value)
        {
            if (value.Equals("AND"))
                return OperatorEnum.AND;

            if (value.Equals("OR"))
                return OperatorEnum.OR;

            throw new NotImplementedException($"Could not convert value to type OperatorEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="OperatorEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OperatorEnum? OperatorEnumFromStringOrDefault(string value)
        {
            if (value.Equals("AND"))
                return OperatorEnum.AND;

            if (value.Equals("OR"))
                return OperatorEnum.OR;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="OperatorEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string OperatorEnumToJsonValue(OperatorEnum? value)
        {
            if (value == OperatorEnum.AND)
                return "AND";

            if (value == OperatorEnum.OR)
                return "OR";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Operator
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<OperatorEnum?> OperatorOption { get; private set; }

        /// <summary>
        /// (Optional for SEARCH requests) Default operator between query terms if not specified
        /// </summary>
        /// <value>(Optional for SEARCH requests) Default operator between query terms if not specified</value>
        /* <example>AND</example> */
        [JsonPropertyName("operator")]
        public OperatorEnum? Operator { get { return this.OperatorOption; } set { this.OperatorOption = new(value); } }

        /// <summary>
        /// (Optional for SEARCH requests) Filter results by absolute domain level (dot count)
        /// </summary>
        /// <value>(Optional for SEARCH requests) Filter results by absolute domain level (dot count)</value>
        public enum LevelEnum
        {
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            ALL = 1,

            /// <summary>
            /// Enum IMMEDIATE for value: IMMEDIATE
            /// </summary>
            IMMEDIATE = 2,

            /// <summary>
            /// Enum MAXDEPTH for value: MAX_DEPTH
            /// </summary>
            MAXDEPTH = 3
        }

        /// <summary>
        /// Returns a <see cref="LevelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static LevelEnum LevelEnumFromString(string value)
        {
            if (value.Equals("ALL"))
                return LevelEnum.ALL;

            if (value.Equals("IMMEDIATE"))
                return LevelEnum.IMMEDIATE;

            if (value.Equals("MAX_DEPTH"))
                return LevelEnum.MAXDEPTH;

            throw new NotImplementedException($"Could not convert value to type LevelEnum: '{value}'");
        }

        /// <summary>
        /// Returns a <see cref="LevelEnum"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static LevelEnum? LevelEnumFromStringOrDefault(string value)
        {
            if (value.Equals("ALL"))
                return LevelEnum.ALL;

            if (value.Equals("IMMEDIATE"))
                return LevelEnum.IMMEDIATE;

            if (value.Equals("MAX_DEPTH"))
                return LevelEnum.MAXDEPTH;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="LevelEnum"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string LevelEnumToJsonValue(LevelEnum? value)
        {
            if (value == LevelEnum.ALL)
                return "ALL";

            if (value == LevelEnum.IMMEDIATE)
                return "IMMEDIATE";

            if (value == LevelEnum.MAXDEPTH)
                return "MAX_DEPTH";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Used to track the state of Level
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<LevelEnum?> LevelOption { get; private set; }

        /// <summary>
        /// (Optional for SEARCH requests) Filter results by absolute domain level (dot count)
        /// </summary>
        /// <value>(Optional for SEARCH requests) Filter results by absolute domain level (dot count)</value>
        /* <example>ALL</example> */
        [JsonPropertyName("level")]
        public LevelEnum? Level { get { return this.LevelOption; } set { this.LevelOption = new(value); } }

        /// <summary>
        /// URL to call with results when the search is complete (must be accessible from the server)
        /// </summary>
        /// <value>URL to call with results when the search is complete (must be accessible from the server)</value>
        /* <example>https://webhook.example.com/callback</example> */
        [JsonPropertyName("callbackUrl")]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// Used to track the state of DomainName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DomainNameOption { get; private set; }

        /// <summary>
        /// (Required for SIMILARITY requests) Domain name to search for similar domains
        /// </summary>
        /// <value>(Required for SIMILARITY requests) Domain name to search for similar domains</value>
        /* <example>example.com</example> */
        [JsonPropertyName("domainName")]
        public string? DomainName { get { return this.DomainNameOption; } set { this.DomainNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of QueryString
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> QueryStringOption { get; private set; }

        /// <summary>
        /// (Required for SEARCH requests) Query string (supports standard query syntax)
        /// </summary>
        /// <value>(Required for SEARCH requests) Query string (supports standard query syntax)</value>
        /* <example>exampl~ OR &quot;domain search&quot; OR domain_exact:prefix* OR domain:token</example> */
        [JsonPropertyName("queryString")]
        public string? QueryString { get { return this.QueryStringOption; } set { this.QueryStringOption = new(value); } }

        /// <summary>
        /// Used to track the state of FindAvailable
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FindAvailableOption { get; private set; }

        /// <summary>
        /// Set to true to find AVAILABLE similar domains (typo/sounding) instead of existing ones. Requires domainName, ignores similarityType/queryString/operator/level.
        /// </summary>
        /// <value>Set to true to find AVAILABLE similar domains (typo/sounding) instead of existing ones. Requires domainName, ignores similarityType/queryString/operator/level.</value>
        /* <example>false</example> */
        [JsonPropertyName("findAvailable")]
        public bool? FindAvailable { get { return this.FindAvailableOption; } set { this.FindAvailableOption = new(value); } }

        /// <summary>
        /// Used to track the state of Limit
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> LimitOption { get; private set; }

        /// <summary>
        /// Maximum number of results to return (use a reasonable limit to prevent excessive processing)
        /// </summary>
        /// <value>Maximum number of results to return (use a reasonable limit to prevent excessive processing)</value>
        /* <example>100</example> */
        [JsonPropertyName("limit")]
        public int? Limit { get { return this.LimitOption; } set { this.LimitOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DomainerAsyncRequestDTO {\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  SimilarityType: ").Append(SimilarityType).Append("\n");
            sb.Append("  QueryString: ").Append(QueryString).Append("\n");
            sb.Append("  Operator: ").Append(Operator).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  FindAvailable: ").Append(FindAvailable).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // DomainName (string) maxLength
            if (this.DomainName != null && this.DomainName.Length > 255)
            {
                yield return new ValidationResult("Invalid value for DomainName, length must be less than 255.", new [] { "DomainName" });
            }

            // DomainName (string) minLength
            if (this.DomainName != null && this.DomainName.Length < 3)
            {
                yield return new ValidationResult("Invalid value for DomainName, length must be greater than 3.", new [] { "DomainName" });
            }

            // Limit (int) maximum
            if (this.LimitOption.IsSet && this.LimitOption.Value > (int)10000)
            {
                yield return new ValidationResult("Invalid value for Limit, must be a value less than or equal to 10000.", new [] { "Limit" });
            }

            // Limit (int) minimum
            if (this.LimitOption.IsSet && this.LimitOption.Value < (int)1)
            {
                yield return new ValidationResult("Invalid value for Limit, must be a value greater than or equal to 1.", new [] { "Limit" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DomainerAsyncRequestDTO" />
    /// </summary>
    public class DomainerAsyncRequestDTOJsonConverter : JsonConverter<DomainerAsyncRequestDTO>
    {
        /// <summary>
        /// Deserializes json to <see cref="DomainerAsyncRequestDTO" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DomainerAsyncRequestDTO Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> callbackUrl = default;
            Option<string?> domainName = default;
            Option<DomainerAsyncRequestDTO.SimilarityTypeEnum?> similarityType = default;
            Option<string?> queryString = default;
            Option<DomainerAsyncRequestDTO.OperatorEnum?> varOperator = default;
            Option<DomainerAsyncRequestDTO.LevelEnum?> level = default;
            Option<bool?> findAvailable = default;
            Option<int?> limit = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "callbackUrl":
                            callbackUrl = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "domainName":
                            domainName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "similarityType":
                            string? similarityTypeRawValue = utf8JsonReader.GetString();
                            if (similarityTypeRawValue != null)
                                similarityType = new Option<DomainerAsyncRequestDTO.SimilarityTypeEnum?>(DomainerAsyncRequestDTO.SimilarityTypeEnumFromStringOrDefault(similarityTypeRawValue));
                            break;
                        case "queryString":
                            queryString = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "operator":
                            string? varOperatorRawValue = utf8JsonReader.GetString();
                            if (varOperatorRawValue != null)
                                varOperator = new Option<DomainerAsyncRequestDTO.OperatorEnum?>(DomainerAsyncRequestDTO.OperatorEnumFromStringOrDefault(varOperatorRawValue));
                            break;
                        case "level":
                            string? levelRawValue = utf8JsonReader.GetString();
                            if (levelRawValue != null)
                                level = new Option<DomainerAsyncRequestDTO.LevelEnum?>(DomainerAsyncRequestDTO.LevelEnumFromStringOrDefault(levelRawValue));
                            break;
                        case "findAvailable":
                            findAvailable = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "limit":
                            limit = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!callbackUrl.IsSet)
                throw new ArgumentException("Property is required for class DomainerAsyncRequestDTO.", nameof(callbackUrl));

            if (callbackUrl.IsSet && callbackUrl.Value == null)
                throw new ArgumentNullException(nameof(callbackUrl), "Property is not nullable for class DomainerAsyncRequestDTO.");

            if (domainName.IsSet && domainName.Value == null)
                throw new ArgumentNullException(nameof(domainName), "Property is not nullable for class DomainerAsyncRequestDTO.");

            if (similarityType.IsSet && similarityType.Value == null)
                throw new ArgumentNullException(nameof(similarityType), "Property is not nullable for class DomainerAsyncRequestDTO.");

            if (queryString.IsSet && queryString.Value == null)
                throw new ArgumentNullException(nameof(queryString), "Property is not nullable for class DomainerAsyncRequestDTO.");

            if (varOperator.IsSet && varOperator.Value == null)
                throw new ArgumentNullException(nameof(varOperator), "Property is not nullable for class DomainerAsyncRequestDTO.");

            if (level.IsSet && level.Value == null)
                throw new ArgumentNullException(nameof(level), "Property is not nullable for class DomainerAsyncRequestDTO.");

            if (findAvailable.IsSet && findAvailable.Value == null)
                throw new ArgumentNullException(nameof(findAvailable), "Property is not nullable for class DomainerAsyncRequestDTO.");

            if (limit.IsSet && limit.Value == null)
                throw new ArgumentNullException(nameof(limit), "Property is not nullable for class DomainerAsyncRequestDTO.");

            return new DomainerAsyncRequestDTO(callbackUrl.Value!, domainName, similarityType, queryString, varOperator, level, findAvailable, limit);
        }

        /// <summary>
        /// Serializes a <see cref="DomainerAsyncRequestDTO" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainerAsyncRequestDTO"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DomainerAsyncRequestDTO domainerAsyncRequestDTO, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, domainerAsyncRequestDTO, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DomainerAsyncRequestDTO" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainerAsyncRequestDTO"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DomainerAsyncRequestDTO domainerAsyncRequestDTO, JsonSerializerOptions jsonSerializerOptions)
        {
            if (domainerAsyncRequestDTO.CallbackUrl == null)
                throw new ArgumentNullException(nameof(domainerAsyncRequestDTO.CallbackUrl), "Property is required for class DomainerAsyncRequestDTO.");

            if (domainerAsyncRequestDTO.DomainNameOption.IsSet && domainerAsyncRequestDTO.DomainName == null)
                throw new ArgumentNullException(nameof(domainerAsyncRequestDTO.DomainName), "Property is required for class DomainerAsyncRequestDTO.");

            if (domainerAsyncRequestDTO.QueryStringOption.IsSet && domainerAsyncRequestDTO.QueryString == null)
                throw new ArgumentNullException(nameof(domainerAsyncRequestDTO.QueryString), "Property is required for class DomainerAsyncRequestDTO.");

            writer.WriteString("callbackUrl", domainerAsyncRequestDTO.CallbackUrl);

            if (domainerAsyncRequestDTO.DomainNameOption.IsSet)
                writer.WriteString("domainName", domainerAsyncRequestDTO.DomainName);

            var similarityTypeRawValue = DomainerAsyncRequestDTO.SimilarityTypeEnumToJsonValue(domainerAsyncRequestDTO.SimilarityTypeOption.Value!.Value);
            writer.WriteString("similarityType", similarityTypeRawValue);
            if (domainerAsyncRequestDTO.QueryStringOption.IsSet)
                writer.WriteString("queryString", domainerAsyncRequestDTO.QueryString);

            var varOperatorRawValue = DomainerAsyncRequestDTO.OperatorEnumToJsonValue(domainerAsyncRequestDTO.OperatorOption.Value!.Value);
            writer.WriteString("operator", varOperatorRawValue);
            var levelRawValue = DomainerAsyncRequestDTO.LevelEnumToJsonValue(domainerAsyncRequestDTO.LevelOption.Value!.Value);
            writer.WriteString("level", levelRawValue);
            if (domainerAsyncRequestDTO.FindAvailableOption.IsSet)
                writer.WriteBoolean("findAvailable", domainerAsyncRequestDTO.FindAvailableOption.Value!.Value);

            if (domainerAsyncRequestDTO.LimitOption.IsSet)
                writer.WriteNumber("limit", domainerAsyncRequestDTO.LimitOption.Value!.Value);
        }
    }
}
