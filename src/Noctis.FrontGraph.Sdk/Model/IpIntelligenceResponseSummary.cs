// <auto-generated>
/*
 * Whisper API Platform
 *
 * Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Noctis.FrontGraph.Sdk.Client;

namespace Noctis.FrontGraph.Sdk.Model
{
    /// <summary>
    /// Executive summary of IP intelligence
    /// </summary>
    public partial class IpIntelligenceResponseSummary : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IpIntelligenceResponseSummary" /> class.
        /// </summary>
        /// <param name="organization">Organization name</param>
        /// <param name="location">Geographic location</param>
        /// <param name="network">Network prefix</param>
        /// <param name="asnPrimary">Primary ASN</param>
        /// <param name="riskScore">Risk score (0-1)</param>
        /// <param name="ipType">IP type classification</param>
        /// <param name="totalDomains">Number of associated domains</param>
        /// <param name="totalDnsRecords">Number of DNS records</param>
        [JsonConstructor]
        public IpIntelligenceResponseSummary(Option<string?> organization = default, Option<string?> location = default, Option<string?> network = default, Option<string?> asnPrimary = default, Option<decimal?> riskScore = default, Option<string?> ipType = default, Option<int?> totalDomains = default, Option<int?> totalDnsRecords = default)
        {
            OrganizationOption = organization;
            LocationOption = location;
            NetworkOption = network;
            AsnPrimaryOption = asnPrimary;
            RiskScoreOption = riskScore;
            IpTypeOption = ipType;
            TotalDomainsOption = totalDomains;
            TotalDnsRecordsOption = totalDnsRecords;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Organization
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OrganizationOption { get; private set; }

        /// <summary>
        /// Organization name
        /// </summary>
        /// <value>Organization name</value>
        /* <example>GOOGLE LLC</example> */
        [JsonPropertyName("organization")]
        public string? Organization { get { return this.OrganizationOption; } set { this.OrganizationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocationOption { get; private set; }

        /// <summary>
        /// Geographic location
        /// </summary>
        /// <value>Geographic location</value>
        /* <example>Mountain View, United States</example> */
        [JsonPropertyName("location")]
        public string? Location { get { return this.LocationOption; } set { this.LocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Network
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NetworkOption { get; private set; }

        /// <summary>
        /// Network prefix
        /// </summary>
        /// <value>Network prefix</value>
        /* <example>8.8.8.0/24</example> */
        [JsonPropertyName("network")]
        public string? Network { get { return this.NetworkOption; } set { this.NetworkOption = new(value); } }

        /// <summary>
        /// Used to track the state of AsnPrimary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AsnPrimaryOption { get; private set; }

        /// <summary>
        /// Primary ASN
        /// </summary>
        /// <value>Primary ASN</value>
        /* <example>AS15169</example> */
        [JsonPropertyName("asn_primary")]
        public string? AsnPrimary { get { return this.AsnPrimaryOption; } set { this.AsnPrimaryOption = new(value); } }

        /// <summary>
        /// Used to track the state of RiskScore
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> RiskScoreOption { get; private set; }

        /// <summary>
        /// Risk score (0-1)
        /// </summary>
        /// <value>Risk score (0-1)</value>
        /* <example>0.0</example> */
        [JsonPropertyName("risk_score")]
        public decimal? RiskScore { get { return this.RiskScoreOption; } set { this.RiskScoreOption = new(value); } }

        /// <summary>
        /// Used to track the state of IpType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IpTypeOption { get; private set; }

        /// <summary>
        /// IP type classification
        /// </summary>
        /// <value>IP type classification</value>
        /* <example>hosting</example> */
        [JsonPropertyName("ip_type")]
        public string? IpType { get { return this.IpTypeOption; } set { this.IpTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalDomains
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalDomainsOption { get; private set; }

        /// <summary>
        /// Number of associated domains
        /// </summary>
        /// <value>Number of associated domains</value>
        /* <example>45</example> */
        [JsonPropertyName("total_domains")]
        public int? TotalDomains { get { return this.TotalDomainsOption; } set { this.TotalDomainsOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalDnsRecords
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalDnsRecordsOption { get; private set; }

        /// <summary>
        /// Number of DNS records
        /// </summary>
        /// <value>Number of DNS records</value>
        /* <example>120</example> */
        [JsonPropertyName("total_dns_records")]
        public int? TotalDnsRecords { get { return this.TotalDnsRecordsOption; } set { this.TotalDnsRecordsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IpIntelligenceResponseSummary {\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("  AsnPrimary: ").Append(AsnPrimary).Append("\n");
            sb.Append("  RiskScore: ").Append(RiskScore).Append("\n");
            sb.Append("  IpType: ").Append(IpType).Append("\n");
            sb.Append("  TotalDomains: ").Append(TotalDomains).Append("\n");
            sb.Append("  TotalDnsRecords: ").Append(TotalDnsRecords).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IpIntelligenceResponseSummary" />
    /// </summary>
    public class IpIntelligenceResponseSummaryJsonConverter : JsonConverter<IpIntelligenceResponseSummary>
    {
        /// <summary>
        /// Deserializes json to <see cref="IpIntelligenceResponseSummary" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IpIntelligenceResponseSummary Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> organization = default;
            Option<string?> location = default;
            Option<string?> network = default;
            Option<string?> asnPrimary = default;
            Option<decimal?> riskScore = default;
            Option<string?> ipType = default;
            Option<int?> totalDomains = default;
            Option<int?> totalDnsRecords = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "organization":
                            organization = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "location":
                            location = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "network":
                            network = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "asn_primary":
                            asnPrimary = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "risk_score":
                            riskScore = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "ip_type":
                            ipType = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "total_domains":
                            totalDomains = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "total_dns_records":
                            totalDnsRecords = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (organization.IsSet && organization.Value == null)
                throw new ArgumentNullException(nameof(organization), "Property is not nullable for class IpIntelligenceResponseSummary.");

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class IpIntelligenceResponseSummary.");

            if (network.IsSet && network.Value == null)
                throw new ArgumentNullException(nameof(network), "Property is not nullable for class IpIntelligenceResponseSummary.");

            if (asnPrimary.IsSet && asnPrimary.Value == null)
                throw new ArgumentNullException(nameof(asnPrimary), "Property is not nullable for class IpIntelligenceResponseSummary.");

            if (riskScore.IsSet && riskScore.Value == null)
                throw new ArgumentNullException(nameof(riskScore), "Property is not nullable for class IpIntelligenceResponseSummary.");

            if (ipType.IsSet && ipType.Value == null)
                throw new ArgumentNullException(nameof(ipType), "Property is not nullable for class IpIntelligenceResponseSummary.");

            if (totalDomains.IsSet && totalDomains.Value == null)
                throw new ArgumentNullException(nameof(totalDomains), "Property is not nullable for class IpIntelligenceResponseSummary.");

            if (totalDnsRecords.IsSet && totalDnsRecords.Value == null)
                throw new ArgumentNullException(nameof(totalDnsRecords), "Property is not nullable for class IpIntelligenceResponseSummary.");

            return new IpIntelligenceResponseSummary(organization, location, network, asnPrimary, riskScore, ipType, totalDomains, totalDnsRecords);
        }

        /// <summary>
        /// Serializes a <see cref="IpIntelligenceResponseSummary" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ipIntelligenceResponseSummary"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IpIntelligenceResponseSummary ipIntelligenceResponseSummary, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, ipIntelligenceResponseSummary, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IpIntelligenceResponseSummary" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ipIntelligenceResponseSummary"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IpIntelligenceResponseSummary ipIntelligenceResponseSummary, JsonSerializerOptions jsonSerializerOptions)
        {
            if (ipIntelligenceResponseSummary.OrganizationOption.IsSet && ipIntelligenceResponseSummary.Organization == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponseSummary.Organization), "Property is required for class IpIntelligenceResponseSummary.");

            if (ipIntelligenceResponseSummary.LocationOption.IsSet && ipIntelligenceResponseSummary.Location == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponseSummary.Location), "Property is required for class IpIntelligenceResponseSummary.");

            if (ipIntelligenceResponseSummary.NetworkOption.IsSet && ipIntelligenceResponseSummary.Network == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponseSummary.Network), "Property is required for class IpIntelligenceResponseSummary.");

            if (ipIntelligenceResponseSummary.AsnPrimaryOption.IsSet && ipIntelligenceResponseSummary.AsnPrimary == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponseSummary.AsnPrimary), "Property is required for class IpIntelligenceResponseSummary.");

            if (ipIntelligenceResponseSummary.IpTypeOption.IsSet && ipIntelligenceResponseSummary.IpType == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponseSummary.IpType), "Property is required for class IpIntelligenceResponseSummary.");

            if (ipIntelligenceResponseSummary.OrganizationOption.IsSet)
                writer.WriteString("organization", ipIntelligenceResponseSummary.Organization);

            if (ipIntelligenceResponseSummary.LocationOption.IsSet)
                writer.WriteString("location", ipIntelligenceResponseSummary.Location);

            if (ipIntelligenceResponseSummary.NetworkOption.IsSet)
                writer.WriteString("network", ipIntelligenceResponseSummary.Network);

            if (ipIntelligenceResponseSummary.AsnPrimaryOption.IsSet)
                writer.WriteString("asn_primary", ipIntelligenceResponseSummary.AsnPrimary);

            if (ipIntelligenceResponseSummary.RiskScoreOption.IsSet)
                writer.WriteNumber("risk_score", ipIntelligenceResponseSummary.RiskScoreOption.Value!.Value);

            if (ipIntelligenceResponseSummary.IpTypeOption.IsSet)
                writer.WriteString("ip_type", ipIntelligenceResponseSummary.IpType);

            if (ipIntelligenceResponseSummary.TotalDomainsOption.IsSet)
                writer.WriteNumber("total_domains", ipIntelligenceResponseSummary.TotalDomainsOption.Value!.Value);

            if (ipIntelligenceResponseSummary.TotalDnsRecordsOption.IsSet)
                writer.WriteNumber("total_dns_records", ipIntelligenceResponseSummary.TotalDnsRecordsOption.Value!.Value);
        }
    }
}
