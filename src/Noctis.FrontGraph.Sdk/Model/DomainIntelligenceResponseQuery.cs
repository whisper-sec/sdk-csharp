// <auto-generated>
/*
 * Whisper API Platform
 *
 * Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Noctis.FrontGraph.Sdk.Client;

namespace Noctis.FrontGraph.Sdk.Model
{
    /// <summary>
    /// DomainIntelligenceResponseQuery
    /// </summary>
    public partial class DomainIntelligenceResponseQuery : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainIntelligenceResponseQuery" /> class.
        /// </summary>
        /// <param name="domain">Queried domain</param>
        /// <param name="timestamp">Query timestamp</param>
        /// <param name="responseTimeMs">Response time in milliseconds</param>
        [JsonConstructor]
        public DomainIntelligenceResponseQuery(Option<string?> domain = default, Option<DateTime?> timestamp = default, Option<int?> responseTimeMs = default)
        {
            DomainOption = domain;
            TimestampOption = timestamp;
            ResponseTimeMsOption = responseTimeMs;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Domain
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DomainOption { get; private set; }

        /// <summary>
        /// Queried domain
        /// </summary>
        /// <value>Queried domain</value>
        /* <example>example.com</example> */
        [JsonPropertyName("domain")]
        public string? Domain { get { return this.DomainOption; } set { this.DomainOption = new(value); } }

        /// <summary>
        /// Used to track the state of Timestamp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> TimestampOption { get; private set; }

        /// <summary>
        /// Query timestamp
        /// </summary>
        /// <value>Query timestamp</value>
        /* <example>2025-09-13T10:30Z</example> */
        [JsonPropertyName("timestamp")]
        public DateTime? Timestamp { get { return this.TimestampOption; } set { this.TimestampOption = new(value); } }

        /// <summary>
        /// Used to track the state of ResponseTimeMs
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ResponseTimeMsOption { get; private set; }

        /// <summary>
        /// Response time in milliseconds
        /// </summary>
        /// <value>Response time in milliseconds</value>
        /* <example>5500</example> */
        [JsonPropertyName("response_time_ms")]
        public int? ResponseTimeMs { get { return this.ResponseTimeMsOption; } set { this.ResponseTimeMsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DomainIntelligenceResponseQuery {\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  ResponseTimeMs: ").Append(ResponseTimeMs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DomainIntelligenceResponseQuery" />
    /// </summary>
    public class DomainIntelligenceResponseQueryJsonConverter : JsonConverter<DomainIntelligenceResponseQuery>
    {
        /// <summary>
        /// The format to use to serialize Timestamp
        /// </summary>
        public static string TimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="DomainIntelligenceResponseQuery" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DomainIntelligenceResponseQuery Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> domain = default;
            Option<DateTime?> timestamp = default;
            Option<int?> responseTimeMs = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "domain":
                            domain = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "timestamp":
                            timestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "response_time_ms":
                            responseTimeMs = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (domain.IsSet && domain.Value == null)
                throw new ArgumentNullException(nameof(domain), "Property is not nullable for class DomainIntelligenceResponseQuery.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class DomainIntelligenceResponseQuery.");

            if (responseTimeMs.IsSet && responseTimeMs.Value == null)
                throw new ArgumentNullException(nameof(responseTimeMs), "Property is not nullable for class DomainIntelligenceResponseQuery.");

            return new DomainIntelligenceResponseQuery(domain, timestamp, responseTimeMs);
        }

        /// <summary>
        /// Serializes a <see cref="DomainIntelligenceResponseQuery" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainIntelligenceResponseQuery"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DomainIntelligenceResponseQuery domainIntelligenceResponseQuery, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, domainIntelligenceResponseQuery, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DomainIntelligenceResponseQuery" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainIntelligenceResponseQuery"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DomainIntelligenceResponseQuery domainIntelligenceResponseQuery, JsonSerializerOptions jsonSerializerOptions)
        {
            if (domainIntelligenceResponseQuery.DomainOption.IsSet && domainIntelligenceResponseQuery.Domain == null)
                throw new ArgumentNullException(nameof(domainIntelligenceResponseQuery.Domain), "Property is required for class DomainIntelligenceResponseQuery.");

            if (domainIntelligenceResponseQuery.DomainOption.IsSet)
                writer.WriteString("domain", domainIntelligenceResponseQuery.Domain);

            if (domainIntelligenceResponseQuery.TimestampOption.IsSet)
                writer.WriteString("timestamp", domainIntelligenceResponseQuery.TimestampOption.Value!.Value.ToString(TimestampFormat));

            if (domainIntelligenceResponseQuery.ResponseTimeMsOption.IsSet)
                writer.WriteNumber("response_time_ms", domainIntelligenceResponseQuery.ResponseTimeMsOption.Value!.Value);
        }
    }
}
