// <auto-generated>
/*
 * Whisper API Platform
 *
 * Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Noctis.FrontGraph.Sdk.Client;

namespace Noctis.FrontGraph.Sdk.Model
{
    /// <summary>
    /// Comprehensive IP intelligence response containing geolocation, network, security, and relationship data
    /// </summary>
    public partial class IpIntelligenceResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IpIntelligenceResponse" /> class.
        /// </summary>
        /// <param name="query">query</param>
        /// <param name="summary">summary</param>
        /// <param name="geolocation">geolocation</param>
        /// <param name="network">Network and routing information</param>
        /// <param name="isp">ISP and organization details</param>
        /// <param name="relationships">DNS and infrastructure relationships</param>
        /// <param name="reputation">Reputation and threat intelligence</param>
        /// <param name="security">Security assessment and RPKI status</param>
        /// <param name="validation">IP validation details</param>
        /// <param name="history">Historical routing data</param>
        /// <param name="asnDetails">ASN ownership and prefix details</param>
        /// <param name="metadata">Response metadata and data sources</param>
        [JsonConstructor]
        public IpIntelligenceResponse(Option<IpIntelligenceResponseQuery?> query = default, Option<IpIntelligenceResponseSummary?> summary = default, Option<IpIntelligenceResponseGeolocation?> geolocation = default, Option<Object?> network = default, Option<Object?> isp = default, Option<Object?> relationships = default, Option<Object?> reputation = default, Option<Object?> security = default, Option<Object?> validation = default, Option<Object?> history = default, Option<Object?> asnDetails = default, Option<Object?> metadata = default)
        {
            QueryOption = query;
            SummaryOption = summary;
            GeolocationOption = geolocation;
            NetworkOption = network;
            IspOption = isp;
            RelationshipsOption = relationships;
            ReputationOption = reputation;
            SecurityOption = security;
            ValidationOption = validation;
            HistoryOption = history;
            AsnDetailsOption = asnDetails;
            MetadataOption = metadata;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Query
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IpIntelligenceResponseQuery?> QueryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [JsonPropertyName("query")]
        public IpIntelligenceResponseQuery? Query { get { return this.QueryOption; } set { this.QueryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Summary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IpIntelligenceResponseSummary?> SummaryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [JsonPropertyName("summary")]
        public IpIntelligenceResponseSummary? Summary { get { return this.SummaryOption; } set { this.SummaryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Geolocation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IpIntelligenceResponseGeolocation?> GeolocationOption { get; private set; }

        /// <summary>
        /// Gets or Sets Geolocation
        /// </summary>
        [JsonPropertyName("geolocation")]
        public IpIntelligenceResponseGeolocation? Geolocation { get { return this.GeolocationOption; } set { this.GeolocationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Network
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> NetworkOption { get; private set; }

        /// <summary>
        /// Network and routing information
        /// </summary>
        /// <value>Network and routing information</value>
        [JsonPropertyName("network")]
        public Object? Network { get { return this.NetworkOption; } set { this.NetworkOption = new(value); } }

        /// <summary>
        /// Used to track the state of Isp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> IspOption { get; private set; }

        /// <summary>
        /// ISP and organization details
        /// </summary>
        /// <value>ISP and organization details</value>
        [JsonPropertyName("isp")]
        public Object? Isp { get { return this.IspOption; } set { this.IspOption = new(value); } }

        /// <summary>
        /// Used to track the state of Relationships
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> RelationshipsOption { get; private set; }

        /// <summary>
        /// DNS and infrastructure relationships
        /// </summary>
        /// <value>DNS and infrastructure relationships</value>
        [JsonPropertyName("relationships")]
        public Object? Relationships { get { return this.RelationshipsOption; } set { this.RelationshipsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Reputation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ReputationOption { get; private set; }

        /// <summary>
        /// Reputation and threat intelligence
        /// </summary>
        /// <value>Reputation and threat intelligence</value>
        [JsonPropertyName("reputation")]
        public Object? Reputation { get { return this.ReputationOption; } set { this.ReputationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Security
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> SecurityOption { get; private set; }

        /// <summary>
        /// Security assessment and RPKI status
        /// </summary>
        /// <value>Security assessment and RPKI status</value>
        [JsonPropertyName("security")]
        public Object? Security { get { return this.SecurityOption; } set { this.SecurityOption = new(value); } }

        /// <summary>
        /// Used to track the state of Validation
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ValidationOption { get; private set; }

        /// <summary>
        /// IP validation details
        /// </summary>
        /// <value>IP validation details</value>
        [JsonPropertyName("validation")]
        public Object? Validation { get { return this.ValidationOption; } set { this.ValidationOption = new(value); } }

        /// <summary>
        /// Used to track the state of History
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> HistoryOption { get; private set; }

        /// <summary>
        /// Historical routing data
        /// </summary>
        /// <value>Historical routing data</value>
        [JsonPropertyName("history")]
        public Object? History { get { return this.HistoryOption; } set { this.HistoryOption = new(value); } }

        /// <summary>
        /// Used to track the state of AsnDetails
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> AsnDetailsOption { get; private set; }

        /// <summary>
        /// ASN ownership and prefix details
        /// </summary>
        /// <value>ASN ownership and prefix details</value>
        [JsonPropertyName("asn_details")]
        public Object? AsnDetails { get { return this.AsnDetailsOption; } set { this.AsnDetailsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> MetadataOption { get; private set; }

        /// <summary>
        /// Response metadata and data sources
        /// </summary>
        /// <value>Response metadata and data sources</value>
        [JsonPropertyName("metadata")]
        public Object? Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IpIntelligenceResponse {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Geolocation: ").Append(Geolocation).Append("\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("  Isp: ").Append(Isp).Append("\n");
            sb.Append("  Relationships: ").Append(Relationships).Append("\n");
            sb.Append("  Reputation: ").Append(Reputation).Append("\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("  Validation: ").Append(Validation).Append("\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("  AsnDetails: ").Append(AsnDetails).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IpIntelligenceResponse" />
    /// </summary>
    public class IpIntelligenceResponseJsonConverter : JsonConverter<IpIntelligenceResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="IpIntelligenceResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IpIntelligenceResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<IpIntelligenceResponseQuery?> query = default;
            Option<IpIntelligenceResponseSummary?> summary = default;
            Option<IpIntelligenceResponseGeolocation?> geolocation = default;
            Option<Object?> network = default;
            Option<Object?> isp = default;
            Option<Object?> relationships = default;
            Option<Object?> reputation = default;
            Option<Object?> security = default;
            Option<Object?> validation = default;
            Option<Object?> history = default;
            Option<Object?> asnDetails = default;
            Option<Object?> metadata = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "query":
                            query = new Option<IpIntelligenceResponseQuery?>(JsonSerializer.Deserialize<IpIntelligenceResponseQuery>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "summary":
                            summary = new Option<IpIntelligenceResponseSummary?>(JsonSerializer.Deserialize<IpIntelligenceResponseSummary>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "geolocation":
                            geolocation = new Option<IpIntelligenceResponseGeolocation?>(JsonSerializer.Deserialize<IpIntelligenceResponseGeolocation>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "network":
                            network = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "isp":
                            isp = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "relationships":
                            relationships = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "reputation":
                            reputation = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "security":
                            security = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "validation":
                            validation = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "history":
                            history = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "asn_details":
                            asnDetails = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "metadata":
                            metadata = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (query.IsSet && query.Value == null)
                throw new ArgumentNullException(nameof(query), "Property is not nullable for class IpIntelligenceResponse.");

            if (summary.IsSet && summary.Value == null)
                throw new ArgumentNullException(nameof(summary), "Property is not nullable for class IpIntelligenceResponse.");

            if (geolocation.IsSet && geolocation.Value == null)
                throw new ArgumentNullException(nameof(geolocation), "Property is not nullable for class IpIntelligenceResponse.");

            if (network.IsSet && network.Value == null)
                throw new ArgumentNullException(nameof(network), "Property is not nullable for class IpIntelligenceResponse.");

            if (isp.IsSet && isp.Value == null)
                throw new ArgumentNullException(nameof(isp), "Property is not nullable for class IpIntelligenceResponse.");

            if (relationships.IsSet && relationships.Value == null)
                throw new ArgumentNullException(nameof(relationships), "Property is not nullable for class IpIntelligenceResponse.");

            if (reputation.IsSet && reputation.Value == null)
                throw new ArgumentNullException(nameof(reputation), "Property is not nullable for class IpIntelligenceResponse.");

            if (security.IsSet && security.Value == null)
                throw new ArgumentNullException(nameof(security), "Property is not nullable for class IpIntelligenceResponse.");

            if (validation.IsSet && validation.Value == null)
                throw new ArgumentNullException(nameof(validation), "Property is not nullable for class IpIntelligenceResponse.");

            if (history.IsSet && history.Value == null)
                throw new ArgumentNullException(nameof(history), "Property is not nullable for class IpIntelligenceResponse.");

            if (asnDetails.IsSet && asnDetails.Value == null)
                throw new ArgumentNullException(nameof(asnDetails), "Property is not nullable for class IpIntelligenceResponse.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class IpIntelligenceResponse.");

            return new IpIntelligenceResponse(query, summary, geolocation, network, isp, relationships, reputation, security, validation, history, asnDetails, metadata);
        }

        /// <summary>
        /// Serializes a <see cref="IpIntelligenceResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ipIntelligenceResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IpIntelligenceResponse ipIntelligenceResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, ipIntelligenceResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IpIntelligenceResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ipIntelligenceResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IpIntelligenceResponse ipIntelligenceResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (ipIntelligenceResponse.QueryOption.IsSet && ipIntelligenceResponse.Query == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponse.Query), "Property is required for class IpIntelligenceResponse.");

            if (ipIntelligenceResponse.SummaryOption.IsSet && ipIntelligenceResponse.Summary == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponse.Summary), "Property is required for class IpIntelligenceResponse.");

            if (ipIntelligenceResponse.GeolocationOption.IsSet && ipIntelligenceResponse.Geolocation == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponse.Geolocation), "Property is required for class IpIntelligenceResponse.");

            if (ipIntelligenceResponse.NetworkOption.IsSet && ipIntelligenceResponse.Network == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponse.Network), "Property is required for class IpIntelligenceResponse.");

            if (ipIntelligenceResponse.IspOption.IsSet && ipIntelligenceResponse.Isp == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponse.Isp), "Property is required for class IpIntelligenceResponse.");

            if (ipIntelligenceResponse.RelationshipsOption.IsSet && ipIntelligenceResponse.Relationships == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponse.Relationships), "Property is required for class IpIntelligenceResponse.");

            if (ipIntelligenceResponse.ReputationOption.IsSet && ipIntelligenceResponse.Reputation == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponse.Reputation), "Property is required for class IpIntelligenceResponse.");

            if (ipIntelligenceResponse.SecurityOption.IsSet && ipIntelligenceResponse.Security == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponse.Security), "Property is required for class IpIntelligenceResponse.");

            if (ipIntelligenceResponse.ValidationOption.IsSet && ipIntelligenceResponse.Validation == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponse.Validation), "Property is required for class IpIntelligenceResponse.");

            if (ipIntelligenceResponse.HistoryOption.IsSet && ipIntelligenceResponse.History == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponse.History), "Property is required for class IpIntelligenceResponse.");

            if (ipIntelligenceResponse.AsnDetailsOption.IsSet && ipIntelligenceResponse.AsnDetails == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponse.AsnDetails), "Property is required for class IpIntelligenceResponse.");

            if (ipIntelligenceResponse.MetadataOption.IsSet && ipIntelligenceResponse.Metadata == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponse.Metadata), "Property is required for class IpIntelligenceResponse.");

            if (ipIntelligenceResponse.QueryOption.IsSet)
            {
                writer.WritePropertyName("query");
                JsonSerializer.Serialize(writer, ipIntelligenceResponse.Query, jsonSerializerOptions);
            }
            if (ipIntelligenceResponse.SummaryOption.IsSet)
            {
                writer.WritePropertyName("summary");
                JsonSerializer.Serialize(writer, ipIntelligenceResponse.Summary, jsonSerializerOptions);
            }
            if (ipIntelligenceResponse.GeolocationOption.IsSet)
            {
                writer.WritePropertyName("geolocation");
                JsonSerializer.Serialize(writer, ipIntelligenceResponse.Geolocation, jsonSerializerOptions);
            }
            if (ipIntelligenceResponse.NetworkOption.IsSet)
            {
                writer.WritePropertyName("network");
                JsonSerializer.Serialize(writer, ipIntelligenceResponse.Network, jsonSerializerOptions);
            }
            if (ipIntelligenceResponse.IspOption.IsSet)
            {
                writer.WritePropertyName("isp");
                JsonSerializer.Serialize(writer, ipIntelligenceResponse.Isp, jsonSerializerOptions);
            }
            if (ipIntelligenceResponse.RelationshipsOption.IsSet)
            {
                writer.WritePropertyName("relationships");
                JsonSerializer.Serialize(writer, ipIntelligenceResponse.Relationships, jsonSerializerOptions);
            }
            if (ipIntelligenceResponse.ReputationOption.IsSet)
            {
                writer.WritePropertyName("reputation");
                JsonSerializer.Serialize(writer, ipIntelligenceResponse.Reputation, jsonSerializerOptions);
            }
            if (ipIntelligenceResponse.SecurityOption.IsSet)
            {
                writer.WritePropertyName("security");
                JsonSerializer.Serialize(writer, ipIntelligenceResponse.Security, jsonSerializerOptions);
            }
            if (ipIntelligenceResponse.ValidationOption.IsSet)
            {
                writer.WritePropertyName("validation");
                JsonSerializer.Serialize(writer, ipIntelligenceResponse.Validation, jsonSerializerOptions);
            }
            if (ipIntelligenceResponse.HistoryOption.IsSet)
            {
                writer.WritePropertyName("history");
                JsonSerializer.Serialize(writer, ipIntelligenceResponse.History, jsonSerializerOptions);
            }
            if (ipIntelligenceResponse.AsnDetailsOption.IsSet)
            {
                writer.WritePropertyName("asn_details");
                JsonSerializer.Serialize(writer, ipIntelligenceResponse.AsnDetails, jsonSerializerOptions);
            }
            if (ipIntelligenceResponse.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, ipIntelligenceResponse.Metadata, jsonSerializerOptions);
            }
        }
    }
}
