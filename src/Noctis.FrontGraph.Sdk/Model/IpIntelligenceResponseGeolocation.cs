// <auto-generated>
/*
 * Whisper API Platform
 *
 * Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Noctis.FrontGraph.Sdk.Client;

namespace Noctis.FrontGraph.Sdk.Model
{
    /// <summary>
    /// Geolocation data with confidence scores
    /// </summary>
    public partial class IpIntelligenceResponseGeolocation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IpIntelligenceResponseGeolocation" /> class.
        /// </summary>
        /// <param name="country">country</param>
        /// <param name="coordinates">coordinates</param>
        [JsonConstructor]
        public IpIntelligenceResponseGeolocation(Option<IpIntelligenceResponseGeolocationCountry?> country = default, Option<IpIntelligenceResponseGeolocationCoordinates?> coordinates = default)
        {
            CountryOption = country;
            CoordinatesOption = coordinates;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Country
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IpIntelligenceResponseGeolocationCountry?> CountryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [JsonPropertyName("country")]
        public IpIntelligenceResponseGeolocationCountry? Country { get { return this.CountryOption; } set { this.CountryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Coordinates
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<IpIntelligenceResponseGeolocationCoordinates?> CoordinatesOption { get; private set; }

        /// <summary>
        /// Gets or Sets Coordinates
        /// </summary>
        [JsonPropertyName("coordinates")]
        public IpIntelligenceResponseGeolocationCoordinates? Coordinates { get { return this.CoordinatesOption; } set { this.CoordinatesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IpIntelligenceResponseGeolocation {\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Coordinates: ").Append(Coordinates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IpIntelligenceResponseGeolocation" />
    /// </summary>
    public class IpIntelligenceResponseGeolocationJsonConverter : JsonConverter<IpIntelligenceResponseGeolocation>
    {
        /// <summary>
        /// Deserializes json to <see cref="IpIntelligenceResponseGeolocation" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IpIntelligenceResponseGeolocation Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<IpIntelligenceResponseGeolocationCountry?> country = default;
            Option<IpIntelligenceResponseGeolocationCoordinates?> coordinates = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "country":
                            country = new Option<IpIntelligenceResponseGeolocationCountry?>(JsonSerializer.Deserialize<IpIntelligenceResponseGeolocationCountry>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "coordinates":
                            coordinates = new Option<IpIntelligenceResponseGeolocationCoordinates?>(JsonSerializer.Deserialize<IpIntelligenceResponseGeolocationCoordinates>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (country.IsSet && country.Value == null)
                throw new ArgumentNullException(nameof(country), "Property is not nullable for class IpIntelligenceResponseGeolocation.");

            if (coordinates.IsSet && coordinates.Value == null)
                throw new ArgumentNullException(nameof(coordinates), "Property is not nullable for class IpIntelligenceResponseGeolocation.");

            return new IpIntelligenceResponseGeolocation(country, coordinates);
        }

        /// <summary>
        /// Serializes a <see cref="IpIntelligenceResponseGeolocation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ipIntelligenceResponseGeolocation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IpIntelligenceResponseGeolocation ipIntelligenceResponseGeolocation, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, ipIntelligenceResponseGeolocation, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IpIntelligenceResponseGeolocation" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ipIntelligenceResponseGeolocation"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IpIntelligenceResponseGeolocation ipIntelligenceResponseGeolocation, JsonSerializerOptions jsonSerializerOptions)
        {
            if (ipIntelligenceResponseGeolocation.CountryOption.IsSet && ipIntelligenceResponseGeolocation.Country == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponseGeolocation.Country), "Property is required for class IpIntelligenceResponseGeolocation.");

            if (ipIntelligenceResponseGeolocation.CoordinatesOption.IsSet && ipIntelligenceResponseGeolocation.Coordinates == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponseGeolocation.Coordinates), "Property is required for class IpIntelligenceResponseGeolocation.");

            if (ipIntelligenceResponseGeolocation.CountryOption.IsSet)
            {
                writer.WritePropertyName("country");
                JsonSerializer.Serialize(writer, ipIntelligenceResponseGeolocation.Country, jsonSerializerOptions);
            }
            if (ipIntelligenceResponseGeolocation.CoordinatesOption.IsSet)
            {
                writer.WritePropertyName("coordinates");
                JsonSerializer.Serialize(writer, ipIntelligenceResponseGeolocation.Coordinates, jsonSerializerOptions);
            }
        }
    }
}
