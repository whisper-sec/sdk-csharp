// <auto-generated>
/*
 * Whisper API Platform
 *
 * Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Noctis.FrontGraph.Sdk.Client;

namespace Noctis.FrontGraph.Sdk.Model
{
    /// <summary>
    /// IpIntelligenceResponseGeolocationCoordinates
    /// </summary>
    public partial class IpIntelligenceResponseGeolocationCoordinates : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IpIntelligenceResponseGeolocationCoordinates" /> class.
        /// </summary>
        /// <param name="latitude">Latitude</param>
        /// <param name="longitude">Longitude</param>
        /// <param name="accuracyRadius">Accuracy radius in kilometers</param>
        /// <param name="varTimeZone">IANA time zone</param>
        [JsonConstructor]
        public IpIntelligenceResponseGeolocationCoordinates(Option<decimal?> latitude = default, Option<decimal?> longitude = default, Option<int?> accuracyRadius = default, Option<string?> varTimeZone = default)
        {
            LatitudeOption = latitude;
            LongitudeOption = longitude;
            AccuracyRadiusOption = accuracyRadius;
            VarTimeZoneOption = varTimeZone;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Latitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LatitudeOption { get; private set; }

        /// <summary>
        /// Latitude
        /// </summary>
        /// <value>Latitude</value>
        /* <example>37.4223</example> */
        [JsonPropertyName("latitude")]
        public decimal? Latitude { get { return this.LatitudeOption; } set { this.LatitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Longitude
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> LongitudeOption { get; private set; }

        /// <summary>
        /// Longitude
        /// </summary>
        /// <value>Longitude</value>
        /* <example>-122.085</example> */
        [JsonPropertyName("longitude")]
        public decimal? Longitude { get { return this.LongitudeOption; } set { this.LongitudeOption = new(value); } }

        /// <summary>
        /// Used to track the state of AccuracyRadius
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AccuracyRadiusOption { get; private set; }

        /// <summary>
        /// Accuracy radius in kilometers
        /// </summary>
        /// <value>Accuracy radius in kilometers</value>
        /* <example>5</example> */
        [JsonPropertyName("accuracy_radius")]
        public int? AccuracyRadius { get { return this.AccuracyRadiusOption; } set { this.AccuracyRadiusOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarTimeZone
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarTimeZoneOption { get; private set; }

        /// <summary>
        /// IANA time zone
        /// </summary>
        /// <value>IANA time zone</value>
        /* <example>America/Los_Angeles</example> */
        [JsonPropertyName("time_zone")]
        public string? VarTimeZone { get { return this.VarTimeZoneOption; } set { this.VarTimeZoneOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IpIntelligenceResponseGeolocationCoordinates {\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  AccuracyRadius: ").Append(AccuracyRadius).Append("\n");
            sb.Append("  VarTimeZone: ").Append(VarTimeZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IpIntelligenceResponseGeolocationCoordinates" />
    /// </summary>
    public class IpIntelligenceResponseGeolocationCoordinatesJsonConverter : JsonConverter<IpIntelligenceResponseGeolocationCoordinates>
    {
        /// <summary>
        /// Deserializes json to <see cref="IpIntelligenceResponseGeolocationCoordinates" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IpIntelligenceResponseGeolocationCoordinates Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<decimal?> latitude = default;
            Option<decimal?> longitude = default;
            Option<int?> accuracyRadius = default;
            Option<string?> varTimeZone = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "latitude":
                            latitude = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "longitude":
                            longitude = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "accuracy_radius":
                            accuracyRadius = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "time_zone":
                            varTimeZone = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (latitude.IsSet && latitude.Value == null)
                throw new ArgumentNullException(nameof(latitude), "Property is not nullable for class IpIntelligenceResponseGeolocationCoordinates.");

            if (longitude.IsSet && longitude.Value == null)
                throw new ArgumentNullException(nameof(longitude), "Property is not nullable for class IpIntelligenceResponseGeolocationCoordinates.");

            if (accuracyRadius.IsSet && accuracyRadius.Value == null)
                throw new ArgumentNullException(nameof(accuracyRadius), "Property is not nullable for class IpIntelligenceResponseGeolocationCoordinates.");

            if (varTimeZone.IsSet && varTimeZone.Value == null)
                throw new ArgumentNullException(nameof(varTimeZone), "Property is not nullable for class IpIntelligenceResponseGeolocationCoordinates.");

            return new IpIntelligenceResponseGeolocationCoordinates(latitude, longitude, accuracyRadius, varTimeZone);
        }

        /// <summary>
        /// Serializes a <see cref="IpIntelligenceResponseGeolocationCoordinates" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ipIntelligenceResponseGeolocationCoordinates"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IpIntelligenceResponseGeolocationCoordinates ipIntelligenceResponseGeolocationCoordinates, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, ipIntelligenceResponseGeolocationCoordinates, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IpIntelligenceResponseGeolocationCoordinates" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ipIntelligenceResponseGeolocationCoordinates"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IpIntelligenceResponseGeolocationCoordinates ipIntelligenceResponseGeolocationCoordinates, JsonSerializerOptions jsonSerializerOptions)
        {
            if (ipIntelligenceResponseGeolocationCoordinates.VarTimeZoneOption.IsSet && ipIntelligenceResponseGeolocationCoordinates.VarTimeZone == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponseGeolocationCoordinates.VarTimeZone), "Property is required for class IpIntelligenceResponseGeolocationCoordinates.");

            if (ipIntelligenceResponseGeolocationCoordinates.LatitudeOption.IsSet)
                writer.WriteNumber("latitude", ipIntelligenceResponseGeolocationCoordinates.LatitudeOption.Value!.Value);

            if (ipIntelligenceResponseGeolocationCoordinates.LongitudeOption.IsSet)
                writer.WriteNumber("longitude", ipIntelligenceResponseGeolocationCoordinates.LongitudeOption.Value!.Value);

            if (ipIntelligenceResponseGeolocationCoordinates.AccuracyRadiusOption.IsSet)
                writer.WriteNumber("accuracy_radius", ipIntelligenceResponseGeolocationCoordinates.AccuracyRadiusOption.Value!.Value);

            if (ipIntelligenceResponseGeolocationCoordinates.VarTimeZoneOption.IsSet)
                writer.WriteString("time_zone", ipIntelligenceResponseGeolocationCoordinates.VarTimeZone);
        }
    }
}
