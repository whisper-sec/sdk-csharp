// <auto-generated>
/*
 * Whisper API Platform
 *
 * Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Noctis.FrontGraph.Sdk.Client;

namespace Noctis.FrontGraph.Sdk.Model
{
    /// <summary>
    /// Comprehensive domain intelligence response containing registration, DNS, relationships, and IP data
    /// </summary>
    public partial class DomainIntelligenceResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainIntelligenceResponse" /> class.
        /// </summary>
        /// <param name="query">query</param>
        /// <param name="summary">summary</param>
        /// <param name="registration">WHOIS registration details</param>
        /// <param name="dns">DNS records (A, AAAA, MX, NS, TXT, etc.)</param>
        /// <param name="relationships">Related domains and infrastructure</param>
        /// <param name="trademark">Trademark information</param>
        /// <param name="ipIntelligence">Intelligence for resolved IP addresses</param>
        /// <param name="metadata">Response metadata and data sources</param>
        [JsonConstructor]
        public DomainIntelligenceResponse(Option<DomainIntelligenceResponseQuery?> query = default, Option<DomainIntelligenceResponseSummary?> summary = default, Option<Object?> registration = default, Option<Object?> dns = default, Option<Object?> relationships = default, Option<Object?> trademark = default, Option<Object?> ipIntelligence = default, Option<Object?> metadata = default)
        {
            QueryOption = query;
            SummaryOption = summary;
            RegistrationOption = registration;
            DnsOption = dns;
            RelationshipsOption = relationships;
            TrademarkOption = trademark;
            IpIntelligenceOption = ipIntelligence;
            MetadataOption = metadata;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Query
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DomainIntelligenceResponseQuery?> QueryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>
        [JsonPropertyName("query")]
        public DomainIntelligenceResponseQuery? Query { get { return this.QueryOption; } set { this.QueryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Summary
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DomainIntelligenceResponseSummary?> SummaryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [JsonPropertyName("summary")]
        public DomainIntelligenceResponseSummary? Summary { get { return this.SummaryOption; } set { this.SummaryOption = new(value); } }

        /// <summary>
        /// Used to track the state of Registration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> RegistrationOption { get; private set; }

        /// <summary>
        /// WHOIS registration details
        /// </summary>
        /// <value>WHOIS registration details</value>
        [JsonPropertyName("registration")]
        public Object? Registration { get { return this.RegistrationOption; } set { this.RegistrationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dns
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> DnsOption { get; private set; }

        /// <summary>
        /// DNS records (A, AAAA, MX, NS, TXT, etc.)
        /// </summary>
        /// <value>DNS records (A, AAAA, MX, NS, TXT, etc.)</value>
        [JsonPropertyName("dns")]
        public Object? Dns { get { return this.DnsOption; } set { this.DnsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Relationships
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> RelationshipsOption { get; private set; }

        /// <summary>
        /// Related domains and infrastructure
        /// </summary>
        /// <value>Related domains and infrastructure</value>
        [JsonPropertyName("relationships")]
        public Object? Relationships { get { return this.RelationshipsOption; } set { this.RelationshipsOption = new(value); } }

        /// <summary>
        /// Used to track the state of Trademark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> TrademarkOption { get; private set; }

        /// <summary>
        /// Trademark information
        /// </summary>
        /// <value>Trademark information</value>
        [JsonPropertyName("trademark")]
        public Object? Trademark { get { return this.TrademarkOption; } set { this.TrademarkOption = new(value); } }

        /// <summary>
        /// Used to track the state of IpIntelligence
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> IpIntelligenceOption { get; private set; }

        /// <summary>
        /// Intelligence for resolved IP addresses
        /// </summary>
        /// <value>Intelligence for resolved IP addresses</value>
        [JsonPropertyName("ip_intelligence")]
        public Object? IpIntelligence { get { return this.IpIntelligenceOption; } set { this.IpIntelligenceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Metadata
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> MetadataOption { get; private set; }

        /// <summary>
        /// Response metadata and data sources
        /// </summary>
        /// <value>Response metadata and data sources</value>
        [JsonPropertyName("metadata")]
        public Object? Metadata { get { return this.MetadataOption; } set { this.MetadataOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DomainIntelligenceResponse {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Registration: ").Append(Registration).Append("\n");
            sb.Append("  Dns: ").Append(Dns).Append("\n");
            sb.Append("  Relationships: ").Append(Relationships).Append("\n");
            sb.Append("  Trademark: ").Append(Trademark).Append("\n");
            sb.Append("  IpIntelligence: ").Append(IpIntelligence).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DomainIntelligenceResponse" />
    /// </summary>
    public class DomainIntelligenceResponseJsonConverter : JsonConverter<DomainIntelligenceResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="DomainIntelligenceResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DomainIntelligenceResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<DomainIntelligenceResponseQuery?> query = default;
            Option<DomainIntelligenceResponseSummary?> summary = default;
            Option<Object?> registration = default;
            Option<Object?> dns = default;
            Option<Object?> relationships = default;
            Option<Object?> trademark = default;
            Option<Object?> ipIntelligence = default;
            Option<Object?> metadata = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "query":
                            query = new Option<DomainIntelligenceResponseQuery?>(JsonSerializer.Deserialize<DomainIntelligenceResponseQuery>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "summary":
                            summary = new Option<DomainIntelligenceResponseSummary?>(JsonSerializer.Deserialize<DomainIntelligenceResponseSummary>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "registration":
                            registration = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "dns":
                            dns = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "relationships":
                            relationships = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "trademark":
                            trademark = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "ip_intelligence":
                            ipIntelligence = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "metadata":
                            metadata = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (query.IsSet && query.Value == null)
                throw new ArgumentNullException(nameof(query), "Property is not nullable for class DomainIntelligenceResponse.");

            if (summary.IsSet && summary.Value == null)
                throw new ArgumentNullException(nameof(summary), "Property is not nullable for class DomainIntelligenceResponse.");

            if (registration.IsSet && registration.Value == null)
                throw new ArgumentNullException(nameof(registration), "Property is not nullable for class DomainIntelligenceResponse.");

            if (dns.IsSet && dns.Value == null)
                throw new ArgumentNullException(nameof(dns), "Property is not nullable for class DomainIntelligenceResponse.");

            if (relationships.IsSet && relationships.Value == null)
                throw new ArgumentNullException(nameof(relationships), "Property is not nullable for class DomainIntelligenceResponse.");

            if (trademark.IsSet && trademark.Value == null)
                throw new ArgumentNullException(nameof(trademark), "Property is not nullable for class DomainIntelligenceResponse.");

            if (ipIntelligence.IsSet && ipIntelligence.Value == null)
                throw new ArgumentNullException(nameof(ipIntelligence), "Property is not nullable for class DomainIntelligenceResponse.");

            if (metadata.IsSet && metadata.Value == null)
                throw new ArgumentNullException(nameof(metadata), "Property is not nullable for class DomainIntelligenceResponse.");

            return new DomainIntelligenceResponse(query, summary, registration, dns, relationships, trademark, ipIntelligence, metadata);
        }

        /// <summary>
        /// Serializes a <see cref="DomainIntelligenceResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainIntelligenceResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DomainIntelligenceResponse domainIntelligenceResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, domainIntelligenceResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DomainIntelligenceResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainIntelligenceResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DomainIntelligenceResponse domainIntelligenceResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (domainIntelligenceResponse.QueryOption.IsSet && domainIntelligenceResponse.Query == null)
                throw new ArgumentNullException(nameof(domainIntelligenceResponse.Query), "Property is required for class DomainIntelligenceResponse.");

            if (domainIntelligenceResponse.SummaryOption.IsSet && domainIntelligenceResponse.Summary == null)
                throw new ArgumentNullException(nameof(domainIntelligenceResponse.Summary), "Property is required for class DomainIntelligenceResponse.");

            if (domainIntelligenceResponse.RegistrationOption.IsSet && domainIntelligenceResponse.Registration == null)
                throw new ArgumentNullException(nameof(domainIntelligenceResponse.Registration), "Property is required for class DomainIntelligenceResponse.");

            if (domainIntelligenceResponse.DnsOption.IsSet && domainIntelligenceResponse.Dns == null)
                throw new ArgumentNullException(nameof(domainIntelligenceResponse.Dns), "Property is required for class DomainIntelligenceResponse.");

            if (domainIntelligenceResponse.RelationshipsOption.IsSet && domainIntelligenceResponse.Relationships == null)
                throw new ArgumentNullException(nameof(domainIntelligenceResponse.Relationships), "Property is required for class DomainIntelligenceResponse.");

            if (domainIntelligenceResponse.TrademarkOption.IsSet && domainIntelligenceResponse.Trademark == null)
                throw new ArgumentNullException(nameof(domainIntelligenceResponse.Trademark), "Property is required for class DomainIntelligenceResponse.");

            if (domainIntelligenceResponse.IpIntelligenceOption.IsSet && domainIntelligenceResponse.IpIntelligence == null)
                throw new ArgumentNullException(nameof(domainIntelligenceResponse.IpIntelligence), "Property is required for class DomainIntelligenceResponse.");

            if (domainIntelligenceResponse.MetadataOption.IsSet && domainIntelligenceResponse.Metadata == null)
                throw new ArgumentNullException(nameof(domainIntelligenceResponse.Metadata), "Property is required for class DomainIntelligenceResponse.");

            if (domainIntelligenceResponse.QueryOption.IsSet)
            {
                writer.WritePropertyName("query");
                JsonSerializer.Serialize(writer, domainIntelligenceResponse.Query, jsonSerializerOptions);
            }
            if (domainIntelligenceResponse.SummaryOption.IsSet)
            {
                writer.WritePropertyName("summary");
                JsonSerializer.Serialize(writer, domainIntelligenceResponse.Summary, jsonSerializerOptions);
            }
            if (domainIntelligenceResponse.RegistrationOption.IsSet)
            {
                writer.WritePropertyName("registration");
                JsonSerializer.Serialize(writer, domainIntelligenceResponse.Registration, jsonSerializerOptions);
            }
            if (domainIntelligenceResponse.DnsOption.IsSet)
            {
                writer.WritePropertyName("dns");
                JsonSerializer.Serialize(writer, domainIntelligenceResponse.Dns, jsonSerializerOptions);
            }
            if (domainIntelligenceResponse.RelationshipsOption.IsSet)
            {
                writer.WritePropertyName("relationships");
                JsonSerializer.Serialize(writer, domainIntelligenceResponse.Relationships, jsonSerializerOptions);
            }
            if (domainIntelligenceResponse.TrademarkOption.IsSet)
            {
                writer.WritePropertyName("trademark");
                JsonSerializer.Serialize(writer, domainIntelligenceResponse.Trademark, jsonSerializerOptions);
            }
            if (domainIntelligenceResponse.IpIntelligenceOption.IsSet)
            {
                writer.WritePropertyName("ip_intelligence");
                JsonSerializer.Serialize(writer, domainIntelligenceResponse.IpIntelligence, jsonSerializerOptions);
            }
            if (domainIntelligenceResponse.MetadataOption.IsSet)
            {
                writer.WritePropertyName("metadata");
                JsonSerializer.Serialize(writer, domainIntelligenceResponse.Metadata, jsonSerializerOptions);
            }
        }
    }
}
