// <auto-generated>
/*
 * Whisper API Platform
 *
 * Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Noctis.FrontGraph.Sdk.Client;

namespace Noctis.FrontGraph.Sdk.Model
{
    /// <summary>
    /// DomainIntelligenceResponseSummary
    /// </summary>
    public partial class DomainIntelligenceResponseSummary : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainIntelligenceResponseSummary" /> class.
        /// </summary>
        /// <param name="domainName">Domain name</param>
        /// <param name="registrar">Domain registrar</param>
        /// <param name="registrationDate">Registration date</param>
        /// <param name="expirationDate">Expiration date</param>
        /// <param name="status">Domain status</param>
        /// <param name="hasTrademark">Trademark status</param>
        /// <param name="dnsProvider">Primary DNS provider</param>
        /// <param name="totalLinksIn">Incoming links</param>
        /// <param name="totalLinksOut">Outgoing links</param>
        [JsonConstructor]
        public DomainIntelligenceResponseSummary(Option<string?> domainName = default, Option<string?> registrar = default, Option<string?> registrationDate = default, Option<string?> expirationDate = default, Option<string?> status = default, Option<bool?> hasTrademark = default, Option<string?> dnsProvider = default, Option<int?> totalLinksIn = default, Option<int?> totalLinksOut = default)
        {
            DomainNameOption = domainName;
            RegistrarOption = registrar;
            RegistrationDateOption = registrationDate;
            ExpirationDateOption = expirationDate;
            StatusOption = status;
            HasTrademarkOption = hasTrademark;
            DnsProviderOption = dnsProvider;
            TotalLinksInOption = totalLinksIn;
            TotalLinksOutOption = totalLinksOut;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of DomainName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DomainNameOption { get; private set; }

        /// <summary>
        /// Domain name
        /// </summary>
        /// <value>Domain name</value>
        /* <example>example.com</example> */
        [JsonPropertyName("domain_name")]
        public string? DomainName { get { return this.DomainNameOption; } set { this.DomainNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Registrar
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RegistrarOption { get; private set; }

        /// <summary>
        /// Domain registrar
        /// </summary>
        /// <value>Domain registrar</value>
        /* <example>MarkMonitor Inc.</example> */
        [JsonPropertyName("registrar")]
        public string? Registrar { get { return this.RegistrarOption; } set { this.RegistrarOption = new(value); } }

        /// <summary>
        /// Used to track the state of RegistrationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RegistrationDateOption { get; private set; }

        /// <summary>
        /// Registration date
        /// </summary>
        /// <value>Registration date</value>
        /* <example>1995-08-14</example> */
        [JsonPropertyName("registration_date")]
        public string? RegistrationDate { get { return this.RegistrationDateOption; } set { this.RegistrationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExpirationDate
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExpirationDateOption { get; private set; }

        /// <summary>
        /// Expiration date
        /// </summary>
        /// <value>Expiration date</value>
        /* <example>2025-08-13</example> */
        [JsonPropertyName("expiration_date")]
        public string? ExpirationDate { get { return this.ExpirationDateOption; } set { this.ExpirationDateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Status
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StatusOption { get; private set; }

        /// <summary>
        /// Domain status
        /// </summary>
        /// <value>Domain status</value>
        /* <example>active</example> */
        [JsonPropertyName("status")]
        public string? Status { get { return this.StatusOption; } set { this.StatusOption = new(value); } }

        /// <summary>
        /// Used to track the state of HasTrademark
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> HasTrademarkOption { get; private set; }

        /// <summary>
        /// Trademark status
        /// </summary>
        /// <value>Trademark status</value>
        /* <example>true</example> */
        [JsonPropertyName("has_trademark")]
        public bool? HasTrademark { get { return this.HasTrademarkOption; } set { this.HasTrademarkOption = new(value); } }

        /// <summary>
        /// Used to track the state of DnsProvider
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DnsProviderOption { get; private set; }

        /// <summary>
        /// Primary DNS provider
        /// </summary>
        /// <value>Primary DNS provider</value>
        /* <example>ns1.google.com</example> */
        [JsonPropertyName("dns_provider")]
        public string? DnsProvider { get { return this.DnsProviderOption; } set { this.DnsProviderOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalLinksIn
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalLinksInOption { get; private set; }

        /// <summary>
        /// Incoming links
        /// </summary>
        /// <value>Incoming links</value>
        /* <example>1500</example> */
        [JsonPropertyName("total_links_in")]
        public int? TotalLinksIn { get { return this.TotalLinksInOption; } set { this.TotalLinksInOption = new(value); } }

        /// <summary>
        /// Used to track the state of TotalLinksOut
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TotalLinksOutOption { get; private set; }

        /// <summary>
        /// Outgoing links
        /// </summary>
        /// <value>Outgoing links</value>
        /* <example>250</example> */
        [JsonPropertyName("total_links_out")]
        public int? TotalLinksOut { get { return this.TotalLinksOutOption; } set { this.TotalLinksOutOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DomainIntelligenceResponseSummary {\n");
            sb.Append("  DomainName: ").Append(DomainName).Append("\n");
            sb.Append("  Registrar: ").Append(Registrar).Append("\n");
            sb.Append("  RegistrationDate: ").Append(RegistrationDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  HasTrademark: ").Append(HasTrademark).Append("\n");
            sb.Append("  DnsProvider: ").Append(DnsProvider).Append("\n");
            sb.Append("  TotalLinksIn: ").Append(TotalLinksIn).Append("\n");
            sb.Append("  TotalLinksOut: ").Append(TotalLinksOut).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DomainIntelligenceResponseSummary" />
    /// </summary>
    public class DomainIntelligenceResponseSummaryJsonConverter : JsonConverter<DomainIntelligenceResponseSummary>
    {
        /// <summary>
        /// Deserializes json to <see cref="DomainIntelligenceResponseSummary" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override DomainIntelligenceResponseSummary Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> domainName = default;
            Option<string?> registrar = default;
            Option<string?> registrationDate = default;
            Option<string?> expirationDate = default;
            Option<string?> status = default;
            Option<bool?> hasTrademark = default;
            Option<string?> dnsProvider = default;
            Option<int?> totalLinksIn = default;
            Option<int?> totalLinksOut = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "domain_name":
                            domainName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "registrar":
                            registrar = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "registration_date":
                            registrationDate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "expiration_date":
                            expirationDate = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "has_trademark":
                            hasTrademark = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "dns_provider":
                            dnsProvider = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "total_links_in":
                            totalLinksIn = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "total_links_out":
                            totalLinksOut = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (domainName.IsSet && domainName.Value == null)
                throw new ArgumentNullException(nameof(domainName), "Property is not nullable for class DomainIntelligenceResponseSummary.");

            if (registrar.IsSet && registrar.Value == null)
                throw new ArgumentNullException(nameof(registrar), "Property is not nullable for class DomainIntelligenceResponseSummary.");

            if (registrationDate.IsSet && registrationDate.Value == null)
                throw new ArgumentNullException(nameof(registrationDate), "Property is not nullable for class DomainIntelligenceResponseSummary.");

            if (expirationDate.IsSet && expirationDate.Value == null)
                throw new ArgumentNullException(nameof(expirationDate), "Property is not nullable for class DomainIntelligenceResponseSummary.");

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class DomainIntelligenceResponseSummary.");

            if (hasTrademark.IsSet && hasTrademark.Value == null)
                throw new ArgumentNullException(nameof(hasTrademark), "Property is not nullable for class DomainIntelligenceResponseSummary.");

            if (dnsProvider.IsSet && dnsProvider.Value == null)
                throw new ArgumentNullException(nameof(dnsProvider), "Property is not nullable for class DomainIntelligenceResponseSummary.");

            if (totalLinksIn.IsSet && totalLinksIn.Value == null)
                throw new ArgumentNullException(nameof(totalLinksIn), "Property is not nullable for class DomainIntelligenceResponseSummary.");

            if (totalLinksOut.IsSet && totalLinksOut.Value == null)
                throw new ArgumentNullException(nameof(totalLinksOut), "Property is not nullable for class DomainIntelligenceResponseSummary.");

            return new DomainIntelligenceResponseSummary(domainName, registrar, registrationDate, expirationDate, status, hasTrademark, dnsProvider, totalLinksIn, totalLinksOut);
        }

        /// <summary>
        /// Serializes a <see cref="DomainIntelligenceResponseSummary" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainIntelligenceResponseSummary"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, DomainIntelligenceResponseSummary domainIntelligenceResponseSummary, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, domainIntelligenceResponseSummary, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="DomainIntelligenceResponseSummary" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainIntelligenceResponseSummary"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, DomainIntelligenceResponseSummary domainIntelligenceResponseSummary, JsonSerializerOptions jsonSerializerOptions)
        {
            if (domainIntelligenceResponseSummary.DomainNameOption.IsSet && domainIntelligenceResponseSummary.DomainName == null)
                throw new ArgumentNullException(nameof(domainIntelligenceResponseSummary.DomainName), "Property is required for class DomainIntelligenceResponseSummary.");

            if (domainIntelligenceResponseSummary.RegistrarOption.IsSet && domainIntelligenceResponseSummary.Registrar == null)
                throw new ArgumentNullException(nameof(domainIntelligenceResponseSummary.Registrar), "Property is required for class DomainIntelligenceResponseSummary.");

            if (domainIntelligenceResponseSummary.RegistrationDateOption.IsSet && domainIntelligenceResponseSummary.RegistrationDate == null)
                throw new ArgumentNullException(nameof(domainIntelligenceResponseSummary.RegistrationDate), "Property is required for class DomainIntelligenceResponseSummary.");

            if (domainIntelligenceResponseSummary.ExpirationDateOption.IsSet && domainIntelligenceResponseSummary.ExpirationDate == null)
                throw new ArgumentNullException(nameof(domainIntelligenceResponseSummary.ExpirationDate), "Property is required for class DomainIntelligenceResponseSummary.");

            if (domainIntelligenceResponseSummary.StatusOption.IsSet && domainIntelligenceResponseSummary.Status == null)
                throw new ArgumentNullException(nameof(domainIntelligenceResponseSummary.Status), "Property is required for class DomainIntelligenceResponseSummary.");

            if (domainIntelligenceResponseSummary.DnsProviderOption.IsSet && domainIntelligenceResponseSummary.DnsProvider == null)
                throw new ArgumentNullException(nameof(domainIntelligenceResponseSummary.DnsProvider), "Property is required for class DomainIntelligenceResponseSummary.");

            if (domainIntelligenceResponseSummary.DomainNameOption.IsSet)
                writer.WriteString("domain_name", domainIntelligenceResponseSummary.DomainName);

            if (domainIntelligenceResponseSummary.RegistrarOption.IsSet)
                writer.WriteString("registrar", domainIntelligenceResponseSummary.Registrar);

            if (domainIntelligenceResponseSummary.RegistrationDateOption.IsSet)
                writer.WriteString("registration_date", domainIntelligenceResponseSummary.RegistrationDate);

            if (domainIntelligenceResponseSummary.ExpirationDateOption.IsSet)
                writer.WriteString("expiration_date", domainIntelligenceResponseSummary.ExpirationDate);

            if (domainIntelligenceResponseSummary.StatusOption.IsSet)
                writer.WriteString("status", domainIntelligenceResponseSummary.Status);

            if (domainIntelligenceResponseSummary.HasTrademarkOption.IsSet)
                writer.WriteBoolean("has_trademark", domainIntelligenceResponseSummary.HasTrademarkOption.Value!.Value);

            if (domainIntelligenceResponseSummary.DnsProviderOption.IsSet)
                writer.WriteString("dns_provider", domainIntelligenceResponseSummary.DnsProvider);

            if (domainIntelligenceResponseSummary.TotalLinksInOption.IsSet)
                writer.WriteNumber("total_links_in", domainIntelligenceResponseSummary.TotalLinksInOption.Value!.Value);

            if (domainIntelligenceResponseSummary.TotalLinksOutOption.IsSet)
                writer.WriteNumber("total_links_out", domainIntelligenceResponseSummary.TotalLinksOutOption.Value!.Value);
        }
    }
}
