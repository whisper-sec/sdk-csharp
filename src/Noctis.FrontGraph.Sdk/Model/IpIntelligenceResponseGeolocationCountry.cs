// <auto-generated>
/*
 * Whisper API Platform
 *
 * Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Noctis.FrontGraph.Sdk.Client;

namespace Noctis.FrontGraph.Sdk.Model
{
    /// <summary>
    /// IpIntelligenceResponseGeolocationCountry
    /// </summary>
    public partial class IpIntelligenceResponseGeolocationCountry : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IpIntelligenceResponseGeolocationCountry" /> class.
        /// </summary>
        /// <param name="isoCode">ISO 3166-1 alpha-2 code</param>
        /// <param name="name">Country name</param>
        /// <param name="confidence">Confidence score (0-100)</param>
        [JsonConstructor]
        public IpIntelligenceResponseGeolocationCountry(Option<string?> isoCode = default, Option<string?> name = default, Option<int?> confidence = default)
        {
            IsoCodeOption = isoCode;
            NameOption = name;
            ConfidenceOption = confidence;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of IsoCode
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IsoCodeOption { get; private set; }

        /// <summary>
        /// ISO 3166-1 alpha-2 code
        /// </summary>
        /// <value>ISO 3166-1 alpha-2 code</value>
        /* <example>US</example> */
        [JsonPropertyName("iso_code")]
        public string? IsoCode { get { return this.IsoCodeOption; } set { this.IsoCodeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Country name
        /// </summary>
        /// <value>Country name</value>
        /* <example>United States</example> */
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Confidence
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ConfidenceOption { get; private set; }

        /// <summary>
        /// Confidence score (0-100)
        /// </summary>
        /// <value>Confidence score (0-100)</value>
        /* <example>99</example> */
        [JsonPropertyName("confidence")]
        public int? Confidence { get { return this.ConfidenceOption; } set { this.ConfidenceOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IpIntelligenceResponseGeolocationCountry {\n");
            sb.Append("  IsoCode: ").Append(IsoCode).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Confidence: ").Append(Confidence).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IpIntelligenceResponseGeolocationCountry" />
    /// </summary>
    public class IpIntelligenceResponseGeolocationCountryJsonConverter : JsonConverter<IpIntelligenceResponseGeolocationCountry>
    {
        /// <summary>
        /// Deserializes json to <see cref="IpIntelligenceResponseGeolocationCountry" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IpIntelligenceResponseGeolocationCountry Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> isoCode = default;
            Option<string?> name = default;
            Option<int?> confidence = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "iso_code":
                            isoCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "confidence":
                            confidence = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (isoCode.IsSet && isoCode.Value == null)
                throw new ArgumentNullException(nameof(isoCode), "Property is not nullable for class IpIntelligenceResponseGeolocationCountry.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class IpIntelligenceResponseGeolocationCountry.");

            if (confidence.IsSet && confidence.Value == null)
                throw new ArgumentNullException(nameof(confidence), "Property is not nullable for class IpIntelligenceResponseGeolocationCountry.");

            return new IpIntelligenceResponseGeolocationCountry(isoCode, name, confidence);
        }

        /// <summary>
        /// Serializes a <see cref="IpIntelligenceResponseGeolocationCountry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ipIntelligenceResponseGeolocationCountry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IpIntelligenceResponseGeolocationCountry ipIntelligenceResponseGeolocationCountry, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, ipIntelligenceResponseGeolocationCountry, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IpIntelligenceResponseGeolocationCountry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="ipIntelligenceResponseGeolocationCountry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IpIntelligenceResponseGeolocationCountry ipIntelligenceResponseGeolocationCountry, JsonSerializerOptions jsonSerializerOptions)
        {
            if (ipIntelligenceResponseGeolocationCountry.IsoCodeOption.IsSet && ipIntelligenceResponseGeolocationCountry.IsoCode == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponseGeolocationCountry.IsoCode), "Property is required for class IpIntelligenceResponseGeolocationCountry.");

            if (ipIntelligenceResponseGeolocationCountry.NameOption.IsSet && ipIntelligenceResponseGeolocationCountry.Name == null)
                throw new ArgumentNullException(nameof(ipIntelligenceResponseGeolocationCountry.Name), "Property is required for class IpIntelligenceResponseGeolocationCountry.");

            if (ipIntelligenceResponseGeolocationCountry.IsoCodeOption.IsSet)
                writer.WriteString("iso_code", ipIntelligenceResponseGeolocationCountry.IsoCode);

            if (ipIntelligenceResponseGeolocationCountry.NameOption.IsSet)
                writer.WriteString("name", ipIntelligenceResponseGeolocationCountry.Name);

            if (ipIntelligenceResponseGeolocationCountry.ConfidenceOption.IsSet)
                writer.WriteNumber("confidence", ipIntelligenceResponseGeolocationCountry.ConfidenceOption.Value!.Value);
        }
    }
}
