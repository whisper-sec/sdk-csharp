// <auto-generated>
/*
 * Whisper API Platform
 *
 * Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Noctis.FrontGraph.Sdk.Client;

namespace Noctis.FrontGraph.Sdk.Model
{
    /// <summary>
    /// Type of similarity that was used for the search
    /// </summary>
    /// <value>Type of similarity that was used for the search</value>
    public enum DomainerSimilarityType
    {
        /// <summary>
        /// Enum CONTAINS for value: CONTAINS
        /// </summary>
        CONTAINS = 1,

        /// <summary>
        /// Enum PREFIX for value: PREFIX
        /// </summary>
        PREFIX = 2,

        /// <summary>
        /// Enum SUFFIX for value: SUFFIX
        /// </summary>
        SUFFIX = 3,

        /// <summary>
        /// Enum TYPO for value: TYPO
        /// </summary>
        TYPO = 4,

        /// <summary>
        /// Enum SOUNDING for value: SOUNDING
        /// </summary>
        SOUNDING = 5,

        /// <summary>
        /// Enum UTFVARS for value: UTFVARS
        /// </summary>
        UTFVARS = 6,

        /// <summary>
        /// Enum TLDVARIANTS for value: TLD_VARIANTS
        /// </summary>
        TLDVARIANTS = 7,

        /// <summary>
        /// Enum TYPOORSOUNDING for value: TYPO_OR_SOUNDING
        /// </summary>
        TYPOORSOUNDING = 8,

        /// <summary>
        /// Enum LEVENSHTEIN for value: LEVENSHTEIN
        /// </summary>
        LEVENSHTEIN = 9
    }

    /// <summary>
    /// Converts <see cref="DomainerSimilarityType"/> to and from the JSON value
    /// </summary>
    public static class DomainerSimilarityTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="DomainerSimilarityType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DomainerSimilarityType FromString(string value)
        {
            if (value.Equals("CONTAINS"))
                return DomainerSimilarityType.CONTAINS;

            if (value.Equals("PREFIX"))
                return DomainerSimilarityType.PREFIX;

            if (value.Equals("SUFFIX"))
                return DomainerSimilarityType.SUFFIX;

            if (value.Equals("TYPO"))
                return DomainerSimilarityType.TYPO;

            if (value.Equals("SOUNDING"))
                return DomainerSimilarityType.SOUNDING;

            if (value.Equals("UTFVARS"))
                return DomainerSimilarityType.UTFVARS;

            if (value.Equals("TLD_VARIANTS"))
                return DomainerSimilarityType.TLDVARIANTS;

            if (value.Equals("TYPO_OR_SOUNDING"))
                return DomainerSimilarityType.TYPOORSOUNDING;

            if (value.Equals("LEVENSHTEIN"))
                return DomainerSimilarityType.LEVENSHTEIN;

            throw new NotImplementedException($"Could not convert value to type DomainerSimilarityType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="DomainerSimilarityType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static DomainerSimilarityType? FromStringOrDefault(string value)
        {
            if (value.Equals("CONTAINS"))
                return DomainerSimilarityType.CONTAINS;

            if (value.Equals("PREFIX"))
                return DomainerSimilarityType.PREFIX;

            if (value.Equals("SUFFIX"))
                return DomainerSimilarityType.SUFFIX;

            if (value.Equals("TYPO"))
                return DomainerSimilarityType.TYPO;

            if (value.Equals("SOUNDING"))
                return DomainerSimilarityType.SOUNDING;

            if (value.Equals("UTFVARS"))
                return DomainerSimilarityType.UTFVARS;

            if (value.Equals("TLD_VARIANTS"))
                return DomainerSimilarityType.TLDVARIANTS;

            if (value.Equals("TYPO_OR_SOUNDING"))
                return DomainerSimilarityType.TYPOORSOUNDING;

            if (value.Equals("LEVENSHTEIN"))
                return DomainerSimilarityType.LEVENSHTEIN;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="DomainerSimilarityType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(DomainerSimilarityType value)
        {
            if (value == DomainerSimilarityType.CONTAINS)
                return "CONTAINS";

            if (value == DomainerSimilarityType.PREFIX)
                return "PREFIX";

            if (value == DomainerSimilarityType.SUFFIX)
                return "SUFFIX";

            if (value == DomainerSimilarityType.TYPO)
                return "TYPO";

            if (value == DomainerSimilarityType.SOUNDING)
                return "SOUNDING";

            if (value == DomainerSimilarityType.UTFVARS)
                return "UTFVARS";

            if (value == DomainerSimilarityType.TLDVARIANTS)
                return "TLD_VARIANTS";

            if (value == DomainerSimilarityType.TYPOORSOUNDING)
                return "TYPO_OR_SOUNDING";

            if (value == DomainerSimilarityType.LEVENSHTEIN)
                return "LEVENSHTEIN";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DomainerSimilarityType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class DomainerSimilarityTypeJsonConverter : JsonConverter<DomainerSimilarityType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DomainerSimilarityType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DomainerSimilarityType? result = rawValue == null
                ? null
                : DomainerSimilarityTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DomainerSimilarityType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainerSimilarityType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DomainerSimilarityType domainerSimilarityType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(domainerSimilarityType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="DomainerSimilarityType"/>
    /// </summary>
    public class DomainerSimilarityTypeNullableJsonConverter : JsonConverter<DomainerSimilarityType?>
    {
        /// <summary>
        /// Returns a DomainerSimilarityType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override DomainerSimilarityType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            DomainerSimilarityType? result = rawValue == null
                ? null
                : DomainerSimilarityTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="domainerSimilarityType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, DomainerSimilarityType? domainerSimilarityType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(domainerSimilarityType?.ToString() ?? "null");
        }
    }
}
