// <auto-generated>
/*
 * Whisper API Platform
 *
 * Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Noctis.FrontGraph.Sdk.Client;

namespace Noctis.FrontGraph.Sdk.Model
{
    /// <summary>
    /// ErrorResponse
    /// </summary>
    public partial class ErrorResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ErrorResponse" /> class.
        /// </summary>
        /// <param name="error">Error code for programmatic handling</param>
        /// <param name="message">Human-readable error message</param>
        /// <param name="timestamp">Timestamp when the error occurred</param>
        /// <param name="path">Request path that caused the error</param>
        [JsonConstructor]
        public ErrorResponse(string error, string message, DateTime timestamp, Option<string?> path = default)
        {
            Error = error;
            Message = message;
            Timestamp = timestamp;
            PathOption = path;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Error code for programmatic handling
        /// </summary>
        /// <value>Error code for programmatic handling</value>
        /* <example>INVALID_IP_FORMAT</example> */
        [JsonPropertyName("error")]
        public string Error { get; set; }

        /// <summary>
        /// Human-readable error message
        /// </summary>
        /// <value>Human-readable error message</value>
        /* <example>The provided IP address is not valid</example> */
        [JsonPropertyName("message")]
        public string Message { get; set; }

        /// <summary>
        /// Timestamp when the error occurred
        /// </summary>
        /// <value>Timestamp when the error occurred</value>
        /* <example>2025-09-13T10:30Z</example> */
        [JsonPropertyName("timestamp")]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Used to track the state of Path
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathOption { get; private set; }

        /// <summary>
        /// Request path that caused the error
        /// </summary>
        /// <value>Request path that caused the error</value>
        /* <example>/intelligence/v1/ip/invalid</example> */
        [JsonPropertyName("path")]
        public string? Path { get { return this.PathOption; } set { this.PathOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ErrorResponse {\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ErrorResponse" />
    /// </summary>
    public class ErrorResponseJsonConverter : JsonConverter<ErrorResponse>
    {
        /// <summary>
        /// The format to use to serialize Timestamp
        /// </summary>
        public static string TimestampFormat { get; set; } = "yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'fffffffK";

        /// <summary>
        /// Deserializes json to <see cref="ErrorResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ErrorResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> error = default;
            Option<string?> message = default;
            Option<DateTime?> timestamp = default;
            Option<string?> path = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "error":
                            error = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "message":
                            message = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "timestamp":
                            timestamp = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "path":
                            path = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!error.IsSet)
                throw new ArgumentException("Property is required for class ErrorResponse.", nameof(error));

            if (!message.IsSet)
                throw new ArgumentException("Property is required for class ErrorResponse.", nameof(message));

            if (!timestamp.IsSet)
                throw new ArgumentException("Property is required for class ErrorResponse.", nameof(timestamp));

            if (error.IsSet && error.Value == null)
                throw new ArgumentNullException(nameof(error), "Property is not nullable for class ErrorResponse.");

            if (message.IsSet && message.Value == null)
                throw new ArgumentNullException(nameof(message), "Property is not nullable for class ErrorResponse.");

            if (timestamp.IsSet && timestamp.Value == null)
                throw new ArgumentNullException(nameof(timestamp), "Property is not nullable for class ErrorResponse.");

            if (path.IsSet && path.Value == null)
                throw new ArgumentNullException(nameof(path), "Property is not nullable for class ErrorResponse.");

            return new ErrorResponse(error.Value!, message.Value!, timestamp.Value!.Value!, path);
        }

        /// <summary>
        /// Serializes a <see cref="ErrorResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="errorResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ErrorResponse errorResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, errorResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ErrorResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="errorResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ErrorResponse errorResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (errorResponse.Error == null)
                throw new ArgumentNullException(nameof(errorResponse.Error), "Property is required for class ErrorResponse.");

            if (errorResponse.Message == null)
                throw new ArgumentNullException(nameof(errorResponse.Message), "Property is required for class ErrorResponse.");

            if (errorResponse.PathOption.IsSet && errorResponse.Path == null)
                throw new ArgumentNullException(nameof(errorResponse.Path), "Property is required for class ErrorResponse.");

            writer.WriteString("error", errorResponse.Error);

            writer.WriteString("message", errorResponse.Message);

            writer.WriteString("timestamp", errorResponse.Timestamp.ToString(TimestampFormat));

            if (errorResponse.PathOption.IsSet)
                writer.WriteString("path", errorResponse.Path);
        }
    }
}
