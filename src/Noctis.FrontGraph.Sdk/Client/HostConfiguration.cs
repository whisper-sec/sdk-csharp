/*
 * Whisper API Platform
 *
 * Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using Noctis.FrontGraph.Sdk.Api;
using Noctis.FrontGraph.Sdk.Model;

namespace Noctis.FrontGraph.Sdk.Client
{
    /// <summary>
    /// Provides hosting configuration for Noctis.FrontGraph.Sdk
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyJsonConverter());
            _jsonOptions.Converters.Add(new DateOnlyNullableJsonConverter());
            _jsonOptions.Converters.Add(new DomainIntelligenceResponseJsonConverter());
            _jsonOptions.Converters.Add(new DomainIntelligenceResponseQueryJsonConverter());
            _jsonOptions.Converters.Add(new DomainIntelligenceResponseSummaryJsonConverter());
            _jsonOptions.Converters.Add(new DomainerAsyncRequestDTOJsonConverter());
            _jsonOptions.Converters.Add(new DomainerAsyncResponseDTOJsonConverter());
            _jsonOptions.Converters.Add(new DomainerAsyncResultDTOJsonConverter());
            _jsonOptions.Converters.Add(new DomainerSimilarityTypeJsonConverter());
            _jsonOptions.Converters.Add(new DomainerSimilarityTypeNullableJsonConverter());
            _jsonOptions.Converters.Add(new DomainerStringListResponseJsonConverter());
            _jsonOptions.Converters.Add(new ErrorResponseJsonConverter());
            _jsonOptions.Converters.Add(new IpIntelligenceResponseJsonConverter());
            _jsonOptions.Converters.Add(new IpIntelligenceResponseGeolocationJsonConverter());
            _jsonOptions.Converters.Add(new IpIntelligenceResponseGeolocationCoordinatesJsonConverter());
            _jsonOptions.Converters.Add(new IpIntelligenceResponseGeolocationCountryJsonConverter());
            _jsonOptions.Converters.Add(new IpIntelligenceResponseQueryJsonConverter());
            _jsonOptions.Converters.Add(new IpIntelligenceResponseSummaryJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<DomainManagementApiEvents>();
            _services.AddTransient<IDomainManagementApi, DomainManagementApi>();
            _services.AddSingleton<IntelligenceServicesApiEvents>();
            _services.AddTransient<IIntelligenceServicesApi, IntelligenceServicesApi>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddApiHttpClients
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IDomainManagementApi, DomainManagementApi>(client));
            builders.Add(_services.AddHttpClient<IIntelligenceServicesApi, IntelligenceServicesApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
