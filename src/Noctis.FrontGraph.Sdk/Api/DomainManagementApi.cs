// <auto-generated>
/*
 * Whisper API Platform
 *
 * Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** • Domain intelligence and subdomain discovery • IP geolocation and network analysis • Real-time and historical WHOIS data • Automated website screenshot capture • Network relationship mapping • BGP routing and security intelligence • Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Noctis.FrontGraph.Sdk.Client;
using Noctis.FrontGraph.Sdk.Model;
using System.Diagnostics.CodeAnalysis;

namespace Noctis.FrontGraph.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IDomainManagementApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        DomainManagementApiEvents Events { get; }

        /// <summary>
        /// Find subdomains
        /// </summary>
        /// <remarks>
        /// Finds domains that are subdomains of the given base domain (e.g., finding &#39;www.example.com&#39; for base &#39;example.com&#39;). Allows filtering by absolute domain level (dot count). NOTE: This differs from relative depth filtering.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseDomain">Base domain name (e.g., example.com)</param>
        /// <param name="limit">Maximum number of results (optional, default to 100)</param>
        /// <param name="level">Level of subdomains to find relative to the base domain (ALL, IMMEDIATE&#x3D;one level deeper, MAX_DEPTH&#x3D;deepest found relative to base). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSubdomainsApiResponse"/>&gt;</returns>
        Task<IFindSubdomainsApiResponse> FindSubdomainsAsync(string baseDomain, Option<int> limit = default, Option<string> level = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Find subdomains
        /// </summary>
        /// <remarks>
        /// Finds domains that are subdomains of the given base domain (e.g., finding &#39;www.example.com&#39; for base &#39;example.com&#39;). Allows filtering by absolute domain level (dot count). NOTE: This differs from relative depth filtering.
        /// </remarks>
        /// <param name="baseDomain">Base domain name (e.g., example.com)</param>
        /// <param name="limit">Maximum number of results (optional, default to 100)</param>
        /// <param name="level">Level of subdomains to find relative to the base domain (ALL, IMMEDIATE&#x3D;one level deeper, MAX_DEPTH&#x3D;deepest found relative to base). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSubdomainsApiResponse"/>?&gt;</returns>
        Task<IFindSubdomainsApiResponse?> FindSubdomainsOrDefaultAsync(string baseDomain, Option<int> limit = default, Option<string> level = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IFindSubdomainsApiResponse"/>
    /// </summary>
    public interface IFindSubdomainsApiResponse : Noctis.FrontGraph.Sdk.Client.IApiResponse, IOk<Noctis.FrontGraph.Sdk.Model.DomainerStringListResponse?>, IBadRequest<string?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class DomainManagementApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnFindSubdomains;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFindSubdomains;

        internal void ExecuteOnFindSubdomains(DomainManagementApi.FindSubdomainsApiResponse apiResponse)
        {
            OnFindSubdomains?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorFindSubdomains(Exception exception)
        {
            OnErrorFindSubdomains?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class DomainManagementApi : IDomainManagementApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<DomainManagementApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public DomainManagementApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DomainManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DomainManagementApi(ILogger<DomainManagementApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, DomainManagementApiEvents domainManagementApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<DomainManagementApi>();
            HttpClient = httpClient;
            Events = domainManagementApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatFindSubdomains(ref string baseDomain, ref Option<int> limit, ref Option<string> level);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="baseDomain"></param>
        /// <param name="level"></param>
        /// <returns></returns>
        private void ValidateFindSubdomains(string baseDomain, Option<string> level)
        {
            if (baseDomain == null)
                throw new ArgumentNullException(nameof(baseDomain));

            if (level.IsSet && level.Value == null)
                throw new ArgumentNullException(nameof(level));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="baseDomain"></param>
        /// <param name="limit"></param>
        /// <param name="level"></param>
        private void AfterFindSubdomainsDefaultImplementation(IFindSubdomainsApiResponse apiResponseLocalVar, string baseDomain, Option<int> limit, Option<string> level)
        {
            bool suppressDefaultLog = false;
            AfterFindSubdomains(ref suppressDefaultLog, apiResponseLocalVar, baseDomain, limit, level);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="baseDomain"></param>
        /// <param name="limit"></param>
        /// <param name="level"></param>
        partial void AfterFindSubdomains(ref bool suppressDefaultLog, IFindSubdomainsApiResponse apiResponseLocalVar, string baseDomain, Option<int> limit, Option<string> level);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="baseDomain"></param>
        /// <param name="limit"></param>
        /// <param name="level"></param>
        private void OnErrorFindSubdomainsDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string baseDomain, Option<int> limit, Option<string> level)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorFindSubdomains(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, baseDomain, limit, level);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="baseDomain"></param>
        /// <param name="limit"></param>
        /// <param name="level"></param>
        partial void OnErrorFindSubdomains(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string baseDomain, Option<int> limit, Option<string> level);

        /// <summary>
        /// Find subdomains Finds domains that are subdomains of the given base domain (e.g., finding &#39;www.example.com&#39; for base &#39;example.com&#39;). Allows filtering by absolute domain level (dot count). NOTE: This differs from relative depth filtering.
        /// </summary>
        /// <param name="baseDomain">Base domain name (e.g., example.com)</param>
        /// <param name="limit">Maximum number of results (optional, default to 100)</param>
        /// <param name="level">Level of subdomains to find relative to the base domain (ALL, IMMEDIATE&#x3D;one level deeper, MAX_DEPTH&#x3D;deepest found relative to base). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSubdomainsApiResponse"/>&gt;</returns>
        public async Task<IFindSubdomainsApiResponse?> FindSubdomainsOrDefaultAsync(string baseDomain, Option<int> limit = default, Option<string> level = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FindSubdomainsAsync(baseDomain, limit, level, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Find subdomains Finds domains that are subdomains of the given base domain (e.g., finding &#39;www.example.com&#39; for base &#39;example.com&#39;). Allows filtering by absolute domain level (dot count). NOTE: This differs from relative depth filtering.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="baseDomain">Base domain name (e.g., example.com)</param>
        /// <param name="limit">Maximum number of results (optional, default to 100)</param>
        /// <param name="level">Level of subdomains to find relative to the base domain (ALL, IMMEDIATE&#x3D;one level deeper, MAX_DEPTH&#x3D;deepest found relative to base). (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IFindSubdomainsApiResponse"/>&gt;</returns>
        public async Task<IFindSubdomainsApiResponse> FindSubdomainsAsync(string baseDomain, Option<int> limit = default, Option<string> level = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateFindSubdomains(baseDomain, level);

                FormatFindSubdomains(ref baseDomain, ref limit, ref level);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/domainer/api/domains/subdomains/{baseDomain}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/domainer/api/domains/subdomains/{baseDomain}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BbaseDomain%7D", Uri.EscapeDataString(baseDomain.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (level.IsSet)
                        parseQueryStringLocalVar["level"] = ClientUtils.ParameterToString(level.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<FindSubdomainsApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<FindSubdomainsApiResponse>();

                        FindSubdomainsApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/domainer/api/domains/subdomains/{baseDomain}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFindSubdomainsDefaultImplementation(apiResponseLocalVar, baseDomain, limit, level);

                        Events.ExecuteOnFindSubdomains(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFindSubdomainsDefaultImplementation(e, "/domainer/api/domains/subdomains/{baseDomain}", uriBuilderLocalVar.Path, baseDomain, limit, level);
                Events.ExecuteOnErrorFindSubdomains(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="FindSubdomainsApiResponse"/>
        /// </summary>
        public partial class FindSubdomainsApiResponse : Noctis.FrontGraph.Sdk.Client.ApiResponse, IFindSubdomainsApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<FindSubdomainsApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="FindSubdomainsApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public FindSubdomainsApiResponse(ILogger<FindSubdomainsApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Noctis.FrontGraph.Sdk.Model.DomainerStringListResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Noctis.FrontGraph.Sdk.Model.DomainerStringListResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Noctis.FrontGraph.Sdk.Model.DomainerStringListResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public string? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<string>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out string? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
