// <auto-generated>
/*
 * Whisper API Platform
 *
 * Whisper provides comprehensive intelligence and monitoring capabilities for domains, IPs, and web infrastructure. Access powerful APIs for WHOIS data, DNS analysis, screenshot capture, network intelligence, and more - all through a unified, authenticated interface.  **Key Features:** â€¢ Domain intelligence and subdomain discovery â€¢ IP geolocation and network analysis â€¢ Real-time and historical WHOIS data â€¢ Automated website screenshot capture â€¢ Network relationship mapping â€¢ BGP routing and security intelligence â€¢ Infrastructure monitoring and health checks  **Authentication:** All endpoints require Bearer token authentication. Contact support for API access.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@whisper.security
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using Noctis.FrontGraph.Sdk.Client;
using Noctis.FrontGraph.Sdk.Model;
using System.Diagnostics.CodeAnalysis;

namespace Noctis.FrontGraph.Sdk.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IIntelligenceServicesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        IntelligenceServicesApiEvents Events { get; }

        /// <summary>
        /// Get comprehensive domain intelligence with streaming support
        /// </summary>
        /// <remarks>
        /// Analyzes a domain name and returns comprehensive intelligence data from multiple sources.  **ðŸš€ Response Modes:** - **Batch Mode** (Default): Complete JSON response in 2-5 seconds - **Streaming Mode**: Server-Sent Events with 200ms time-to-first-byte   - Accept: &#x60;application/json&#x60; for batch mode   - Accept: &#x60;text/event-stream&#x60; for streaming mode  **Key Features:** - WHOIS registration data with ownership history - Complete DNS record enumeration (A, AAAA, MX, NS, TXT, CNAME, SOA) - Subdomain discovery and enumeration - Link analysis showing connected domains - IP intelligence for all resolved addresses - Trademark and brand protection status - Infrastructure relationships and shared hosting  **Streaming Example:** &#x60;&#x60;&#x60;bash curl -N -H &#39;Accept: text/event-stream&#39; \\      -H &#39;Authorization: Bearer {token}&#39; \\      https://api.example.com/intelligence/v1/domain/example.com &#x60;&#x60;&#x60;  **Streaming Events:** - &#x60;whois&#x60;: Domain registration info - &#x60;dns&#x60;: DNS records - &#x60;subdomains&#x60;: Discovered subdomains - &#x60;ip_intelligence&#x60;: Intelligence for each resolved IP - &#x60;complete&#x60;: Final aggregated data  **Input Processing:** - Automatically strips protocols (http://, https://) - Removes www prefix if present - Validates domain format before processing  **Note:** Swagger UI only displays batch mode. Use curl or EventSource for streaming.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to analyze. Can be a root domain or subdomain. Protocol and www prefix are automatically removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDomainIntelligenceApiResponse"/>&gt;</returns>
        Task<IGetDomainIntelligenceApiResponse> GetDomainIntelligenceAsync(string domain, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get comprehensive domain intelligence with streaming support
        /// </summary>
        /// <remarks>
        /// Analyzes a domain name and returns comprehensive intelligence data from multiple sources.  **ðŸš€ Response Modes:** - **Batch Mode** (Default): Complete JSON response in 2-5 seconds - **Streaming Mode**: Server-Sent Events with 200ms time-to-first-byte   - Accept: &#x60;application/json&#x60; for batch mode   - Accept: &#x60;text/event-stream&#x60; for streaming mode  **Key Features:** - WHOIS registration data with ownership history - Complete DNS record enumeration (A, AAAA, MX, NS, TXT, CNAME, SOA) - Subdomain discovery and enumeration - Link analysis showing connected domains - IP intelligence for all resolved addresses - Trademark and brand protection status - Infrastructure relationships and shared hosting  **Streaming Example:** &#x60;&#x60;&#x60;bash curl -N -H &#39;Accept: text/event-stream&#39; \\      -H &#39;Authorization: Bearer {token}&#39; \\      https://api.example.com/intelligence/v1/domain/example.com &#x60;&#x60;&#x60;  **Streaming Events:** - &#x60;whois&#x60;: Domain registration info - &#x60;dns&#x60;: DNS records - &#x60;subdomains&#x60;: Discovered subdomains - &#x60;ip_intelligence&#x60;: Intelligence for each resolved IP - &#x60;complete&#x60;: Final aggregated data  **Input Processing:** - Automatically strips protocols (http://, https://) - Removes www prefix if present - Validates domain format before processing  **Note:** Swagger UI only displays batch mode. Use curl or EventSource for streaming.
        /// </remarks>
        /// <param name="domain">Domain name to analyze. Can be a root domain or subdomain. Protocol and www prefix are automatically removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDomainIntelligenceApiResponse"/>?&gt;</returns>
        Task<IGetDomainIntelligenceApiResponse?> GetDomainIntelligenceOrDefaultAsync(string domain, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get comprehensive IP address intelligence with streaming support
        /// </summary>
        /// <remarks>
        /// Analyzes an IP address and returns comprehensive intelligence data aggregated from multiple sources.  **ðŸš€ Response Modes:** - **Batch Mode** (Default): Complete JSON response in 2-3 seconds - **Streaming Mode**: Server-Sent Events with 150ms time-to-first-byte   - Accept: &#x60;application/json&#x60; for batch mode   - Accept: &#x60;text/event-stream&#x60; for streaming mode  **Key Features:** - Geolocation with city-level precision and confidence scores - Network topology including ASN, BGP prefixes, and routing visibility - ISP and organization identification - DNS relationships showing associated domains - Risk scoring based on threat intelligence feeds - RPKI validation and routing security assessment - Historical routing data and stability metrics  **Streaming Example:** &#x60;&#x60;&#x60;bash curl -N -H &#39;Accept: text/event-stream&#39; \\      -H &#39;Authorization: Bearer {token}&#39; \\      https://api.example.com/intelligence/v1/ip/8.8.8.8 &#x60;&#x60;&#x60;  **Note:** Swagger UI only displays batch mode. Use curl or EventSource for streaming.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">IPv4 or IPv6 address to analyze. Supports standard notation (e.g., 192.168.1.1 or 2001:db8::1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIpIntelligenceApiResponse"/>&gt;</returns>
        Task<IGetIpIntelligenceApiResponse> GetIpIntelligenceAsync(string address, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get comprehensive IP address intelligence with streaming support
        /// </summary>
        /// <remarks>
        /// Analyzes an IP address and returns comprehensive intelligence data aggregated from multiple sources.  **ðŸš€ Response Modes:** - **Batch Mode** (Default): Complete JSON response in 2-3 seconds - **Streaming Mode**: Server-Sent Events with 150ms time-to-first-byte   - Accept: &#x60;application/json&#x60; for batch mode   - Accept: &#x60;text/event-stream&#x60; for streaming mode  **Key Features:** - Geolocation with city-level precision and confidence scores - Network topology including ASN, BGP prefixes, and routing visibility - ISP and organization identification - DNS relationships showing associated domains - Risk scoring based on threat intelligence feeds - RPKI validation and routing security assessment - Historical routing data and stability metrics  **Streaming Example:** &#x60;&#x60;&#x60;bash curl -N -H &#39;Accept: text/event-stream&#39; \\      -H &#39;Authorization: Bearer {token}&#39; \\      https://api.example.com/intelligence/v1/ip/8.8.8.8 &#x60;&#x60;&#x60;  **Note:** Swagger UI only displays batch mode. Use curl or EventSource for streaming.
        /// </remarks>
        /// <param name="address">IPv4 or IPv6 address to analyze. Supports standard notation (e.g., 192.168.1.1 or 2001:db8::1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIpIntelligenceApiResponse"/>?&gt;</returns>
        Task<IGetIpIntelligenceApiResponse?> GetIpIntelligenceOrDefaultAsync(string address, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IGetDomainIntelligenceApiResponse"/>
    /// </summary>
    public interface IGetDomainIntelligenceApiResponse : Noctis.FrontGraph.Sdk.Client.IApiResponse, IOk<Noctis.FrontGraph.Sdk.Model.DomainIntelligenceResponse?>, IBadRequest<Noctis.FrontGraph.Sdk.Model.ErrorResponse?>, IUnauthorized<Noctis.FrontGraph.Sdk.Model.ErrorResponse?>, INotFound<Noctis.FrontGraph.Sdk.Model.ErrorResponse?>, ITooManyRequests<Noctis.FrontGraph.Sdk.Model.ErrorResponse?>, IInternalServerError<Noctis.FrontGraph.Sdk.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// The <see cref="IGetIpIntelligenceApiResponse"/>
    /// </summary>
    public interface IGetIpIntelligenceApiResponse : Noctis.FrontGraph.Sdk.Client.IApiResponse, IOk<Noctis.FrontGraph.Sdk.Model.IpIntelligenceResponse?>, IBadRequest<Noctis.FrontGraph.Sdk.Model.ErrorResponse?>, IUnauthorized<Noctis.FrontGraph.Sdk.Model.ErrorResponse?>, INotFound<Noctis.FrontGraph.Sdk.Model.ErrorResponse?>, ITooManyRequests<Noctis.FrontGraph.Sdk.Model.ErrorResponse?>, IInternalServerError<Noctis.FrontGraph.Sdk.Model.ErrorResponse?>
    {
        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 429 TooManyRequests
        /// </summary>
        /// <returns></returns>
        bool IsTooManyRequests { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class IntelligenceServicesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetDomainIntelligence;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetDomainIntelligence;

        internal void ExecuteOnGetDomainIntelligence(IntelligenceServicesApi.GetDomainIntelligenceApiResponse apiResponse)
        {
            OnGetDomainIntelligence?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetDomainIntelligence(Exception exception)
        {
            OnErrorGetDomainIntelligence?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnGetIpIntelligence;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorGetIpIntelligence;

        internal void ExecuteOnGetIpIntelligence(IntelligenceServicesApi.GetIpIntelligenceApiResponse apiResponse)
        {
            OnGetIpIntelligence?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorGetIpIntelligence(Exception exception)
        {
            OnErrorGetIpIntelligence?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class IntelligenceServicesApi : IIntelligenceServicesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<IntelligenceServicesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public IntelligenceServicesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="BearerToken"/>
        /// </summary>
        public TokenProvider<BearerToken> BearerTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="IntelligenceServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IntelligenceServicesApi(ILogger<IntelligenceServicesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, IntelligenceServicesApiEvents intelligenceServicesApiEvents,
            TokenProvider<BearerToken> bearerTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<IntelligenceServicesApi>();
            HttpClient = httpClient;
            Events = intelligenceServicesApiEvents;
            BearerTokenProvider = bearerTokenProvider;
        }

        partial void FormatGetDomainIntelligence(ref string domain);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="domain"></param>
        /// <returns></returns>
        private void ValidateGetDomainIntelligence(string domain)
        {
            if (domain == null)
                throw new ArgumentNullException(nameof(domain));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="domain"></param>
        private void AfterGetDomainIntelligenceDefaultImplementation(IGetDomainIntelligenceApiResponse apiResponseLocalVar, string domain)
        {
            bool suppressDefaultLog = false;
            AfterGetDomainIntelligence(ref suppressDefaultLog, apiResponseLocalVar, domain);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="domain"></param>
        partial void AfterGetDomainIntelligence(ref bool suppressDefaultLog, IGetDomainIntelligenceApiResponse apiResponseLocalVar, string domain);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="domain"></param>
        private void OnErrorGetDomainIntelligenceDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string domain)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetDomainIntelligence(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, domain);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="domain"></param>
        partial void OnErrorGetDomainIntelligence(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string domain);

        /// <summary>
        /// Get comprehensive domain intelligence with streaming support Analyzes a domain name and returns comprehensive intelligence data from multiple sources.  **ðŸš€ Response Modes:** - **Batch Mode** (Default): Complete JSON response in 2-5 seconds - **Streaming Mode**: Server-Sent Events with 200ms time-to-first-byte   - Accept: &#x60;application/json&#x60; for batch mode   - Accept: &#x60;text/event-stream&#x60; for streaming mode  **Key Features:** - WHOIS registration data with ownership history - Complete DNS record enumeration (A, AAAA, MX, NS, TXT, CNAME, SOA) - Subdomain discovery and enumeration - Link analysis showing connected domains - IP intelligence for all resolved addresses - Trademark and brand protection status - Infrastructure relationships and shared hosting  **Streaming Example:** &#x60;&#x60;&#x60;bash curl -N -H &#39;Accept: text/event-stream&#39; \\      -H &#39;Authorization: Bearer {token}&#39; \\      https://api.example.com/intelligence/v1/domain/example.com &#x60;&#x60;&#x60;  **Streaming Events:** - &#x60;whois&#x60;: Domain registration info - &#x60;dns&#x60;: DNS records - &#x60;subdomains&#x60;: Discovered subdomains - &#x60;ip_intelligence&#x60;: Intelligence for each resolved IP - &#x60;complete&#x60;: Final aggregated data  **Input Processing:** - Automatically strips protocols (http://, https://) - Removes www prefix if present - Validates domain format before processing  **Note:** Swagger UI only displays batch mode. Use curl or EventSource for streaming.
        /// </summary>
        /// <param name="domain">Domain name to analyze. Can be a root domain or subdomain. Protocol and www prefix are automatically removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDomainIntelligenceApiResponse"/>&gt;</returns>
        public async Task<IGetDomainIntelligenceApiResponse?> GetDomainIntelligenceOrDefaultAsync(string domain, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetDomainIntelligenceAsync(domain, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get comprehensive domain intelligence with streaming support Analyzes a domain name and returns comprehensive intelligence data from multiple sources.  **ðŸš€ Response Modes:** - **Batch Mode** (Default): Complete JSON response in 2-5 seconds - **Streaming Mode**: Server-Sent Events with 200ms time-to-first-byte   - Accept: &#x60;application/json&#x60; for batch mode   - Accept: &#x60;text/event-stream&#x60; for streaming mode  **Key Features:** - WHOIS registration data with ownership history - Complete DNS record enumeration (A, AAAA, MX, NS, TXT, CNAME, SOA) - Subdomain discovery and enumeration - Link analysis showing connected domains - IP intelligence for all resolved addresses - Trademark and brand protection status - Infrastructure relationships and shared hosting  **Streaming Example:** &#x60;&#x60;&#x60;bash curl -N -H &#39;Accept: text/event-stream&#39; \\      -H &#39;Authorization: Bearer {token}&#39; \\      https://api.example.com/intelligence/v1/domain/example.com &#x60;&#x60;&#x60;  **Streaming Events:** - &#x60;whois&#x60;: Domain registration info - &#x60;dns&#x60;: DNS records - &#x60;subdomains&#x60;: Discovered subdomains - &#x60;ip_intelligence&#x60;: Intelligence for each resolved IP - &#x60;complete&#x60;: Final aggregated data  **Input Processing:** - Automatically strips protocols (http://, https://) - Removes www prefix if present - Validates domain format before processing  **Note:** Swagger UI only displays batch mode. Use curl or EventSource for streaming.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="domain">Domain name to analyze. Can be a root domain or subdomain. Protocol and www prefix are automatically removed.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetDomainIntelligenceApiResponse"/>&gt;</returns>
        public async Task<IGetDomainIntelligenceApiResponse> GetDomainIntelligenceAsync(string domain, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetDomainIntelligence(domain);

                FormatGetDomainIntelligence(ref domain);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/intelligence/v1/domain/{domain}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/intelligence/v1/domain/{domain}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bdomain%7D", Uri.EscapeDataString(domain.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetDomainIntelligenceApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetDomainIntelligenceApiResponse>();

                        GetDomainIntelligenceApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/intelligence/v1/domain/{domain}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetDomainIntelligenceDefaultImplementation(apiResponseLocalVar, domain);

                        Events.ExecuteOnGetDomainIntelligence(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetDomainIntelligenceDefaultImplementation(e, "/intelligence/v1/domain/{domain}", uriBuilderLocalVar.Path, domain);
                Events.ExecuteOnErrorGetDomainIntelligence(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetDomainIntelligenceApiResponse"/>
        /// </summary>
        public partial class GetDomainIntelligenceApiResponse : Noctis.FrontGraph.Sdk.Client.ApiResponse, IGetDomainIntelligenceApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetDomainIntelligenceApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetDomainIntelligenceApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetDomainIntelligenceApiResponse(ILogger<GetDomainIntelligenceApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Noctis.FrontGraph.Sdk.Model.DomainIntelligenceResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Noctis.FrontGraph.Sdk.Model.DomainIntelligenceResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Noctis.FrontGraph.Sdk.Model.DomainIntelligenceResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Noctis.FrontGraph.Sdk.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Noctis.FrontGraph.Sdk.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Noctis.FrontGraph.Sdk.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public Noctis.FrontGraph.Sdk.Model.ErrorResponse? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<Noctis.FrontGraph.Sdk.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out Noctis.FrontGraph.Sdk.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Noctis.FrontGraph.Sdk.Model.ErrorResponse? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Noctis.FrontGraph.Sdk.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out Noctis.FrontGraph.Sdk.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Noctis.FrontGraph.Sdk.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Noctis.FrontGraph.Sdk.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests([NotNullWhen(true)]out Noctis.FrontGraph.Sdk.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Noctis.FrontGraph.Sdk.Model.ErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Noctis.FrontGraph.Sdk.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out Noctis.FrontGraph.Sdk.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatGetIpIntelligence(ref string address);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="address"></param>
        /// <returns></returns>
        private void ValidateGetIpIntelligence(string address)
        {
            if (address == null)
                throw new ArgumentNullException(nameof(address));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="address"></param>
        private void AfterGetIpIntelligenceDefaultImplementation(IGetIpIntelligenceApiResponse apiResponseLocalVar, string address)
        {
            bool suppressDefaultLog = false;
            AfterGetIpIntelligence(ref suppressDefaultLog, apiResponseLocalVar, address);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="address"></param>
        partial void AfterGetIpIntelligence(ref bool suppressDefaultLog, IGetIpIntelligenceApiResponse apiResponseLocalVar, string address);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="address"></param>
        private void OnErrorGetIpIntelligenceDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string address)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorGetIpIntelligence(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, address);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="address"></param>
        partial void OnErrorGetIpIntelligence(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, string address);

        /// <summary>
        /// Get comprehensive IP address intelligence with streaming support Analyzes an IP address and returns comprehensive intelligence data aggregated from multiple sources.  **ðŸš€ Response Modes:** - **Batch Mode** (Default): Complete JSON response in 2-3 seconds - **Streaming Mode**: Server-Sent Events with 150ms time-to-first-byte   - Accept: &#x60;application/json&#x60; for batch mode   - Accept: &#x60;text/event-stream&#x60; for streaming mode  **Key Features:** - Geolocation with city-level precision and confidence scores - Network topology including ASN, BGP prefixes, and routing visibility - ISP and organization identification - DNS relationships showing associated domains - Risk scoring based on threat intelligence feeds - RPKI validation and routing security assessment - Historical routing data and stability metrics  **Streaming Example:** &#x60;&#x60;&#x60;bash curl -N -H &#39;Accept: text/event-stream&#39; \\      -H &#39;Authorization: Bearer {token}&#39; \\      https://api.example.com/intelligence/v1/ip/8.8.8.8 &#x60;&#x60;&#x60;  **Note:** Swagger UI only displays batch mode. Use curl or EventSource for streaming.
        /// </summary>
        /// <param name="address">IPv4 or IPv6 address to analyze. Supports standard notation (e.g., 192.168.1.1 or 2001:db8::1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIpIntelligenceApiResponse"/>&gt;</returns>
        public async Task<IGetIpIntelligenceApiResponse?> GetIpIntelligenceOrDefaultAsync(string address, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await GetIpIntelligenceAsync(address, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get comprehensive IP address intelligence with streaming support Analyzes an IP address and returns comprehensive intelligence data aggregated from multiple sources.  **ðŸš€ Response Modes:** - **Batch Mode** (Default): Complete JSON response in 2-3 seconds - **Streaming Mode**: Server-Sent Events with 150ms time-to-first-byte   - Accept: &#x60;application/json&#x60; for batch mode   - Accept: &#x60;text/event-stream&#x60; for streaming mode  **Key Features:** - Geolocation with city-level precision and confidence scores - Network topology including ASN, BGP prefixes, and routing visibility - ISP and organization identification - DNS relationships showing associated domains - Risk scoring based on threat intelligence feeds - RPKI validation and routing security assessment - Historical routing data and stability metrics  **Streaming Example:** &#x60;&#x60;&#x60;bash curl -N -H &#39;Accept: text/event-stream&#39; \\      -H &#39;Authorization: Bearer {token}&#39; \\      https://api.example.com/intelligence/v1/ip/8.8.8.8 &#x60;&#x60;&#x60;  **Note:** Swagger UI only displays batch mode. Use curl or EventSource for streaming.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">IPv4 or IPv6 address to analyze. Supports standard notation (e.g., 192.168.1.1 or 2001:db8::1)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IGetIpIntelligenceApiResponse"/>&gt;</returns>
        public async Task<IGetIpIntelligenceApiResponse> GetIpIntelligenceAsync(string address, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetIpIntelligence(address);

                FormatGetIpIntelligence(ref address);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/intelligence/v1/ip/{address}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/intelligence/v1/ip/{address}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Baddress%7D", Uri.EscapeDataString(address.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    BearerToken bearerTokenLocalVar1 = (BearerToken) await BearerTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(bearerTokenLocalVar1);

                    bearerTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<GetIpIntelligenceApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<GetIpIntelligenceApiResponse>();

                        GetIpIntelligenceApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/intelligence/v1/ip/{address}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterGetIpIntelligenceDefaultImplementation(apiResponseLocalVar, address);

                        Events.ExecuteOnGetIpIntelligence(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorGetIpIntelligenceDefaultImplementation(e, "/intelligence/v1/ip/{address}", uriBuilderLocalVar.Path, address);
                Events.ExecuteOnErrorGetIpIntelligence(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="GetIpIntelligenceApiResponse"/>
        /// </summary>
        public partial class GetIpIntelligenceApiResponse : Noctis.FrontGraph.Sdk.Client.ApiResponse, IGetIpIntelligenceApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<GetIpIntelligenceApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="GetIpIntelligenceApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public GetIpIntelligenceApiResponse(ILogger<GetIpIntelligenceApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public Noctis.FrontGraph.Sdk.Model.IpIntelligenceResponse? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<Noctis.FrontGraph.Sdk.Model.IpIntelligenceResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out Noctis.FrontGraph.Sdk.Model.IpIntelligenceResponse? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public Noctis.FrontGraph.Sdk.Model.ErrorResponse? BadRequest()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsBadRequest
                    ? System.Text.Json.JsonSerializer.Deserialize<Noctis.FrontGraph.Sdk.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 400 BadRequest and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryBadRequest([NotNullWhen(true)]out Noctis.FrontGraph.Sdk.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = BadRequest();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)400);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public Noctis.FrontGraph.Sdk.Model.ErrorResponse? Unauthorized()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsUnauthorized
                    ? System.Text.Json.JsonSerializer.Deserialize<Noctis.FrontGraph.Sdk.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 401 Unauthorized and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryUnauthorized([NotNullWhen(true)]out Noctis.FrontGraph.Sdk.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = Unauthorized();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)401);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public Noctis.FrontGraph.Sdk.Model.ErrorResponse? NotFound()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsNotFound
                    ? System.Text.Json.JsonSerializer.Deserialize<Noctis.FrontGraph.Sdk.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 404 NotFound and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryNotFound([NotNullWhen(true)]out Noctis.FrontGraph.Sdk.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = NotFound();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)404);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public bool IsTooManyRequests => 429 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 429 TooManyRequests
            /// </summary>
            /// <returns></returns>
            public Noctis.FrontGraph.Sdk.Model.ErrorResponse? TooManyRequests()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsTooManyRequests
                    ? System.Text.Json.JsonSerializer.Deserialize<Noctis.FrontGraph.Sdk.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 429 TooManyRequests and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryTooManyRequests([NotNullWhen(true)]out Noctis.FrontGraph.Sdk.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = TooManyRequests();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)429);
                }

                return result != null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public Noctis.FrontGraph.Sdk.Model.ErrorResponse? InternalServerError()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsInternalServerError
                    ? System.Text.Json.JsonSerializer.Deserialize<Noctis.FrontGraph.Sdk.Model.ErrorResponse>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 500 InternalServerError and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryInternalServerError([NotNullWhen(true)]out Noctis.FrontGraph.Sdk.Model.ErrorResponse? result)
            {
                result = null;

                try
                {
                    result = InternalServerError();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)500);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
